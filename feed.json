{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Blog",
  "description": "다양한 주제에 대해서 이야기합니다. 개발, 기술, 일상, 주식, 부동산 등",
  "home_page_url": "https://leeduhan.github.io",
  "feed_url": "https://leeduhan.github.io/feed.json",
  "language": "ko-KR",
  "authors": [
    {
      "name": "lee du han",
      "url": "https://leeduhan.github.io"
    }
  ],
  "items": [
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-3/",
      "title": "Claude Code로 개발 워크플로우 - Git Subcommand 설치 및 사용법",
      "content_html": "\n\n# Git Subcommand 설치\n\nGit Subcommand 스크립트를 실행해서 설치한다. 설치된 스크립트는 다음과 같이 사용한다. \n\n```bash\n# Jira 워크트리 생성\ngit wt-jira QAT-3349          # → fix/QAT-3349\ngit wt-jira PROJ-123          # → feature/PROJ-123\ngit wt-jira QAT-3349 develop  # develop에서 생성\ngit wt-jira https://company.atlassian.net/browse/QAT-3349  # → fix/QAT-3349\n\ngit wt-list                       # 목록 확인\ngit wt-list -v                    # 상세 정보\ngit wt-cleanup                    # 안전 정리\n\n# 도움말\ngit wt-jira --help\ngit wt-cleanup --help  \ngit wt-list --help\n```\n\n자세한 매뉴얼은 git_worktree_manual.md를 참고하면 된다.\n\n스크립트의 동작 방식은 다음과 같다. \n\n## 1. git wt-jira QAT-xxxx\n\nQAT-xxxx로 시작하면 fix/QAT-xxxx로 worktree를 생성한다. 생성되는 폴더는 현재 폴더에 `.worktrees` 폴더를 만들고 그 안에 위치한다. 즉, `프로젝트root/.worktrees/fix-QAT-xxxx` 폴더가 생성된다. \n\n```bash\n$> git wt-jira https://company.atlassian.net/browse/QAT-3349  # → fix/QAT-3349\n```\n\n이 명령은 URL을 파싱해서 실행하므로 최종 명령은 동일하다. \n\n다음 명령 실행과 동일하다. \n\n```bash\n$> git worktree add .worktrees/fix-QAT-xxxx -b fix/QAT-xxxx [target브랜치]\n\n$> cd ./.worktrees/fix-QAT-xxxx # 생성된 worktree 폴더로 이동한다\n\n$> npm i # worktree는 새로운 프로젝트 폴더이므로 의존성을 다시 설치해야 한다. 내부적으로 패키지 매니저를 자동으로 인식해서 실행한다\n\n$> code . # VS Code를 실행한다\n```\n\nworktree 생성 시 `.worktrees` 폴더를 하위에 만드는 방식으로 결정한 것은 처음에 시도한 방법이 Slash Command였는데 이 방법은 Claude Code가 상위 디렉토리에 접근하지 못하는 문제가 있었다. 나중에 git worktree 관련 명령이 셸 스크립트로 바뀌면서 이 문제는 해결되었지만 `.worktrees` 폴더 밑에 모아놓은 게 관리하기 편하다는 것을 느껴서 이대로 구조를 유지했다. \n\n## 2. git wt-list\n\n아래 명령어의 단축어이다. \n\n```bash\n$> git worktree list\n```\n\n## 3. git wt-clean\n\n아래 명령어들의 단축어이다. 이 명령은 브랜치까지 삭제하지 않으므로 브랜치는 그대로 남아 있다. \n\n```bash\n$> git worktree remove [폴더절대경로]/.worktrees/fix-QAT-xxxx\n\n$> git worktree prune\n```\n\n## 셸 스크립트\n\n이 스크립트가 최종 완성본이다. 셸 등록 및 업데이트, 셸 스크립트 삭제가 하나의 명령어로 가능하다. \n\n해당 셸은 Mac에서 테스트되었다. 그 외 OS는 아마도 Claude의 도움이 필요하다.\n\n[enhanced_installer.sh 다운로드](/file/enhanced_installer.sh)\n\n```sh\n# 다운로드 후 실행\n$> bash ./enhanced_installer.sh\n```\n\n",
      "content_text": "Git Worktree를 활용한 효율적인 개발 환경 구성",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-3/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "git worktree",
        "Claude Code",
        "Jira",
        "개발 환경",
        "자동화"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-1/",
      "title": "Claude Code로 개발 워크플로우",
      "content_html": "\n# Claude Code로 개발 워크플로우\n\nClaude Code를 쓰면서 느낀 점이 매우 똑똑한 주니어와 페어 프로그래밍을 하는 느낌이었다. 똑똑한데 개발의 방향이랑 뭘 개발해야 하는지 명확하게 이해하지 못하는 주니어랄까?\n\n기존에 많은 유저가 쓰는 라이브러리는 정말 잘 쓰지만 조금이라도 비주류의 라이브러리는 상상 코딩하거나 제대로 동작을 못 시키거나 해서 따로 관련 샘플이나 자료를 링크 리스트를 만들어서 학습을 시켜서 진행을 해야 했다.\n\n그리고 어떤 작업은 내가 작업 플랜을 세우고 시키는 것보다 내가 직접 개발하는 게 훨씬 빠르고 나은 것도 있었다.\n\n문제를 해결할 때 생각보다 시간이 걸릴 때도 있었다.\n\n그래서 생각한 게 멀티 작업이다. Claude Code를 멀티 터미널로 열고, 작업 플랜을 각각 업로드하고 작업하게 하고 단계별로 성공할 때마다 커밋을 남기게 학습시키고 난 내가 할 수 있는 작업을 하는 것이다. \n\n그리고 난 일정 시간마다 작업 결과물을 확인하고, 다시 지시를 수정하고 난 내 업무를 또 하는 멀티태스킹으로 한다면 생산성이 매우 올라갈 것이라고 판단했다.(이미 앤트로픽 영상에 있더라...)\n\n그래서 AI 개발 워크플로우를 찾아보고 나름대로 만들어 보기로 했다.\n\n## Claude Code를 이용한 전체 워크플로우\n\n1. Jira를 연동해서 이슈 생성 후 상태값이 '진행중'으로 변경되면 Jira 내용을 읽어서 작업 계획을 세우고, 작업을 완료하면 자동으로 draft PR을 생성한다. \n2. 생성된 PR을 리뷰하면서 빠진 부분이나 문제가 없는지 확인하고, draft를 해제한 PR을 업데이트한다. \n3. QA를 요청한다. \n\n이를 구현하려면 워크플로우를 연결할 수 있는 추가적인 요소가 필요했다. 서버나 인프라 등 다른 구성 요소들이 필요해서 이 워크플로우는 추후 개발하기로 했다. n8n과의 조합으로 가능해 보이지만, 이것만 집중할 수 없어서 다음 계획으로 전환했다. \n\n## 로컬에서 Claude Code로 개발 워크플로우\n\n1. Git Subcommand를 이용해서 Jira 링크를 주면 git worktree를 생성하고 프로젝트를 초기 설정한 후 VS Code를 실행한다. 이때 CLAUDE.md가 자동으로 로드되어 기본적인 내용이 설정된다. \n2. 작업에 따라서 다음과 같이 사전 작업을 진행한다. \n    1. 신규\n        - 빈 컴포넌트와 빈 페이지 또는 껍데기 컴포넌트를 만든다. (TDD의 경우는 테스트 케이스를 작성한다.)\n        - 컴포넌트의 상단에 앵커 주석 시스템을 이용해서 AI가 처리할 작업을 작성한다.\n    2. 이슈\n        - 이슈의 내용을 정리해서 관련된 파일 리스트와 해결해야 하는 문제를 정의한 후 복사해서 제공한다. \n3. git worktree를 이용해서 또다른 작업트리를 생성(1번 ~ 3번 반복)한다.\n4. worktree별로 열린 에디터를 돌아다니면서 해당 이슈나 신규 기능이 제대로 작성되었는지 검토한다. 정상 동작할 때마다 Slash Command를 이용해서 현재 바뀐 코드 내용을 바탕으로 지금까지 작업한 내용을 커밋 메세지로 저장하게 한다.\n5. 검토가 완료되면 Git Subcommand를 이용해서 QA 브랜치에 머지 및 푸시하고 PR을 생성한다.\n6. git worktree를 삭제하고 워크트리에서 해제한다. \n\n\nClaude Code로 워크플로우를 만들 때 주요 구성 요소는 다음과 같다. \n\n1. [CLAUDE.md 작성](/posts/claude/2025-06-10-claude-md-guide)\n2. [Git Subcommand 설치](/posts/claude/2025-06-10-development-workflow-with-cloud-code-3)\n3. [Slash Command 설치](/posts/claude/2025-06-10-development-workflow-with-cloud-code-4)\n\n## 참고 링크\n- [Claude Code: Best practices for agentic coding](https://www.anthropic.com/engineering/claude-code-best-practices)\n",
      "content_text": "Claude Code를 활용한 효율적인 개발 워크플로우 구축 방법",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-1/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Claude Code",
        "Jira",
        "git worktree",
        "CLAUDE.md",
        "개발 워크플로우"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-claude-md-guide/",
      "title": "Claude Code로 개발 워크플로우 - CLAUDE.md 작성법",
      "content_html": "\n# 1. CLAUDE.md 작성\n\n프로젝트 최상단의 CLAUDE.md는 md 폴더 내 상세 가이드를 안내하고, 전체적인 워크플로우 및 전체 규칙을 정리하는 파일이다. \n\n```\n# Bash commands\n- npm run build: Build the project\n- npm run typecheck: Run the typechecker\n\n# Architecture Decisions  \n- Server Components by default, Client Components only when necessary  \n- tRPC for type-safe API calls  \n- Prisma for database access with explicit select statements  \n- Tailwind for styling (no custom CSS files)  \n\n# Code style\n- Use ES modules (import/export) syntax, not CommonJS (require)\n- Destructure imports when possible (eg. import { foo } from 'bar')\n\n# Patterns to Follow  \n- Data fetching happens in Server Components  \n- Client Components receive data as props  \n- Use Zod schemas for all external data  \n- Error boundaries around every data display component  \n\n# Workflow\n- Be sure to typecheck when you’re done making a series of code changes\n- Prefer running single tests, and not the whole test suite, for performance\n\n# What NOT to Do  \n- Don't use useEffect for data fetching  \n- Don't create global state without explicit approval  \n- Don't bypass TypeScript with 'any' types  \n```\n\n기본 형식이 위와 같이 되어 있는데 나는 다른 블로그에서 제공한 [AGENTS.md](https://github.com/julep-ai/julep/blob/dev/AGENTS.md)의 내용을 참고하여 프로젝트 root의 [CLAUDE.md](/file/CLAUDE-Guide.md)를 작성해 클로드 코드에 요청했다.\n\n그리고 이를 프로젝트에 적용한 후,\n\n\n1. 프로젝트별 정보 커스터마이징: 대괄호로 표시된 부분을 실제 프로젝트 정보로 수정\n2. 도메인 용어 추가: 프로젝트 특화 용어들을 도메인 사전에 추가\n3. 기술 스택 업데이트: 실제 사용하는 기술 스택으로 수정\n4. 팀 컨벤션 반영: 팀의 코딩 스타일과 워크플로우에 맞게 조정\n\n을 해달라고 해서 기본 CLAUDE.md 내용을 생성한 뒤 다음과 같이 파일을 분리했다. \n\n\n1. CLAUDE.md 작성(root)\n2. 하위 문서 작성(root/md)\n    1. 코딩가이드.md\n    2. 기술 스택 및 아키텍처.md\n    3. 프로젝트 구조.md\n    4. 빌드 및 실행 명령어.md\n    5. 앵커 주석 시스템.md\n    6. 개발 워크플로우.md\n    7. AI 개발 가드레일.md\n        - 필수 : **황금률**: 구현 세부 사항이나 요구 사항에 대해 확신이 서지 않을 때는 항상 가정을 하지 말고 개발자와 상의하세요. \n        - AI의 접근 범위를 반드시 명시해서 어디까지 가능하고 어디를 하면 안되는지 명시\n\n이런식으로 분리해서 클로드 코드가 처음 로딩할때 기본적으로 학습할 것을 정리해 놓는다. 그리고 반드시 해당 파일들은 임의로 수정하지 못하게 접근 가이드라인을 설정해야 한다.\n",
      "content_text": "Claude Code와 함께 사용할 CLAUDE.md 파일 작성 가이드",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-claude-md-guide/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "CLAUDE.md",
        "Claude Code",
        "AGENTS.md",
        "프로젝트 가이드",
        "코드 스타일",
        "TypeScript",
        "클로드 코드"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/stock/2025-06-02/",
      "title": "AI 투자의 명암: NVIDIA vs Palantir 완전 해부 분석",
      "content_html": "\n# 🤖 AI 투자의 명암: NVIDIA vs Palantir 완전 해부 분석\n\n> **\"같은 AI 관련주인데 왜 이렇게 다를까?\"** - 믿을 수 있는 투자 분석의 비밀\n\n안녕하세요, 투자자 여러분! 오늘은 특별한 분석 이야기를 들려드리려고 합니다.\n\n최근 AI 열풍으로 많은 관련주들이 급등하고 있는데요, 정말 모든 AI 주식이 투자할 만한 가치가 있을까요? 같은 AI 섹터에 속한 NVIDIA(NVDA)와 Palantir(PLTR)을 심층 분석해보니 놀라운 결과가 나왔습니다.\n\n## 🔍 분석의 핵심: \"말과 행동이 다르다\"\n\n기존의 투자 분석은 대부분 차트와 재무제표에 의존했습니다. 하지만 이번에는 **새로운 분석 방법**을 써봤는데, 핵심은 바로 **\"말과 행동의 차이\"**를 확인하는 것입니다.\n\n### 📊 무엇을 확인했나요?\n\n**1단계: 전문가들이 \"말하는 것\"**\n\n- 증권사 애널리스트의 매수/매도 추천\n- 목표주가 상향/하향 조정\n- 긍정적/부정적 전망 발표\n\n**2단계: 큰손들이 \"실제로 하는 것\"**\n\n- 대형 투자회사들의 실제 매수/매도 금액\n- 연기금, 보험사 등의 포지션 변화\n- 회사 임원들의 주식 거래 내역\n\n**3단계: 차이 정도 계산**\n말과 행동이 다를수록 \"위험 신호\"로 판단합니다.\n\n## 🚀 NVIDIA 분석 결과: \"조심스럽게 긍정\"\n\n### 📈 기본 현황\n\n- **현재가**: $135.13\n- **분석 결론**: 조심스럽게 상승 (15-20% 목표)\n- **분석 신뢰도**: 85%\n\n### 💡 핵심 발견사항\n\n**✅ 회사 실적 우수**\n\n- 분기 매출 $440억 (예상보다 $7억 더 많음)\n- AI 칩 매출 73% 급성장\n- 신제품 출시 성공적\n\n**⚠️ 하지만 주의할 점도 발견**\n\n- **말과 행동 차이 67%**: 애널리스트들은 \"강력 매수\"를 외치지만, 실제로는 대형 투자회사들이 수조원을 팔고 있었습니다.\n- **중국 리스크**: 중국 수출 규제로 분기당 80억 달러 손실 확정\n- **주가 부담**: 현재 주가가 미래 수익을 과도하게 반영\n\n**🎯 투자 전략**\n\n```\n✓ 매수 타이밍: 중국 관련 악재 뉴스 후 2-3일 기다린 후\n✓ 목표 가격: $165-170 달성 시 일부 매도\n✓ 손절 기준: $115 아래로 떨어지면 손절\n✓ 이유: 기본기는 좋지만 위험 요소 관리 필요\n```\n\n## 📉 Palantir 분석 결과: \"절대 사지 마세요\"\n\n### 📊 기본 현황\n\n- **현재가**: $123.50 (추정)\n- **분석 결론**: 절대 투자 금지 (-40~50% 하락 예상)\n- **분석 신뢰도**: 75%\n\n### 🚨 충격적인 발견사항\n\n**❌ 극심한 말과 행동 차이**\n\n- **차이 정도 88%**: 분석 역사상 최고 수준\n- **전문가들**: 중립, 평균 목표가 $88 (33% 하락 전망)\n- **시장 실제**: 2025년 나스닥 최고 성과주 (+63% 상승)\n\n**💥 위험 신호들**\n\n1. **터무니없는 주가**: 매출 대비 주가가 100배 이상 (정상은 10-20배)\n2. **창업자 매도**: 회사를 만든 피터 틸이 1조원어치 주식을 팔겠다고 신고\n3. **역사적 교훈**: 과거 이렇게 비싼 주식들은 모두 70% 이상 떨어졌음\n\n### 🔍 추가 검증 결과\n\n**다른 분석 방법**으로도 확인해봤는데 동일한 결론이 나왔습니다:\n\n- **시장 과열도**: 극도로 과열된 상태\n- **통계적 이상**: 정상 범위를 크게 벗어남\n- **모든 기술 지표**: 하락 신호\n\n## 💭 투자자를 위한 핵심 교훈\n\n### 1. 좋은 회사 ≠ 좋은 투자\n\nPalantir은 뛰어난 기술을 가진 훌륭한 회사입니다. 분기 39% 성장 등 실적도 우수했습니다. 하지만 **가격이 너무 비싸면** 좋은 투자가 될 수 없습니다.\n\n### 2. \"말과 행동\" 분석의 위력\n\n같은 AI 업종임에도 불구하고:\n\n- **NVIDIA**: 67% 차이 (주의 필요)\n- **Palantir**: 88% 차이 (극도 위험)\n\n돈을 실제로 움직이는 큰손들의 행동이 더 정확한 신호를 보내고 있었습니다.\n\n### 3. 주가는 결국 적정선으로 돌아간다\n\n- **NVIDIA**: 비싸긴 하지만 견딜 만한 수준\n- **Palantir**: 역사적으로 지속 불가능한 수준\n\n## 🎯 실전 투자 가이드\n\n### ✅ NVIDIA 투자 시 체크할 것들\n\n- [ ] 중국 관련 뉴스 계속 확인\n- [ ] CEO 발언 내용 추적\n- [ ] 대형 투자회사들의 매매 동향 확인\n- [ ] $115 아래로 떨어지면 손절 준비\n\n### ❌ Palantir 투자하면 안 되는 이유\n\n- [ ] 주가가 회사 가치의 100배 이상\n- [ ] 창업자가 대량 매도 진행 중\n- [ ] 전문가와 시장이 정반대 신호\n- [ ] 다시 살 때는 주가가 $30 이하로 떨어진 후\n\n## 📚 결론: 분석이 돈을 지켜준다\n\n이번 분석을 통해 확인한 것은 **\"같은 업종도 완전히 다르다\"**는 사실입니다.\n\n**NVIDIA**는 위험이 있지만 기본기가 튼튼한 조심스러운 투자 대상이고, **Palantir**는 좋은 회사이지만 현재 주가로는 절대 사면 안 되는 주식입니다.\n\n### 🔮 여러분의 투자에 활용해보세요\n\n1. **회사 실적 확인** (매출, 수익 증가율)\n2. **말과 행동 차이 점검** (전문가 의견 vs 큰손들의 실제 매매)\n3. **주가 적정성 검토** (너무 비싸지 않은지)\n4. **위험 관리** (손절 기준, 투자 비중)\n\n---\n\n**💬 여러분의 생각은 어떠신가요?**\n\n이런 분석 방법을 실제 투자에 써보신 적이 있다면 댓글로 경험을 공유해주세요! 다음에는 어떤 주식을 분석해봤으면 좋겠는지도 알려주시면 참고하겠습니다.\n\n**⚠️ 투자 주의사항**: 이 분석은 참고용이며, 모든 투자 결정과 결과는 투자자 본인의 책임입니다. 투자 전 반드시 추가 조사와 전문가 상담을 받으시기 바랍니다.\n\n---\n\n_📧 더 많은 투자 정보가 궁금하다면 구독과 좋아요 부탁드립니다!_\n\n**Tags**: #AI투자 #NVIDIA #Palantir #주식분석 #투자전략 #주식공부 #투자기초 #위험관리\n",
      "content_text": "증권사 애널리스트와 기관투자자들의 말과 행동이 67-88% 다르다는 충격적인 발견! NVIDIA는 조심스럽게 접근하고, Palantir는 지금 사면 안 되는 이유를 데이터로 분석했습니다. 피터 틸이 1조원어치 주식을 파는 진짜 이유는?",
      "url": "https://leeduhan.github.io/posts/stock/2025-06-02/",
      "date_published": "2025-06-02T00:00:00.000Z",
      "authors": [
        {
          "name": "클로드",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "AI투자",
        "NVIDIA",
        "Palantir",
        "PLTY",
        "주식분석",
        "투자",
        "주식공부",
        "반도체",
        "테크주",
        "애널리스트",
        "기관투자자",
        "밸류에이션",
        "나스닥",
        "중국리스크",
        "피터틸",
        "BlackRock",
        "AI칩",
        "Blackwell"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/ai/ai-friend-or-enemy/",
      "title": "AI는 친구인가? 적인가? - 개발자가 바라본 AI 시대 생존법",
      "content_html": "\n# AI는 친구인가? 적인가?\n\n요즘 AI로 개발하는 것이 어느 정도 당연시되고 있다.\n\n그래서 요즘엔 AI를 적극적으로 쓰면서 장단점을 파악해서 어떤 부분을 이용할 수 있고, 어떤 부분이 약하니까 누가 보완해야 하는지 고민하고 있는데\n\n의외로 나보다 젊은 회사 사람들은 AI 쓰는 것을 꺼린다. 정확히는 무서워한다고 해야 하나?\n\n\"AI에 너무 의존하게 되면서 내가 바보가 되어가는 것 같다\"고 이야기한다. AI가 모든 판단을 하고 결정을 하니까 점점 머리를 안 쓰게 되어서 바보가 되어간다고 느낀다고 한다.\n\n나도 그 말에는 동감한다. 너무 의존하게 되면 바보가 된다.\n\n하지만 이건 AI의 문제가 아니다.\n\n몇 가지 예를 들어보자.\n\n우리가 개발할 때 생각해보자. IDE 자동완성, 스택오버플로우, 깃허브 코파일럿... 이런 도구들 없이 개발하는 사람이 있을까? 예전 개발자들이 메모장으로 코딩했다고 해서 우리도 그래야 할까?\n\n도구는 도구일 뿐이다. 중요한 건 도구에 의존하는 게 아니라 도구를 통해 더 본질적인 문제에 집중하는 것이다. 자동완성이 있어도 좋은 코드 구조를 설계하는 능력은 여전히 사람의 몫이고, AI가 코드를 짜줘도 전체 아키텍처를 그리는 건 사람이 해야 한다.\n\n다른 예를 보자. 내가 집을 사려고 하는데 아무것도 모른다고 하자. 그러면 어떻게 할까? 먼저 부동산에 갈 거고 거기서 일면식도 없는 중개사를 만날 것이다. 나는 아무것도 모르니 그저 신뢰할 수 없는 사람의 말만 듣고 판단할 수밖에 없다.\n\n그런데 내 주변에 부동산을 잘하는 친구가 있다고 가정해보자. 그러면 내가 그 친구에게 많은 것을 물어가면서 중개사가 말하는 게 진짜인지 확인하지 않겠는가? AI란 그런 존재인 것이다.\n\n모든 것은 의존하게 되면 장기적으로는 손해다. 내가 학습한 게 없고 배운 게 없으니 체화도 없을 것이고, 결국 지식은 사라진다. AI를 통해 지식을 습득하고 체화해서 세부적인 방법을 내 것으로 만들어야 한다.\n\n결국 AI는 매우 다방면에 매우 똑똑한 동료 같은 존재다. 내가 통찰과 세부적인 방법이 내 몸에 익을 동안 도와주는 똑똑한 도구라고 생각한다.\n\n## 현실: 전쟁터에 호미 들고 나갈 건가?\n\n사회는 전쟁터다. 전쟁터에 나가는데 남들은 총을 들고 나가는데 나 혼자 호미 들고 전쟁에 나가면 이길 수 있겠는가?\n\n지금 프로그래밍을 배우는 사람들은 AI 쓰는 것을 당연시할 것이고, 그 과정에서 결국 가성비로 보면 AI를 잘 쓰는 사람이 압도적으로 유리하다. 기업 입장에서는 생존을 위해서라도 생산성이 뛰어난 'AI 잘 쓰는 개발자'를 뽑을 것이다.\n\n아니면 업계가 통합되면서 기획자나 디자이너가 개발도 함께 하게 될 수도 있다.\n\n한때 엑셀을 잘하는 사람이 대우 받던것 처럼 모든 시대에는 필요로하고, 가성비 좋지만 쉽게 접근하지 않는 무언가가 존재한다.\n\n## 인간 역사는 가성비의 승리\n\n어떤 시대가 올지 모르지만 인간의 역사는 대부분 가성비(투입 대비 산출)의 승리였다고 생각한다. 적자생존을 하려면 누구보다 적은 에너지로 많은 에너지를 얻어야 했고, 그 에너지로 경쟁자보다 빠르게 앞으로 나가야만 살아남을 수 있었다.\n\n그래서 나는 오늘도 적이 될지 모르는 친구를 분석해서 최대한 내 친구가 되도록 만들려고 노력 중이다.\n\n주변에 잘하는 친구가 있다면 그것을 시기, 질투, 외면할 것이 아니라 친하게 지내고 그 기간 동안 최대한 많은 것을 배워야 한다. 그래서 내 것으로 만들어야 한다.\n\nAI 시대에는 많은 것이 변할 것이다. 개발하는 것조차도 단순 노가다는 AI가 하고, 아키텍처 설계 같은 큰 방향성 설계나 어떤 것이 옳은 방향인지는 결국 사람이 해야 한다.\n\n현재의 패러다임도 많이 변하게 될 것이다.\n\n## 결론: 환경에 적응하는 자가 살아남는다\n\n인간은 미지에 공포를 느낀다. 지금 AI에 두려움을 느끼고 있는 것은 이제 AI를 시작하는 사람들이 아닌 기존 것에 익숙한 기존 사람들이다.\n\n익숙한 것에서 벗어나야 하는데 그게 쉽지 않을 것이다. 그리고 점점 AI가 다가올수록 두려울 것이다.\n\n그게 인간의 본능이다. 그 본능을 이기고 한 발자국 나갈 수 있다면 우리는 생존의 한걸음이 될 수 있다.\n\n> **\"살아남는 종은 가장 강하거나 가장 지적인 종이 아니다. 변화하는 환경에 가장 잘 적응할 수 있는 종이다.\"**  \n> — 레온 C. 메기슨 (Leon C. Megginson), 1963년 (다윈의 진화론을 해석하며)\n\nAI는 변화의 물결이다. 내가 이 물결을 거스르고 올라갈 것인지, 물결을 타면서 더 멀리 가서 생존할 것인지 그 선택의 기로에 서 있다.\n\n그것이 바로 지금이다.\n\n---\n\n**Tags**: #AI #개발자 #생산성 #적자생존 #환경적응 #코딩도구 #IDE #깃허브코파일럿 #가성비 #개발도구 #프로그래밍 #기술변화 #개발커리어 #AI시대\n",
      "content_text": "AI를 두려워하는 동료들과 달리, 나는 AI를 똑똑한 동료로 여긴다. 전쟁터에서 호미 들고 싸울 순 없지 않나? AI 시대를 살아가는 개발자의 현실적 조언.",
      "url": "https://leeduhan.github.io/posts/ai/ai-friend-or-enemy/",
      "date_published": "2025-06-02T00:00:00.000Z",
      "authors": [
        {
          "name": "lee du han",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "AI",
        "개발자",
        "생산성",
        "적자생존",
        "기술변화",
        "개발커리어",
        "AI시대"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react-19-guide/",
      "title": "React 19 완벽 가이드",
      "content_html": "\n# React 19 완벽 가이드\n\nReact 19가 정식 출시되면서 프론트엔드 개발에 많은 변화를 가져왔습니다. 이번 글에서는 React 19의 주요 기능들과 실제 사용법을 알아보겠습니다.\n\n## 새로운 훅들\n\n### use() 훅\n\n가장 주목받는 새로운 훅은 `use()`입니다. 이 훅을 통해 Promise와 Context를 더 쉽게 다룰 수 있습니다.\n\n```javascript\nimport { use, Suspense } from \"react\";\n\nfunction UserComponent({ userPromise }) {\n  // Promise를 직접 사용할 수 있습니다\n  const user = use(userPromise);\n\n  return <div>안녕하세요, {user.name}님!</div>;\n}\n\nfunction App() {\n  const userPromise = fetch(\"/api/user\").then((res) => res.json());\n\n  return (\n    <Suspense fallback={<div>로딩중...</div>}>\n      <UserComponent userPromise={userPromise} />\n    </Suspense>\n  );\n}\n```\n\n### useOptimistic() 훅\n\n낙관적 업데이트를 쉽게 구현할 수 있는 새로운 훅입니다:\n\n```javascript\nimport { useOptimistic, useState } from \"react\";\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  const [optimisticTodos, addOptimisticTodo] = useOptimistic(\n    todos,\n    (currentTodos, newTodo) => [...currentTodos, newTodo]\n  );\n\n  async function addTodo(formData) {\n    const newTodo = { id: Date.now(), text: formData.get(\"text\") };\n\n    // 즉시 UI 업데이트\n    addOptimisticTodo(newTodo);\n\n    // 서버에 실제 요청\n    try {\n      const savedTodo = await saveTodo(newTodo);\n      setTodos((prev) => [...prev, savedTodo]);\n    } catch (error) {\n      // 에러 시 자동으로 이전 상태로 롤백\n      console.error(\"할 일 저장 실패:\", error);\n    }\n  }\n\n  return (\n    <div>\n      {optimisticTodos.map((todo) => (\n        <div key={todo.id}>{todo.text}</div>\n      ))}\n      <form action={addTodo}>\n        <input name=\"text\" placeholder=\"새 할 일\" />\n        <button type=\"submit\">추가</button>\n      </form>\n    </div>\n  );\n}\n```\n\n## 서버 컴포넌트 개선\n\n### 향상된 성능\n\nReact 19에서는 서버 컴포넌트의 성능이 크게 개선되었습니다:\n\n- **스트리밍 최적화**: 더 빠른 초기 페이지 로드\n- **선택적 하이드레이션**: 필요한 부분만 하이드레이션\n- **메모리 사용량 감소**: 서버 메모리 효율성 향상\n\n```javascript\n// 서버 컴포넌트에서 비동기 데이터 처리\nasync function BlogPost({ id }) {\n  // 서버에서 직접 데이터베이스 쿼리\n  const post = await db.posts.findById(id);\n  const comments = await db.comments.findByPostId(id);\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n      <Comments comments={comments} />\n    </article>\n  );\n}\n```\n\n## 새로운 컴파일러\n\n### React Compiler\n\nReact 19에는 새로운 컴파일러가 포함되어 자동 최적화를 제공합니다:\n\n```javascript\n// 이제 수동으로 메모이제이션할 필요가 없습니다\nfunction ExpensiveComponent({ data, filter }) {\n  // 컴파일러가 자동으로 최적화\n  const filteredData = data.filter((item) => item.category === filter);\n\n  const processedData = filteredData.map((item) => ({\n    ...item,\n    processed: true,\n  }));\n\n  return (\n    <div>\n      {processedData.map((item) => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n## 폼 처리 개선\n\n### 새로운 formAction\n\n폼 처리가 더욱 간단해졌습니다:\n\n```javascript\nfunction ContactForm() {\n  async function handleSubmit(formData) {\n    \"use server\"; // 서버 액션\n\n    const email = formData.get(\"email\");\n    const message = formData.get(\"message\");\n\n    await sendEmail({ email, message });\n    redirect(\"/thank-you\");\n  }\n\n  return (\n    <form action={handleSubmit}>\n      <input name=\"email\" type=\"email\" required />\n      <textarea name=\"message\" required />\n      <button type=\"submit\">전송</button>\n    </form>\n  );\n}\n```\n\n## 마이그레이션 팁\n\n### 주요 변경사항\n\n1. **StrictMode 강화**: 개발 모드에서 더 엄격한 검사\n2. **레거시 API 제거**: 일부 오래된 API가 제거됨\n3. **TypeScript 지원 개선**: 더 나은 타입 추론\n\n### 업그레이드 체크리스트\n\n- [ ] React 18에서 안정적으로 작동하는지 확인\n- [ ] 사용 중단된 API 사용 여부 점검\n- [ ] 테스트 케이스 업데이트\n- [ ] 의존성 라이브러리 호환성 확인\n\n```bash\n# 업그레이드 명령어\nnpm install react@19 react-dom@19\n\n# 또는 yarn\nyarn add react@19 react-dom@19\n```\n\n## 성능 개선사항\n\n### 번들 크기 감소\n\n- **Tree Shaking 개선**: 더 정확한 사용하지 않는 코드 제거\n- **코드 스플리팅**: 자동화된 청크 분할\n- **압축 최적화**: 더 작은 프로덕션 번들\n\n### 런타임 성능\n\n- **메모리 사용량 감소**: 더 효율적인 메모리 관리\n- **렌더링 최적화**: 불필요한 리렌더링 방지\n- **이벤트 처리**: 더 빠른 이벤트 처리\n\n## 결론\n\nReact 19는 개발자 경험과 성능 모두에서 큰 발전을 이뤘습니다. 새로운 훅들과 컴파일러 최적화로 더 깔끔하고 효율적인 코드를 작성할 수 있게 되었습니다.\n\n점진적으로 새로운 기능들을 도입하면서 React 19의 장점을 최대한 활용해보세요!\n",
      "content_text": "React 19의 새로운 기능들과 변경사항을 자세히 알아봅니다.",
      "url": "https://leeduhan.github.io/posts/react-19-guide/",
      "date_published": "2025-06-01T00:00:00.000Z",
      "authors": [
        {
          "name": "Blog Author",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "react",
        "javascript",
        "frontend",
        "web development"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/nextjs-15-features/",
      "title": "Next.js 15의 새로운 기능들",
      "content_html": "\n# Next.js 15의 새로운 기능들\n\nNext.js 15가 출시되면서 많은 흥미로운 기능들이 추가되었습니다. 이번 포스트에서는 주요 변경사항과 새로운 기능들을 자세히 살펴보겠습니다.\n\n## 주요 변경사항\n\n### React 19 지원\n\nNext.js 15는 React 19를 완전히 지원합니다. 이는 다음과 같은 이점을 제공합니다:\n\n- **향상된 성능**: 새로운 React 컴파일러 최적화\n- **개선된 서버 컴포넌트**: 더 빠른 렌더링과 낮은 번들 크기\n- **새로운 훅들**: `use()` 훅 등의 새로운 기능\n\n```javascript\n// React 19의 새로운 use() 훅 사용 예제\nimport { use } from \"react\";\n\nfunction UserProfile({ userPromise }) {\n  const user = use(userPromise);\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n### Turbopack 안정화\n\nTurbopack이 개발 모드에서 기본값으로 설정되었습니다:\n\n- **더 빠른 개발 서버**: 기존 Webpack 대비 최대 10배 빠른 속도\n- **향상된 HMR**: 거의 즉시 반영되는 핫 리로드\n- **메모리 효율성**: 더 적은 메모리 사용량\n\n## 새로운 기능들\n\n### 1. 향상된 정적 내보내기\n\n`output: 'export'` 옵션이 개선되어 더 많은 기능을 지원합니다:\n\n```javascript\n// next.config.js\nconst nextConfig = {\n  output: \"export\",\n  trailingSlash: true,\n  images: {\n    unoptimized: true,\n  },\n};\n```\n\n### 2. 개선된 이미지 최적화\n\n새로운 이미지 최적화 옵션들이 추가되었습니다:\n\n- **WebP 자동 변환**: 지원되는 브라우저에서 자동으로 WebP 형식 사용\n- **로딩 우선순위**: 중요한 이미지의 우선 로딩 지원\n- **반응형 이미지**: 더 나은 반응형 이미지 지원\n\n### 3. 새로운 메타데이터 API\n\nSEO와 소셜 미디어 최적화를 위한 새로운 메타데이터 API:\n\n```typescript\nimport type { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"My Blog Post\",\n  description: \"An amazing blog post about Next.js\",\n  openGraph: {\n    title: \"My Blog Post\",\n    description: \"An amazing blog post about Next.js\",\n    images: [\"/og-image.jpg\"],\n  },\n};\n```\n\n## 성능 개선사항\n\n### 빌드 시간 단축\n\n- **증분 빌드**: 변경된 부분만 다시 빌드\n- **병렬 처리**: 더 많은 작업을 병렬로 처리\n- **캐시 최적화**: 더 효율적인 빌드 캐시\n\n### 런타임 성능\n\n- **번들 크기 감소**: Tree-shaking 개선으로 더 작은 번들\n- **코드 스플리팅**: 더 지능적인 코드 분할\n- **프리페칭**: 향상된 페이지 프리페칭\n\n## 마이그레이션 가이드\n\nNext.js 14에서 15로 업그레이드하는 방법:\n\n```bash\nnpm install next@latest react@latest react-dom@latest\n```\n\n주요 변경사항:\n\n- Node.js 18.17 이상 필요\n- React 19 호환성 확인\n- 사용 중단된 API 제거\n\n## 결론\n\nNext.js 15는 성능, 개발자 경험, 그리고 프로덕션 최적화 측면에서 많은 개선을 가져왔습니다. React 19와의 완벽한 통합과 Turbopack의 안정화로 더욱 빠르고 효율적인 개발이 가능해졌습니다.\n\n새로운 기능들을 활용해 더 나은 웹 애플리케이션을 구축해보세요!\n",
      "content_text": "Next.js 15에서 도입된 주요 기능들과 개선사항을 살펴봅니다.",
      "url": "https://leeduhan.github.io/posts/nextjs-15-features/",
      "date_published": "2025-06-01T00:00:00.000Z",
      "authors": [
        {
          "name": "Blog Author",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "nextjs",
        "react",
        "web development",
        "javascript"
      ]
    }
  ]
}