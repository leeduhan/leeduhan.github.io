{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Blog",
  "description": "다양한 주제에 대해서 이야기합니다. 개발, 기술, 일상, 주식, 부동산 등",
  "home_page_url": "https://leeduhan.github.io",
  "feed_url": "https://leeduhan.github.io/feed.json",
  "language": "ko-KR",
  "authors": [
    {
      "name": "lee du han",
      "url": "https://leeduhan.github.io"
    }
  ],
  "items": [
    {
      "id": "https://leeduhan.github.io/posts/IaC/iac-tools-trends-2024-2025/",
      "title": "Infrastructure as Code 도구의 2024-2025 트렌드 변화와 인기도 분석",
      "content_html": "\n## OpenTofu의 등장이 촉발한 IaC 시장의 대변혁\n\n2024-2025년 Infrastructure as Code(IaC) 시장은 HashiCorp의 라이선스 정책 변경으로 촉발된 역사적 전환점을 맞이했습니다. **Terraform의 BSL 라이선스 전환에 대한 반발로 탄생한 OpenTofu가 단 1년 만에 25,800개 이상의 GitHub 스타를 획득하며 급성장**했고, **Pulumi는 167%의 기여도 성장률로 가장 높은 개발 속도**를 보였으며, **Crossplane은 CNCF 생태계 내에서 쿠버네티스 네이티브 IaC 표준**으로 자리잡고 있습니다.\n\n전체 IaC 시장은 2024년 13.2억 달러에서 2034년 94억 달러로 성장할 것으로 예상되며, 연평균 성장률은 24.27%에 달합니다.\n\n## GitHub 활동 지표: 커뮤니티 모멘텀의 극적 변화\n\n### 급격한 성장세를 보이는 도구들\n\nGitHub 메트릭 분석 결과 **2024-2025년 사이 가장 극적인 변화는 OpenTofu의 폭발적 성장**입니다. 2024년 1월 정식 출시 이후 GitHub 스타가 17,900개에서 25,800개로 증가했으며, 기여자 수는 거의 3배 증가했습니다. 특히 주목할 점은 **OpenTofu가 Terraform보다 월간 PR 활동에서 앞서기 시작**했다는 것입니다 - OpenTofu 83개 PR 대비 Terraform 67개 PR로 커뮤니티 개발 속도에서 역전이 일어났습니다.\n\n**Pulumi는 가장 활발한 개발 활동**을 보여주며 7년간 75,000개 이상의 PR과 5,600명 이상의 기여자를 확보했습니다. 2024년 한 달 동안 117개의 PR이 병합되어 모든 IaC 도구 중 최고 수준의 개발 속도를 기록했습니다. **기여도 성장률 167%는 경쟁 도구들을 크게 앞서는 수치**입니다.\n\nTerraform의 경우 여전히 45,000개 이상의 스타로 절대 수치에서는 선두를 유지하지만, **커뮤니티 기여도가 21%에서 9%로 급감**했습니다. BSL 라이선스 변경 이후 대부분의 개발이 HashiCorp 내부에서만 이루어지고 있어 오픈소스 프로젝트로서의 활력이 크게 감소했습니다.\n\n### OpenTofu의 공격적인 기능 개발\n\nOpenTofu는 공격적인 기능 개발로 주목받고 있습니다. **2024-2025년 사이 Terraform이 5년 이상 요청받았던 상태 파일 암호화 기능을 구현**했고, provider for_each, 동적 모듈 소싱 등 혁신적 기능들을 빠르게 추가했습니다. 버전 1.9.1이 1.9.0을 단 7일 만에 추월한 것은 역대 최고 속도의 패치 채택률을 보여줍니다.\n\n## 채용 시장 트렌드: 극명한 수요 변화\n\n### Terraform의 하락세와 Pulumi의 폭발적 성장\n\n채용 시장 분석에서 가장 놀라운 발견은 **Pulumi 관련 채용 공고가 영국에서 462% 증가**했다는 점입니다. 2024년 45개에서 2025년 253개로 폭증하며 가장 빠른 성장세를 보였습니다. 반면 **Terraform 채용 공고는 2024년 2,440개에서 2025년 1,969개로 19% 감소**했습니다. 이는 3년 연속 하락세로, 2023년 3,534개 대비 44% 감소한 수치입니다.\n\n**급여 수준에서도 차이**가 나타납니다. Pulumi 전문가의 미국 평균 연봉은 $146,000-$279,000으로 Terraform의 $85,000-$150,000보다 훨씬 높습니다. 이는 Pulumi 기술에 대한 시장의 프리미엄 평가를 반영합니다.\n\n### OpenTofu의 시장 침투\n\nOpenTofu는 독립적인 채용 공고는 아직 제한적이지만, **점점 더 많은 기업들이 \"Terraform 또는 OpenTofu\" 경험을 요구**하기 시작했습니다. 특히 IBM의 HashiCorp 인수 이후 vendor lock-in을 우려하는 기업들이 OpenTofu 전문가를 찾고 있습니다. Oracle, VMware, GitLab 등 주요 기업들이 공식적으로 OpenTofu 채택을 발표하면서 향후 채용 수요가 급증할 것으로 예상됩니다.\n\n## 기업 도입률: 라이선스 우려가 촉발한 대규모 마이그레이션\n\n### Fidelity Investments의 대규모 전환\n\n**가장 주목할 만한 사례는 Fidelity Investments의 2,000개 애플리케이션 마이그레이션**입니다. 단 두 분기 만에 70%의 프로젝트를 Terraform에서 OpenTofu로 전환했으며, 전사 기본 CLI를 OpenTofu로 변경했습니다. 이는 대기업도 빠르게 전환할 수 있음을 보여주는 중요한 사례입니다.\n\n### 시장 점유율과 도입 패턴\n\n전체 Fortune 500 기업의 **79%가 여전히 Terraform을 사용**하지만, 새로운 프로젝트에서는 다른 양상이 나타납니다. **신규 프로젝트의 경우 OpenTofu와 Pulumi 선택 비율이 급증**하고 있으며, 특히 스타트업과 클라우드 네이티브 기업들 사이에서 이러한 경향이 두드러집니다.\n\n**Pulumi는 Fortune 50 기업의 절반 이상이 사용**하며 3,000개 이상의 고객사를 확보했습니다. Mercedes-Benz는 Pulumi를 사용해 수백 개의 Kubernetes 클러스터를 관리하는 플랫폼을 구축했고, Starburst Data는 배포 시간을 2주에서 3시간으로 단축했습니다.\n\n### 스타트업 vs 대기업 선호도 차이\n\n**스타트업은 OpenTofu와 Pulumi를 선호**하는 반면, **대기업은 기존 Terraform 투자를 유지하면서도 OpenTofu 마이그레이션을 적극 검토**하고 있습니다. 특히 금융, 보험 등 규제 산업에서 vendor-neutral 솔루션에 대한 선호가 높아지고 있습니다. Crossplane은 **SAP, Nike, NASA 등 쿠버네티스 중심 기업**들이 채택하며 플랫폼 엔지니어링 분야에서 입지를 강화하고 있습니다.\n\n## 커뮤니티 활동: OpenTofu가 주도하는 새로운 역학\n\n### 컨퍼런스와 커뮤니티 이벤트\n\n2024년 KubeCon에서 **OpenTofu Day가 CNCF 공식 이벤트로 개최**된 것은 상징적인 사건입니다. HashiConf 2024는 1,400명의 오프라인 참석자로 규모가 축소된 반면, OpenTofu 관련 밋업과 워크샵이 전 세계적으로 증가했습니다. **Crossplane은 8개 이상의 전용 세션**을 가지며 CNCF 생태계 내에서 강력한 존재감을 보였습니다.\n\n### 개발자 커뮤니티 활성도\n\nStack Overflow 질문 수는 전반적으로 감소 추세지만, 이는 **AI 도구 채택(84%의 개발자가 사용)으로 인한 현상**입니다. Reddit의 r/devops와 r/terraform에서는 OpenTofu 마이그레이션 전략에 대한 활발한 토론이 이어지고 있으며, 커뮤니티 정서는 OpenTofu에 대해 매우 긍정적입니다.\n\n**Pulumi는 가장 높은 개발 속도**를 보이며 월간 117개의 PR 병합으로 Terraform(67개)과 OpenTofu(83개)를 앞섰습니다. 100백만 다운로드를 돌파하며 17만 명 이상의 개발자가 사용 중입니다.\n\n## OpenTofu 등장 이후 시장 변화의 핵심 동향\n\n### 라이선스 정책이 촉발한 패러다임 전환\n\nHashiCorp의 BSL 전환은 **IaC 시장의 근본적인 재편**을 가져왔습니다. 단일 지배적 도구(Terraform)에서 **다양한 접근법이 공존하는 경쟁 시장**으로 변화했습니다. OpenTofu는 Linux Foundation의 지원 아래 **진정한 오픈소스 대안**으로 자리잡았고, 140개 이상의 조직과 600명 이상의 개인이 지원을 약속했습니다.\n\n### Pulumi의 성장 전략\n\nPulumi는 **프로그래밍 언어 우선 접근법**으로 차별화에 성공했습니다. Python, TypeScript, Go 등 친숙한 언어를 사용해 개발자들의 진입 장벽을 낮췄고, **복잡한 조건부 로직이 필요한 인프라 관리**에서 강점을 보입니다. 2024년 Pulumi ESC(secrets management)와 Pulumi Insights 2.0 출시로 단순 IaC를 넘어 **종합 클라우드 관리 플랫폼**으로 진화했습니다.\n\n### Crossplane의 쿠버네티스 생태계 내 위치\n\nCrossplane은 **쿠버네티스 네이티브 접근법**으로 독특한 포지션을 확보했습니다. CRD(Custom Resource Definitions)를 사용한 인프라 관리로 **GitOps 워크플로우와 자연스럽게 통합**되며, CNCF Incubating 프로젝트로서 graduation을 앞두고 있습니다. **799명 이상의 기여자(4배 성장)**와 395개 기여 기업(4배 성장)이 참여하며 빠르게 성장 중입니다.\n\n## 2025년 이후 전망과 시사점\n\n### 시장은 다극화되지만 OpenTofu가 오픈소스 표준으로 부상\n\nIaC 시장은 **세 가지 뚜렷한 세그먼트로 분화**될 것으로 예상됩니다: IBM/HashiCorp의 상업용 Terraform, 커뮤니티 주도의 OpenTofu, 그리고 Pulumi/Crossplane 같은 대안적 접근법들입니다. **OpenTofu는 \"인프라의 HTTP\"가 되어 보편적 표준**으로 자리잡을 가능성이 높으며, 일일 레지스트리 요청이 100만 건을 넘어서며 이미 그 가능성을 보여주고 있습니다.\n\n### 혁신 가속화와 기능 경쟁\n\n경쟁이 **전체 IaC 생태계의 혁신을 가속화**하고 있습니다. OpenTofu가 Terraform이 5년간 미루던 기능들을 빠르게 구현하면서 HashiCorp도 대응에 나서고 있습니다. Pulumi의 AI 통합(Pulumi Copilot)과 Crossplane의 플랫폼 엔지니어링 기능 강화 등 **각 도구가 독특한 강점을 개발**하며 시장을 확대하고 있습니다.\n\n### 기업의 전략적 선택 기준\n\n2025년 기업들의 IaC 도구 선택 기준은 **기술적 우위보다 거버넌스와 라이선스 정책**이 더 중요해질 것입니다. vendor-neutral 솔루션 선호, 멀티클라우드 지원, 커뮤니티 활성도가 핵심 평가 요소가 되며, **단일 도구가 아닌 멀티툴 전략**을 채택하는 기업이 증가할 것으로 예상됩니다. 특히 OpenTofu와 Terraform 모두를 지원하는 하이브리드 접근법이 리스크 관리 측면에서 선호될 것입니다.\n\n## 마무리\n\nIaC 시장의 변화는 단순한 기술적 진화를 넘어 오픈소스 생태계 전체의 미래를 보여주는 사례입니다. OpenTofu의 성공은 개발자 커뮤니티가 vendor lock-in에 대한 우려를 얼마나 진지하게 받아들이는지를 보여주며, Pulumi와 Crossplane의 성장은 다양한 접근법이 공존할 수 있는 시장의 가능성을 증명합니다.\n\n앞으로 IaC 도구 선택은 단순히 기능과 성능만으로 결정되지 않을 것입니다. 장기적인 거버넌스 전략, 커뮤니티의 지속가능성, 그리고 vendor-neutral한 접근법이 더욱 중요한 평가 기준이 될 것이며, 이러한 변화는 전체 인프라 관리 생태계를 더욱 건강하고 혁신적으로 만들어 나갈 것입니다.",
      "content_text": "OpenTofu의 등장으로 촉발된 IaC 시장의 대변혁과 Pulumi, Crossplane 등 주요 도구들의 성장 동향을 깊이 있게 분석합니다.",
      "url": "https://leeduhan.github.io/posts/IaC/iac-tools-trends-2024-2025/",
      "date_published": "2025-08-24T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Infrastructure as Code",
        "IaC",
        "OpenTofu",
        "Terraform",
        "Pulumi",
        "Crossplane",
        "DevOps",
        "클라우드",
        "마이그레이션"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/technology/2025-08-21-nextjs-15-react-19-mdx-rsc-architecture-deep-dive/",
      "title": "Next.js 15와 React 19: MDX 및 RSC 아키텍처 완벽 분석",
      "content_html": "\n## 목차\n\n1. [MDX 빌드 파이프라인과 컴파일러 아키텍처](#mdx-빌드-파이프라인과-컴파일러-아키텍처)\n2. [React Server Components와 정적 빌드의 혁신적 메커니즘](#react-server-components와-정적-빌드의-혁신적-메커니즘)\n3. [Next.js 15의 혁신적 기능들](#nextjs-15의-혁신적-기능들)\n4. [React 19의 혁신적 기능들](#react-19의-혁신적-기능들)\n5. [성능 분석과 벤치마크 비교](#성능-분석과-벤치마크-비교)\n6. [실제 구현 사례와 코드 예제](#실제-구현-사례와-코드-예제)\n7. [마이그레이션 전략과 최적화 권장사항](#마이그레이션-전략과-최적화-권장사항)\n\nNext.js 15(2024년 10월 21일 안정 버전 릴리스)와 React 19(2024년 12월 5일 정식 출시)는 웹 개발의 패러다임을 바꾸는 중요한 릴리스입니다. 이 두 기술은 MDX 처리와 React Server Components(RSC)에서 혁신적인 발전을 이루었으며, 특히 정적 빌드 환경에서도 서버 컴포넌트의 이점을 제공하는 독특한 아키텍처를 구현했습니다.\n\n## MDX 빌드 파이프라인과 컴파일러 아키텍처\n\n### 세 가지 컴파일러 접근 방식\n\nNext.js 15는 MDX 처리를 위해 세 가지 컴파일러 옵션을 제공하며, 각각 다른 성능 특성과 플러그인 호환성을 가집니다.\n\n**JavaScript 컴파일러**는 `@mdx-js/mdx`를 사용하는 기본 옵션으로, 완전한 플러그인 생태계를 지원합니다. 모든 remark와 rehype 플러그인과 호환되며 최대 호환성을 제공합니다.\n\n**Rust 컴파일러**는 `mdxjs-rs`를 사용하는 실험적 옵션으로, **2-3배 빠른 성능**을 제공하지만 JavaScript 기반 플러그인을 사용할 수 없다는 제약이 있습니다.\n\n**Hybrid 접근법**은 Next.js 15.1부터 도입된 새로운 방식으로, Turbopack과 플러그인 지원을 모두 제공합니다:\n\n```javascript\n// 지능형 로더 선택 로직\nif (mdxRs && !turbopack) {\n  loader = './mdx-rs-loader.js' // Rust 컴파일러\n} else if (!mdxRs && turbopack) {\n  loader = './mdx-js-loader.js' // Turbopack용 JS 컴파일러\n} else {\n  loader = '@mdx-js/loader' // 표준 JS 컴파일러\n}\n```\n\n### MDX 6단계 변환 과정의 상세 분석\n\nMDX 소스코드는 다음과 같은 정교한 변환 과정을 거칩니다:\n\n```\nMDX → micromark → mdast → remark → hast → rehype → esast → JavaScript\n```\n\n**1단계: Micromark → MDAST**\n- 원시 MDX(JSX/ESM이 포함된 마크다운)를 `micromark/micromark`과 `micromark-extension-mdxjs`로 파싱\n- Acorn 파서가 임베디드 JavaScript를 분석하여 MDX 특화 노드 포함한 초기 AST 생성\n\n**2단계: MDAST → Remark 처리**\n- Remark 플러그인들이 MDAST를 변환\n- `remark-gfm`, `remark-frontmatter` 같은 플러그인이 마크다운 레벨 요소 처리\n\n**3단계: MDAST → HAST**\n- `mdast-util-to-hast`를 통해 HAST(HTML Abstract Syntax Tree)로 변환\n- 마크다운 시맨틱이 HTML 시맨틱으로 변환되면서 컴포넌트 경계와 JSX 요소 보존\n\n**4단계: HAST → Rehype 처리**\n- Rehype 플러그인들이 HTML 레벨 요소 변환\n- `rehype-highlight`, `rehype-katex` 같은 플러그인이 작동\n- 신택스 하이라이팅, 헤딩 링크, 접근성 개선 처리\n\n**5단계: HAST → ESAST**\n- `rehype-recma`를 통해 ESAST(JavaScript AST, ESTree 호환)로 변환\n- JSX를 React 함수 호출로 컴파일\n\n**6단계: ESAST → JavaScript**\n- `astring` 생성기가 최종 실행 가능한 JavaScript 코드 생성\n\n### Turbopack 통합과 성능 혁신\n\nTurbopack은 MDX 파일 처리에서 획기적인 성능 향상을 보여줍니다:\n\n**공식 성능 벤치마크 결과:**\n- **76.7% 빠른** 로컬 서버 시작\n- **96.3% 빠른** Fast Refresh 코드 업데이트  \n- **45.8% 빠른** 초기 라우트 컴파일\n- **Webpack 대비 700배 빠른** 업데이트 속도\n- **5,000개 모듈 기준**: Vite with SWC 16.6초 → Turbopack 4초\n\n**Turbopack의 핵심 성능 특징:**\n- **증분 계산(Incremental Computation)**: 함수 레벨까지 결과 캐싱\n- **지연 번들링(Lazy Bundling)**: 요청된 자산만 번들링\n- **통합 그래프(Unified Graph)**: 클라이언트와 서버 환경을 위한 단일 그래프\n- **Rust 기반**: SWC를 활용한 빠른 트랜스파일링\n\nNext.js 15.2에서는 개발 메모리 사용량이 **최대 30% 감소**했고, 프로덕션 빌드에서 **100% 통합 테스트 호환성**(8,298개 테스트 통과)을 보이며 rollout 이후 **12억 개 이상의 요청을 처리**했습니다.\n\n## React Server Components와 정적 빌드의 혁신적 메커니즘\n\n### RSC 페이로드 생성과 Flight 프로토콜\n\nReact Server Components는 \"Flight\" 프로토콜이라는 고유한 직렬화 형식을 사용합니다. **빌드 시점에서 Server Components가 실행**되어 RSC 페이로드가 생성되며, 이는 JSON을 넘어서는 기능을 제공합니다.\n\nRSC 페이로드에는 다음이 포함됩니다:\n- **컴팩트한 바이너리 표현**: Flight 프로토콜로 직렬화된 컴포넌트 트리\n- **Client Component 참조**: JavaScript 청크에 대한 포인터\n- **직렬화된 props와 데이터**: 서버에서 클라이언트로 전달되는 데이터\n- **렌더링된 Server Component 출력**\n- **Client Components가 렌더링될 위치의 플레이스홀더**\n\n### `?_rsc=` 파라미터의 실체와 문제점\n\n`?_rsc=` 파라미터는 클라이언트 측 네비게이션의 핵심 메커니즘이지만, 프로덕션 환경에서 심각한 문제가 발견되었습니다:\n\n**기본 동작 원리:**\n- **RSC 페이로드 전달 트리거**: Next.js Link 컴포넌트가 라우트 간 이동 시 전체 HTML 대신 RSC 페이로드 요청\n- **캐시 무효화 메커니즘**: 해시 값이 정적 사이트 재빌드 시 캐시된 RSC 페이로드 무효화하여 최신 콘텐츠 보장\n- **라우터 상태 표현**: 해시 값이 현재 라우터 상태 트리를 나타내어 효율적인 부분 업데이트 가능\n\n**프로덕션 환경의 치명적 문제점:**\n- **캐시 단편화**: 동일한 콘텐츠에 대해 다른 `_rsc` 해시 값 생성\n- **CDN 캐싱 실패**: CDN이 이러한 요청을 효과적으로 캐싱할 수 없어 트래픽이 원본 서버로 강제 전달\n- **서버리스 함수 트리거**: Vercel에서 각 `_rsc` 요청이 캐싱된 콘텐츠 대신 서버리스 함수를 트리거\n- **고부하 환경 문제**: `10만 개 이상의 제품 카탈로그를 관리하는 고부하 프로젝트에서 Next.js가 무용지물` (근거 없음)이 되는 상황 발생\n\n### 정적 호스팅에서 서버처럼 동작하는 아키텍처\n\n`output: 'export'` 설정 시 Next.js는 정적 HTML 파일과 함께 RSC 페이로드 파일을 생성합니다:\n\n**빌드 프로세스:**\n1. `next build`가 HTML 파일과 `.txt` 형식의 RSC 페이로드 파일 생성\n2. RSC 페이로드가 정적 파일로 사전 생성되어 GitHub Pages나 CDN 같은 정적 호스트에서 제공\n\n**런타임 동작 플로우:**\n1. **초기 로드**: 사용자가 HTML과 JavaScript 번들을 받음\n2. **자동 프리페칭**: Link 컴포넌트가 뷰포트 진입 시 RSC 페이로드 프리페치  \n3. **소프트 네비게이션**: 클릭 시 캐시된 RSC 페이로드로 DOM 업데이트\n4. **즉각적인 전환**: 전체 리로드 없이 SPA 같은 사용자 경험 제공\n\n이러한 아키텍처는 **서버 인프라 없이도** 서버 렌더링의 이점(데이터 접근, 보안, SEO)과 클라이언트 네비게이션의 부드러움을 동시에 제공합니다.\n\n## Next.js 15의 혁신적 기능들\n\n### Partial Prerendering (PPR) - 게임 체인저\n\nPPR은 MDX 콘텐츠 처리에 혁명적인 변화를 가져왔습니다. **정적 셸을 빌드 시점에 사전 렌더링**하고 동적 콘텐츠를 요청 시점에 스트리밍하여, 단일 HTTP 요청으로 전체 응답을 전달합니다:\n\n```javascript\nexport const experimental_ppr = true\n\nexport default function BlogPost() {\n  return (\n    <>\n      <StaticMDXContent /> {/* 빌드 시점에 렌더링 */}\n      <Suspense fallback={<CommentsSkeleton />}>\n        <DynamicComments /> {/* 요청 시점에 스트리밍 */}\n      </Suspense>\n    </>\n  )\n}\n```\n\n**PPR의 핵심 이점:**\n- **정적 쉘 즉시 제공**: 워터폴 로딩 패턴 제거\n- **병렬 스트리밍**: 동적 컴포넌트들이 병렬로 스트리밍 시작\n- **SEO 최적화**: 정적 콘텐츠가 즉시 크롤러에게 제공\n- **사용자 경험 향상**: 폴백 UI와 함께 점진적 로딩\n\n### 캐싱 패러다임의 근본적 전환\n\nNext.js 15의 가장 큰 변화는 **\"기본 캐싱\"에서 \"명시적 캐싱\"으로의 전환**입니다:\n\n**주요 변경사항:**\n- fetch 요청의 기본값: `force-cache` → `no-store`\n- GET Route Handlers: 더 이상 기본적으로 캐싱되지 않음\n- Client Router Cache: 페이지 세그먼트 `staleTime` 기본값 0\n\n**새로운 캐싱 기능:**\n- 실험적인 `use cache` 지시문\n- `cacheTag`와 `cacheLife`를 통한 세밀한 캐시 제어\n- 통합 캐싱 모델인 `dynamicIO`\n\n## React 19의 혁신적 기능들\n\n### React Compiler (Forget)의 자동 최적화\n\nReact Compiler는 자동 최적화를 처리하는 빌드 타임 도구로, MDX 컴포넌트 트리를 자동으로 최적화합니다:\n\n**핵심 기능:**\n- **수동 메모이제이션 제거**: `useMemo`, `useCallback`, `React.memo` 불필요\n- **컴포넌트 레벨 최적화**: JavaScript 의미론과 React 규칙을 이해해 자동 최적화\n- **빌드 성능**: **Babel보다 17배 빠른 컴파일**\n- **Next.js 통합**: `experimental: { reactCompiler: true }` 설정으로 내장 지원\n\n### 새로운 Hook들과 MDX 통합\n\nReact 19는 여러 혁신적인 Hook을 도입했습니다:\n\n**useActionState**: 폼 액션과 비동기 작업을 내장 상태 관리와 함께 처리\n```javascript\nfunction MDXContactForm() {\n  const [error, submitAction, isPending] = useActionState(\n    async (prevState, formData) => {\n      return await submitContact(formData)\n    },\n    null\n  )\n\n  return (\n    <form action={submitAction}>\n      <input name=\"email\" type=\"email\" />\n      <button disabled={isPending}>Submit</button>\n      {error && <p>{error}</p>}\n    </form>\n  )\n}\n```\n\n**useOptimistic**: 낙관적 UI 업데이트 구현\n- 비동기 작업이 대기 중일 때 즉각적인 UI 업데이트 제공\n- 오류 시 자동 롤백, 지연 시간 감소 체감\n\n**useFormStatus**: prop drilling 없이 폼 제출 상태 제공\n- 자식 컴포넌트에서 폼 상태에 접근\n- 실시간 폼 상태 업데이트\n\n**use()**: Promise와 Context를 렌더링에서 직접 읽기\n- 다른 Hook과 달리 조건부로 호출 가능\n- Suspense 경계와 함께 작동\n\n### React 19 주요 개선사항\n\n- **Server Components 안정화**: Server Actions의 \"use server\" 지시문\n- **향상된 스트리밍**: Suspense 지원 개선\n- **문서 메타데이터 네이티브 지원**: `<title>`, `<link>`, `<meta>` 태그 자동 호이스팅\n- **향상된 오류 처리**: 단일 오류와 diff 표시, 더 나은 hydration 오류 보고\n- **ref prop 지원**: forwardRef 불필요\n- **Context provider 간소화**: Context를 provider로 직접 사용 가능\n\n## 성능 분석과 벤치마크 비교\n\n### SSR vs SSG vs ISR 성능 비교\n\n서버사이드 렌더링은 각 요청마다 MDX를 실시간으로 처리하여 복잡한 MDX 콘텐츠의 경우 요청당 **40-100ms의 처리 시간**이 소요되며, 평균적으로 **70ms 동안 Node.js 이벤트 루프를 블로킹**합니다.\n\n정적 생성은 빌드 시점에 MDX를 컴파일하여 다음과 같은 이점을 제공합니다:\n\n| 메트릭 | SSR | SSG | ISR |\n|--------|-----|-----|-----|\n| **TTFB** | 200-500ms | 100-200ms | 100-200ms* |\n| **FCP** | 800-1200ms | 300-600ms | 300-600ms* |\n| **LCP** | 1200-2000ms | 600-1200ms | 600-1200ms* |\n| **서버 부하** | 높음 | 최소 | 낮음-중간 |\n| **CDN 캐시 적중률** | 낮음 | 99%+ | 높음 |\n| **메모리 효율성** | 낮음 | 최적 | 중간 |\n\n**정적 빌드의 핵심 이점:**\n- **CDN 엣지 캐싱**: 100-200ms의 TTFB로 즉각적인 콘텐츠 전달\n- **번들 최적화**: 트리 쉐이킹과 코드 스플리팅으로 30-60% 번들 크기 감소\n- **메모리 효율성**: 런타임 메모리 사용량 최소화\n\n## 실제 구현 사례와 코드 예제\n\n### 파일 기반 라우팅과 RSC 아키텍처\n\n실제 URL `https://example.com/posts/react/2025-08-19-html2canvas_cors_guide.txt?_rsc=1ld0r` 같은 구조 분석:\n\n```javascript\n// app/posts/[category]/[slug]/page.tsx\nexport default async function PostPage({ params }) {\n  const post = await getPostBySlug(params.slug)\n  const { Content } = await import(`@/content/${params.slug}.mdx`)\n  \n  return (\n    <>\n      <title>{post.title}</title>\n      <PostHeader post={post} />\n      \n      <Suspense fallback={<ContentSkeleton />}>\n        <Content \n          components={{\n            ...mdxComponents,\n            CodeBlock: lazy(() => import('@/components/CodeBlock'))\n          }} \n        />\n      </Suspense>\n      \n      <Suspense fallback={<CommentsSkeleton />}>\n        <Comments postId={post.id} />\n      </Suspense>\n    </>\n  )\n}\n```\n\n### 클라이언트 사이드 네비게이션과 프리페칭 전략\n\nNext.js 15는 정교한 프리페칭 전략을 구현합니다:\n\n- **자동 프리페칭**: Link 컴포넌트가 뷰포트 진입 시 RSC 페이로드 프리페치\n- **우선순위 스케줄링**: 가능성 높은 네비게이션 우선 프리페치\n- **Router Cache**: 방문한 경로의 RSC 페이로드를 메모리에 캐싱\n- **정적 최적화**: 정적 페이지는 5분 캐시, 동적 콘텐츠는 즉시 무효화\n\n## 마이그레이션 전략과 최적화 권장사항\n\n### 점진적 도입 로드맵\n\n**Phase 1 - Next.js 15 기반 구축**\n- Next.js 15 업그레이드 (React 18 유지 가능)\n- Turbopack 채택: 개발 환경부터 시작 (`--turbo`)\n\n**Phase 2 - 실험적 기능 도입**\n- PPR 구현: 비핵심 페이지부터 적용\n- 새로운 캐싱 전략 테스트\n\n**Phase 3 - React 19 마이그레이션**\n- 서드파티 라이브러리 호환성 확인\n- React 19 단계별 도입\n\n**Phase 4 - 최적화 및 안정화**\n- React Compiler 활성화\n- 성능 모니터링 및 최적화\n\n### 성능 최적화 전략\n\nMDX 기반 애플리케이션의 최적화를 위한 권장 전략:\n\n**하이브리드 렌더링 전략:**\n- 레이아웃과 정적 콘텐츠: SSG\n- 반동적 콘텐츠: ISR\n- 개인화된 콘텐츠: SSR\n\n**번들 최적화:**\n- MDX 컴포넌트의 동적 임포트\n- 불필요한 의존성 트리 쉐이킹\n- 코드 스플리팅 활용\n\n**캐싱 전략:**\n- 새로운 언캐시 기본 동작을 활용한 선택적 캐싱\n- `cacheTag`와 `cacheLife` 세밀한 제어\n\n**모니터링:**\n- Core Web Vitals 추적\n- 번들 크기 지속 모니터링\n- 성능 예산 설정\n\n## 결론\n\nNext.js 15와 React 19는 MDX 처리와 정적 사이트 생성에서 패러다임의 전환을 이루었습니다. **정적 빌드에서도 서버처럼 동작하는 RSC 메커니즘**은 서버 인프라 없이도 서버 렌더링의 이점을 제공하며, Partial Prerendering은 정적 성능과 동적 기능을 단일 요청으로 통합합니다.\n\nTurbopack의 안정화로 개발 환경에서 **96.3% 빠른 코드 업데이트**와 **76.7% 빠른 서버 시작**을 달성했고, React Compiler의 자동 최적화는 개발 경험과 런타임 성능을 동시에 향상시킵니다.\n\n그러나 프로덕션 환경에서는 신중한 접근이 필요합니다. 특히 고부하 애플리케이션에서 `?_rsc=` 파라미터로 인한 CDN 캐싱 문제는 심각한 성능 저하를 일으킬 수 있어, 대규모 프로젝트에서는 광범위한 테스트가 필요합니다.\n\n이러한 기술적 도전에도 불구하고, Next.js 15와 React 19가 제공하는 혁신은 콘텐츠 중심 애플리케이션이 **탁월한 성능**과 **풍부한 인터랙티비티**를 동시에 달성할 수 있게 하며, 웹 애플리케이션 개발의 미래를 재정의하고 있습니다.",
      "content_text": "Next.js 15와 React 19의 혁신적인 MDX 처리와 RSC 메커니즘을 심층 분석하고, 6단계 변환 과정과 정적 빌드에서의 서버 컴포넌트 동작 원리를 완벽 해부합니다.",
      "url": "https://leeduhan.github.io/posts/technology/2025-08-21-nextjs-15-react-19-mdx-rsc-architecture-deep-dive/",
      "date_published": "2025-08-21T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Next.js",
        "React",
        "MDX",
        "RSC",
        "Turbopack",
        "성능 최적화",
        "웹 개발"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/technology/2025-08-21-mobile-frontend-technology-guide/",
      "title": "2025년 모바일 프론트엔드 기술 종합 가이드",
      "content_html": "\n# 2025년 모바일 프론트엔드 기술 종합 가이드\n\n## 목차\n\n1. [주요 모바일 프론트엔드 기술 상세 분석](#1-주요-모바일-프론트엔드-기술-상세-분석)\n2. [각 기술의 장점과 모바일 최적화 특징](#2-각-기술의-장점과-모바일-최적화-특징)\n3. [실제 상용 서비스에서의 채택률과 사용 사례](#3-실제-상용-서비스에서의-채택률과-사용-사례)\n4. [성능, 개발 생산성, 유지보수성 비교](#4-성능-개발-생산성-유지보수성-비교)\n5. [2024-2025년 트렌드와 시장 점유율](#5-2024-2025년-트렌드와-시장-점유율)\n6. [각 기술 선택 이유와 적합한 상황](#6-각-기술-선택-이유와-적합한-상황)\n7. [대기업과 스타트업의 실제 사용 현황](#7-대기업과-스타트업의-실제-사용-현황)\n8. [개발자 생태계와 커뮤니티 규모](#8-개발자-생태계와-커뮤니티-규모)\n9. [학습 곡선과 인력 수급 상황](#9-학습-곡선과-인력-수급-상황)\n10. [미래 전망과 지속가능성](#10-미래-전망과-지속가능성)\n11. [마무리: 2025년 모바일 프론트엔드 기술 선택 가이드](#마무리-2025년-모바일-프론트엔드-기술-선택-가이드)\n12. [참고 자료](#참고-자료)\n\n## 모바일 앱 개발의 새로운 패러다임\n\n2025년 현재 모바일 프론트엔드 개발 환경은 크로스 플랫폼 프레임워크의 급속한 성장과 네이티브 개발의 지속적인 진화로 특징지어집니다. [2023년 개발자 조사에 따르면 **소프트웨어 개발자의 46%가 Flutter를 사용**하며 가장 인기 있는 크로스 플랫폼 프레임워크로 자리잡고 있고](https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/), React Native가 그 뒤를 따르고 있으며, 네이티브 개발은 여전히 전체 시장의 약 80%를 유지하고 있지만 점진적으로 감소하는 추세입니다. 특히 주목할 점은 Progressive Web Apps(PWA)가 [2033년까지 214억 달러 규모로 성장](https://straitsresearch.com/report/progressive-web-apps-market)할 것으로 예상되며, AI 통합이 모든 플랫폼에서 핵심 차별화 요소로 부상하고 있다는 것입니다.\n\n기업들은 개발 비용 절감과 시장 출시 속도를 위해 크로스 플랫폼 솔루션을 적극 채택하고 있으며, 특히 [Google Pay는 150명의 엔지니어가 Flutter로 300개 이상의 기능을 재작성](https://www.nomtek.com/blog/flutter-app-examples)하여 개발 리소스를 통합했고, Discord는 [React Native를 통해 iOS와 Android 간 **98%의 코드 공유율**을 달성](https://www.trio.dev/react-native/resources/companies-use-react-native)하며 99.9%의 크래시 프리 비율을 유지하고 있습니다.\n\n---\n\n## 1. 주요 모바일 프론트엔드 기술 상세 분석\n\n### React Native: 검증된 크로스 플랫폼 리더\n\nReact Native는 2025년 현재 버전 0.81.0으로 진화했으며, [**New Architecture가 기본으로 활성화**](https://reactnative.dev/architecture/landing-page)되어 있습니다. 이는 Fabric 렌더링 시스템, TurboModules, JSI(JavaScript Interface)를 포함하여 레거시 브리지 아키텍처를 완전히 대체했습니다. \n\n주요 기술적 특징으로는 Hermes 엔진을 통한 최적화된 JavaScript 실행, React 18의 동시성 기능 지원, 그리고 직접적인 JavaScript-C++ 통신을 통한 실시간 데이터 처리가 가능합니다. [**앱 시작 시간이 최대 70% 단축**](https://globaldev.tech/blog/react-native-architecture)되었으며, Discord와 같은 대규모 애플리케이션에서 실제로 검증된 안정성을 보여주고 있습니다.\n\n### Flutter: Google의 야심찬 크로스 플랫폼 전략\n\nFlutter 3.35 버전과 Dart 3.9을 기반으로 하는 Flutter는 [**월간 활성 개발자 100만 명**을 돌파](https://developers.googleblog.com/en/celebrating-flutters-production-era/)했으며, [Apptopia에 따르면 새로운 iOS 앱의 거의 30%가 Flutter를 사용](https://scalevista.com/blog/flutter-apps-examples/)하고 있습니다. \n\n[Impeller 렌더링 엔진이 iOS와 Android API 29+ 에서 기본값](https://metadesignsolutions.com/impeller-vs-skia-fix-rendering-glitches-boost-ui-performance/)이 되면서 **첫 프레임 지연이 90%까지 감소**했으며, AOT 셰이더 컴파일을 통해 예측 가능한 60fps/120fps 성능을 제공합니다. [Alibaba의 Xianyu 앱은 5천만 명 이상의 활성 사용자를 처리](https://flutter.dev/showcase)하며 기능 개발 시간을 50% 단축했고, BMW는 MyBMW 앱을 통해 iOS와 Android 플랫폼 간 통합된 경험을 제공하고 있습니다.\n\n### Swift/SwiftUI: iOS 네이티브의 진화\n\n[**Swift 6**는 컴파일 타임 데이터 레이스 안전성, 128비트 정수 지원, 향상된 C++ 상호 운용성](https://dtundwal.medium.com/whats-new-in-swift-swiftui-and-xcode-wwdc-2024-highlights-c7dc8bd48dbf)을 제공합니다. [iOS 18 기준으로 Apple의 592개 바이너리가 SwiftUI를 사용](https://blog.timac.org/2024/1208-state-of-swift-and-swiftui-ios18/)하고 있으며, 이는 iOS 17 대비 50% 증가한 수치입니다.\n\n[SwiftUI는 향상된 렌더링 엔진, 새로운 Tab View, Mesh Gradients, 그리고 개선된 스크롤링 API](https://developer.apple.com/videos/play/wwdc2024/10144/)를 통해 더욱 강력해졌습니다. Calculator, Passwords, Journal과 같은 새로운 Apple 앱들이 SwiftUI 기반으로 개발되었으며, **네이티브 성능과 최신 iOS API에 대한 즉각적인 접근**이 가능합니다.\n\n### Kotlin/Jetpack Compose: Android 네이티브의 현대화\n\n[Kotlin 2.0.21과 Jetpack Compose 1.7.0](https://android-developers.googleblog.com/2024/05/whats-new-in-jetpack-compose-at-io-24.html)은 Android 개발의 새로운 표준이 되었습니다. [**Google Play 스토어 상위 1000개 앱의 40%**가 Jetpack Compose를 사용](https://en.wikipedia.org/wiki/Jetpack_Compose)하고 있으며, 이는 2022년 16%에서 크게 증가한 수치입니다.\n\nStrong Skipping Mode가 프로덕션 준비 상태가 되면서 재구성 성능이 20% 향상되었고, Baseline Profiles를 통해 [**앱 시작 시간이 30% 단축**](https://android-developers.googleblog.com/2024/05/whats-new-in-jetpack-compose-at-io-24.html)되었습니다. Google Drive는 Compose를 통해 개발 시간을 거의 절반으로 줄였으며, Meta의 Threads는 단 5개월 만에 Jetpack Compose로 구축되었습니다.\n\n### Progressive Web Apps: 웹 기술의 모바일 진출\n\nPWA는 [2025년 52.3억 달러 시장 규모에서 2033년 214.4억 달러로 **연평균 18.98% 성장**](https://straitsresearch.com/report/progressive-web-apps-market)이 예상됩니다. [iOS 16.4+에서 푸시 알림 지원이 추가](https://brainhub.eu/library/pwa-on-ios)되었고, Web App Manifest v3와 Project Fugu API를 통해 네이티브와 유사한 기능을 제공합니다.\n\nAlibaba는 PWA 도입 후 전환율이 76% 증가했고, Starbucks는 iOS 앱보다 99.84% 작은 크기로 일일 웹 주문을 두 배로 늘렸습니다. MakeMyTrip은 **로드 시간 38% 단축, 사용자 세션 160% 증가, 전환율 3배 향상**을 달성했습니다.\n\n---\n\n## 2. 각 기술의 장점과 모바일 최적화 특징\n\n### 성능 최적화 비교\n\n[**Flutter**는 Skia 렌더링 엔진 대신 Impeller를 사용하여 **드롭 프레임을 12%에서 1.5%로 감소**](https://metadesignsolutions.com/impeller-vs-skia-fix-rendering-glitches-boost-ui-performance/)시켰고, 복잡한 애니메이션에서 우수한 성능을 보입니다. [React Native는 New Architecture를 통해 텍스트 렌더링 속도가 20% 향상](https://github.com/reactwg/react-native-new-architecture/discussions/123)되었고, TurboModules로 네이티브 모듈 호출 성능이 크게 개선되었습니다.\n\n네이티브 개발은 여전히 최고의 성능을 제공하며, [특히 그래픽 집약적 애플리케이션과 하드웨어 직접 접근이 필요한 경우 40% 더 나은 성능](https://lab651.com/the-advantages-of-native-ios-app-development/)을 보입니다. PWA는 가장 작은 초기 다운로드 크기와 점진적 로딩을 제공하지만, WebView 제한으로 인해 성능 집약적 작업에는 한계가 있습니다.\n\n### 개발 생산성 특징\n\nReact Native는 **최대 90%의 코드 재사용률**을 제공하며, Hot Reload와 Fast Refresh를 통해 실시간 개발이 가능합니다. Flutter는 stateful hot reload를 웹에서도 지원하며, 단일 코드베이스로 iOS, Android, 웹, 데스크톱을 모두 지원합니다.\n\n네이티브 개발은 Xcode 16의 AI 코드 제안과 Android Studio의 Gemini AI 통합을 통해 생산성이 향상되었으며, SwiftUI와 Jetpack Compose는 선언적 UI 패러다임으로 개발 속도를 높였습니다.\n\n---\n\n## 3. 실제 상용 서비스에서의 채택률과 사용 사례\n\n### 시장 점유율 현황\n\n[2024년 기준 미국 Play Store 상위 500개 앱 중 **React Native가 12.57%, Flutter가 5.24%**](https://flatirons.com/blog/popularity-of-flutter-vs-react-native-2024/)를 차지하고 있습니다. 크로스 플랫폼 프레임워크 전체 시장은 20%에 도달했으며, App Store 상위 애플리케이션의 74%가 하이브리드 애플리케이션입니다.\n\n### 대표적인 기업 사례\n\n**React Native 채택 기업**: Facebook/Meta 생태계 전체, Microsoft Office 제품군, Discord (9,900만 사용자), Walmart, Bloomberg, Tesla, Pinterest, Uber Eats, Shopify\n\n**Flutter 채택 기업**: Google Pay (1억+ 사용자), Alibaba Xianyu (5천만+ 사용자), BMW MyBMW, Amazon 쇼핑 앱, eBay Motors, Toyota, ByteDance 앱들, Nubank, LG Electronics (2025년 webOS TV 앱 계획)\n\n**네이티브 개발 유지 기업**: 모든 Apple 시스템 앱, Snapchat (AR 필터), TikTok (복잡한 비디오 편집), 성능 중심 게임 앱들\n\n---\n\n## 4. 성능, 개발 생산성, 유지보수성 비교\n\n### 성능 메트릭\n\n[Flutter는 Gauss-Legendre 알고리즘 테스트에서 **Swift보다 15% 빠른 성능**](https://www.bacancytechnology.com/blog/flutter-vs-react-native)을 보였으며, [React Native는 네이티브 성능의 80-90%를 달성](https://reactnative.dev/docs/performance)합니다. 앱 크기 면에서 Flutter는 위젯 라이브러리로 인해 더 큰 용량을 차지하지만, Dart 3.0 최적화로 25% 크기 감소를 달성했습니다.\n\n### 개발 생산성\n\n크로스 플랫폼 개발은 **네이티브 대비 40-50% 짧은 초기 개발 주기**를 제공합니다. React Native는 JavaScript 개발자 풀이 Dart 개발자보다 20:1 비율로 많아 채용이 용이하며, Flutter는 Hot Reload를 통해 개발 시간을 20-30% 절약합니다.\n\n### 유지보수성\n\nFlutter는 **코드 라인 수를 45% 감소**시켜 유지보수를 용이하게 하며, React Native는 성숙한 생태계와 광범위한 NPM 패키지 지원으로 장기적 유지보수에 유리합니다. 네이티브 개발은 플랫폼별 최적화가 가능하지만 두 플랫폼을 위한 별도 팀이 필요합니다.\n\n---\n\n## 5. 2024-2025년 트렌드와 시장 점유율\n\n### 주요 트렌드\n\n[**AI 통합 가속화**: 모든 프레임워크가 AI 기반 개발 도구를 통합하고 있으며, 76%의 개발자가 AI 도구를 사용하거나 계획 중](https://survey.stackoverflow.co/2025/ai/)입니다. [**로우코드 플랫폼 성장**: 2026년까지 애플리케이션의 75%가 로우코드로 구축될 것으로 예상](https://kissflow.com/low-code/gartner-forecasts-on-low-code-development-market/)됩니다.\n\n[**Xamarin 종료 영향**: 2024년 5월 1일 Xamarin 지원이 종료](https://dotnet.microsoft.com/en-us/platform/support/policy/xamarin)되어 많은 기업이 .NET MAUI나 다른 프레임워크로 마이그레이션 중입니다. **PWA 급성장**: 특히 iOS 지원 개선으로 채택이 가속화되고 있습니다.\n\n### 지역별 채택 패턴\n\n북미는 React Native가 12.57%로 우세하며, iOS 선호도가 55%에 달합니다. 유럽은 2030년까지 1,243억 유로 시장 규모가 예상되며 GDPR 준수가 프레임워크 선택에 영향을 미칩니다. 아시아-태평양 지역은 2030년까지 2,040억 달러로 가장 빠르게 성장하며, Flutter 채택이 더 강합니다.\n\n---\n\n## 6. 각 기술 선택 이유와 적합한 상황\n\n### React Native를 선택해야 하는 경우\n\n**JavaScript 전문성이 있는 팀**이 빠른 개발과 반복이 필요할 때, 대규모 커뮤니티 지원이 중요할 때, 성능과 개발 속도 간 균형이 필요한 프로젝트에 적합합니다. 특히 기존 React 웹 개발팀이 모바일로 확장할 때 최적의 선택입니다.\n\n### Flutter를 선택해야 하는 경우\n\n**단일 코드베이스로 네이티브급 성능**이 필요하거나, 커스텀 UI와 애니메이션이 중요한 프로젝트, Google 생태계 통합이 유리한 경우에 적합합니다. Dart 언어 학습에 대한 팀의 의지가 있고 장기적 유지보수 비용 최적화가 목표일 때 추천됩니다.\n\n### 네이티브 개발을 선택해야 하는 경우\n\n**최고 성능이 필수적**이거나 플랫폼별 최신 기능에 즉각 접근이 필요한 경우, 보안이 중요한 금융/헬스케어 앱, AR/VR 등 하드웨어 집약적 기능이 핵심인 프로젝트에 필수적입니다.\n\n### PWA를 선택해야 하는 경우\n\n**웹 프레젠스가 주요 목표**이고 모바일 앱이 보조적일 때, 예산 제약으로 단일 코드베이스가 필요할 때, 빈번한 업데이트와 즉각적인 배포가 중요한 경우에 적합합니다. 앱 스토어 승인/배포가 중요하지 않은 프로젝트에 이상적입니다.\n\n---\n\n## 7. 대기업과 스타트업의 실제 사용 현황\n\n### 대기업 트렌드\n\n대기업의 75%가 2024년까지 최소 4개의 로우코드 도구를 사용하고 있으며, 보안과 컴플라이언스 요구사항이 네이티브 선택을 주도합니다. **크로스 플랫폼은 30-50%의 개발 비용을 절감**시키지만, 보안에 민감한 앱(뱅킹, 헬스케어)은 여전히 네이티브를 선호합니다.\n\nGoogle Pay는 150명의 엔지니어가 Flutter로 전환하여 엔지니어링 리소스를 통합했고, Microsoft는 Office 제품군에 React Native를 확대 적용하고 있습니다. BMW와 Toyota 같은 자동차 제조사들은 Flutter를 통해 커넥티드 차량 애플리케이션을 개발하고 있습니다.\n\n### 스타트업 현황\n\n스타트업은 **시장 출시 속도를 위해 크로스 플랫폼을 선호**하며, MVP 개발 후 시장 검증 후 네이티브로 마이그레이션하는 패턴이 일반적입니다. React Native는 JavaScript 인재 풀이 커서 채용이 쉽고, Flutter는 성능이 중요한 애플리케이션에서 선택됩니다.\n\nDiscord와 같은 성공 사례는 React Native로 시작하여 대규모로 확장 가능함을 보여주며, Threads는 Flutter로 5개월 만에 출시되어 빠른 개발 속도를 입증했습니다.\n\n---\n\n## 8. 개발자 생태계와 커뮤니티 규모\n\n### 커뮤니티 규모 비교\n\n**Flutter**: pub.dev에 55,000개 이상의 패키지, GitHub 152,000+ 스타, 60개국 이상에서 90,000명 이상의 개발자가 Flutter Meetup 참여\n\n**React Native**: NPM 생태계 180만개 이상 패키지 접근, GitHub 121,000+ 스타, Stack Overflow 130,000개 이상의 질문\n\n**네이티브 iOS**: Swift가 GitHub에서 10만개 이상의 저장소, WWDC 콘텐츠에 수백만 명 참여\n\n**네이티브 Android**: JetBrains 설문조사에 23,262명 개발자 참여, 미국에서만 237,147개의 활성 구인\n\n### 생태계 성숙도\n\nReact Native는 가장 성숙한 서드파티 지원과 NPM 생태계를 보유하고 있으며, Flutter는 Google의 강력한 지원으로 빠르게 성장하는 패키지 생태계를 구축했습니다. 네이티브 개발은 각 플랫폼 벤더의 직접 지원과 최적화된 도구를 제공받습니다.\n\n---\n\n## 9. 학습 곡선과 인력 수급 상황\n\n### 학습 난이도\n\n**React Native**: JavaScript 개발자의 67%가 이미 필요한 기본 지식을 보유하고 있어 **가장 낮은 학습 곡선**을 제공합니다. React 지식이 직접 적용 가능하며, 웹 개발자에게 네이티브 개발보다 쉬운 진입점을 제공합니다.\n\n**Flutter**: Java/C#/Swift 개발자는 몇 주 내에 적응 가능하지만, JavaScript/React 개발자는 Dart와 상태 관리 패러다임 차이로 중간 정도의 학습 곡선을 경험합니다.\n\n**네이티브**: 각 플랫폼별 언어와 도구 체인 학습이 필요하며, 두 플랫폼 모두 마스터하려면 상당한 시간 투자가 필요합니다.\n\n### 급여 수준 (미국 기준)\n\n**iOS 개발자**: $113,000-180,000 (평균)\n**Android 개발자**: $120,000-159,000 (평균)\n[**React Native**: $105,000-125,000 (평균), 시니어 레벨 $150,000+](https://www.glassdoor.com/Salaries/react-native-developer-salary-SRCH_KO0,22.htm)\n[**Flutter**: $105,000 (평균), 수요 증가로 급여 상승 중](https://medium.com/flutter-jobs/mobile-developer-gold-rush-unveiling-the-hottest-tech-stacks-salaries-of-the-past-5-years-c5c9f61eee8c)\n\n한국 시장에서도 유사한 패턴을 보이며, 네이티브 개발자가 크로스 플랫폼 개발자보다 10-20% 높은 급여를 받는 경향이 있습니다.\n\n### 인력 수급 현황\n\n**JavaScript 개발자가 Dart 개발자보다 20:1 비율**로 많아 React Native 채용이 용이합니다. Flutter는 전문 교육이 필요하지만 성장 잠재력이 높습니다. 네이티브 개발자는 특화된 기술로 인해 더 높은 급여를 받지만 인재 풀이 작습니다.\n\n미국에서 React Native는 70,000개 이상의 구인이 있으며, 모바일 개발자 전체적으로 21-22%의 성장이 예상됩니다.\n\n---\n\n## 10. 미래 전망과 지속가능성\n\n### 단기 전망 (2025-2026)\n\n[**AI 통합이 모든 플랫폼의 핵심**이 될 것이며, Gartner는 2027년까지 AI 어시스턴트로 인해 모바일 앱 사용이 25% 감소할 것으로 예측](https://www.gartner.com/en/newsroom/press-releases/2025-01-15-gartner-predicts-mobile-app-usage-will-decrease-25-percent-due-to-ai-assistants-by-2027)합니다. 로우코드 플랫폼이 2026년까지 애플리케이션의 75%를 차지하며, Xamarin에서 다른 플랫폼으로의 마이그레이션이 정점에 달할 것입니다.\n\n### 중기 전망 (2026-2028)\n\n5G 최적화가 모든 프레임워크의 표준이 되고, **엣지 컴퓨팅과 로컬 처리 능력이 통합**됩니다. AR/VR 지원이 표준 기능이 되며, WebAssembly가 웹 기반 모바일 앱의 게임 체인저가 될 가능성이 있습니다.\n\n### 기술별 지속가능성\n\n**React Native**: JavaScript 생태계의 지속적 성장과 Meta의 투자로 안정적인 미래가 보장됩니다. New Architecture가 표준이 되면서 성능 격차가 줄어들 것입니다.\n\n**Flutter**: Google의 전략적 약속이 확인되었으며, 멀티플랫폼 확장(데스크톱, 웹, 임베디드)으로 성장 가속화가 예상됩니다. Impeller 렌더링을 통한 성능 개선이 계속될 것입니다.\n\n**네이티브**: AI 강화 개발 도구와 플랫폼별 AI 기능 통합으로 진화하며, 보안과 프라이버시 중심 앱에서 계속 선호될 것입니다.\n\n**PWA**: iOS 지원 개선과 함께 급속한 성장이 예상되며, 2033년까지 214억 달러 시장으로 성장할 것으로 전망됩니다.\n\n### 전략적 권고사항\n\n**기업**: 새 프로젝트는 장기 유지보수를 고려하여 Flutter를, 기존 JavaScript 인프라가 있다면 React Native를 선택하세요. 보안이 중요한 애플리케이션은 네이티브 개발을 유지하되, AI 도구 통합에 투자하세요.\n\n**스타트업**: React Native는 빠른 채용과 광범위한 커뮤니티 지원을 제공하며, Flutter는 복잡한 애플리케이션에서 더 나은 성능을 제공합니다. PWA는 가장 빠른 시장 출시와 최소 비용을 원할 때 고려하세요.\n\n**개발자**: JavaScript 기술은 더 넓은 기회를 제공하지만, Dart 전문성은 더 높은 성장 잠재력을 가집니다. AI 도구 활용 능력과 로우코드 플랫폼 친숙도에 투자하세요.\n\n모바일 개발 시장은 크로스 플랫폼 솔루션이 기업 수준의 수용을 얻으면서 계속 성숙해지고 있으며, 네이티브 개발은 성능이 중요한 애플리케이션에서 여전히 우위를 유지하고 있습니다. 2025년 이후의 성공은 빠른 배포 능력과 장기적 확장성, 그리고 새로운 AI 통합 요구사항의 균형을 맞추는 데 달려 있을 것입니다.\n\n---\n\n## 마무리: 2025년 모바일 프론트엔드 기술 선택 가이드\n\n2025년 모바일 프론트엔드 개발 환경은 다양한 선택지와 함께 각 기술의 강점이 더욱 명확해진 시대입니다. 본 가이드에서 분석한 데이터와 사례들을 바탕으로 다음과 같은 핵심 인사이트를 도출할 수 있습니다:\n\n### 기술 선택 의사결정 트리\n\n**단일 플랫폼 우선인가요?**\n- iOS만: SwiftUI 선택\n- Android만: Jetpack Compose 선택\n\n**크로스 플랫폼이 필요한가요?**\n- JavaScript 팀 보유: React Native 우선 고려\n- 최고 성능 필요: Flutter 선택\n- 웹 우선, 모바일 보조: PWA 고려\n\n**핵심 요구사항은 무엇인가요?**\n- 최단 시간 출시: React Native 또는 PWA\n- 장기 유지보수 최적화: Flutter\n- 플랫폼 최신 기능 즉시 활용: 네이티브\n- 앱 스토어 독립성: PWA\n\n### 2025년 핵심 트렌드 요약\n\n1. **AI 통합의 표준화**: 모든 프레임워크가 AI 개발 도구와 런타임 기능을 통합\n2. **크로스 플랫폼의 성숙**: Flutter와 React Native가 네이티브 성능의 90% 이상 달성\n3. **PWA의 부상**: iOS 지원 개선으로 실용적 대안으로 자리잡음\n4. **개발자 경험 중심**: Hot Reload, AI 코드 어시스턴트 등 생산성 도구 강화\n\n### 최종 권고사항\n\n기술 선택은 프로젝트의 특성, 팀의 역량, 비즈니스 목표를 종합적으로 고려해야 합니다. 2025년 현재, 모든 주요 프레임워크가 프로덕션 레벨의 품질을 제공하므로, \"최고의 기술\"보다는 \"가장 적합한 기술\"을 선택하는 것이 중요합니다.\n\n크로스 플랫폼 개발의 미래는 밝으며, 특히 Flutter와 React Native는 계속해서 네이티브와의 격차를 줄여가고 있습니다. 동시에 네이티브 개발도 SwiftUI와 Jetpack Compose를 통해 현대화되고 있어, 개발자들에게는 그 어느 때보다 많은 우수한 선택지가 있는 시대입니다.\n\n---\n\n## 참고 자료\n\n### 주요 조사 및 보고서\n- [JetBrains Developer Ecosystem Survey 2024](https://www.jetbrains.com/lp/devecosystem-2024/)\n- [Stack Overflow Developer Survey 2024](https://survey.stackoverflow.co/2024/)\n- [State of React Native 2024](https://results.stateofreactnative.com/en-US/)\n- [PWA Market Research - Straits Research](https://straitsresearch.com/report/progressive-web-apps-market)\n\n### 기술 공식 문서\n- [React Native New Architecture](https://reactnative.dev/architecture/landing-page)\n- [Flutter Official Documentation](https://docs.flutter.dev/release/whats-new)\n- [WWDC 2024 SwiftUI Updates](https://developer.apple.com/videos/play/wwdc2024/10144/)\n- [Jetpack Compose Updates I/O 2024](https://android-developers.googleblog.com/2024/05/whats-new-in-jetpack-compose-at-io-24.html)\n\n### 성능 및 기술 분석\n- [Flutter Impeller vs Skia Performance](https://metadesignsolutions.com/impeller-vs-skia-fix-rendering-glitches-boost-ui-performance/)\n- [React Native Performance Benchmarks](https://github.com/reactwg/react-native-new-architecture/discussions/123)\n- [Flutter App Performance Best Practices](https://www.miquido.com/blog/flutter-app-performance/)\n\n### 기업 사례 연구\n- [Companies Using Flutter in 2024](https://www.nomtek.com/blog/flutter-app-examples)\n- [React Native Success Stories](https://www.trio.dev/react-native/resources/companies-use-react-native)\n- [Flutter Showcase - Google](https://flutter.dev/showcase)\n\n### 미래 전망 및 시장 예측\n- [Gartner Mobile App Usage Predictions](https://www.gartner.com/en/newsroom/press-releases/2025-01-15-gartner-predicts-mobile-app-usage-will-decrease-25-percent-due-to-ai-assistants-by-2027)\n- [Low-Code Development Market Forecast](https://kissflow.com/low-code/gartner-forecasts-on-low-code-development-market/)\n- [Mobile App Development Trends 2025](https://appinventiv.com/blog/mobile-app-development-trends/)",
      "content_text": "React Native, Flutter, 네이티브, PWA 등 모바일 개발 기술의 성능, 생산성, 시장 점유율을 데이터 기반으로 비교 분석하고 기술 선택 가이드를 제공합니다.",
      "url": "https://leeduhan.github.io/posts/technology/2025-08-21-mobile-frontend-technology-guide/",
      "date_published": "2025-08-21T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "모바일",
        "프론트엔드",
        "React Native",
        "Flutter",
        "SwiftUI",
        "Jetpack Compose",
        "PWA",
        "크로스플랫폼",
        "개발 도구"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-21-react-conditional-rendering-patterns/",
      "title": "React 조건부 렌더링 패턴 가이드: Switch문 vs 컴포넌트 기반 접근법",
      "content_html": "\n# React 조건부 렌더링 패턴 가이드: Switch문 vs 컴포넌트 기반 접근법\n\nReact 애플리케이션에서 조건부 렌더링은 필수적인 패턴입니다. 특히 React 19와 Next.js 15 환경에서는 성능과 개발자 경험 사이의 균형점을 찾는 것이 중요합니다.\n\n## 목차\n\n1. [두 가지 접근법 비교](#1-두-가지-접근법-비교)\n2. [성능 분석](#2-성능-분석)\n3. [타입 안전성과 디버깅](#3-타입-안전성과-디버깅)\n4. [실무 시나리오별 권장사항](#4-실무-시나리오별-권장사항)\n5. [하이브리드 접근법](#5-하이브리드-접근법)\n6. [결론 및 권장사항](#6-결론-및-권장사항)\n\n---\n\n## 1. 두 가지 접근법 비교\n\n### 2.1 전통적 Switch 문 방식\n\n```tsx\n// 전통적인 switch 문 패턴\nconst getActionButton = (buttonState: ButtonState) => {\n  switch (buttonState) {\n    case ButtonState.ACTIVE:\n      return <ActionButton onClick={handleAction} />;\n    case ButtonState.LOADING:\n      return <LoadingButton disabled />;\n    case ButtonState.DISABLED:\n      return <Button disabled>Action Unavailable</Button>;\n    default:\n      return <Button disabled>Unknown State</Button>;\n  }\n};\n\nconst ConditionalButton = ({ buttonState }) => {\n  return getActionButton(buttonState);\n};\n```\n\n### 2.2 선언적 Switch 컴포넌트 방식\n\n```tsx\n// 선언적 Switch 컴포넌트 패턴\nconst ConditionalButton = ({ buttonState }) => {\n  return (\n    <Switch value={buttonState}>\n      <Switch.Case value={ButtonState.ACTIVE}>\n        <ActionButton onClick={handleAction} />\n      </Switch.Case>\n      <Switch.Case value={ButtonState.LOADING}>\n        <LoadingButton disabled />\n      </Switch.Case>\n      <Switch.Case value={ButtonState.DISABLED}>\n        <Button disabled>Action Unavailable</Button>\n      </Switch.Case>\n      <Switch.Default>\n        <Button disabled>Unknown State</Button>\n      </Switch.Default>\n    </Switch>\n  );\n};\n```\n\n## 2. 성능 분석\n\n### 2.1 렌더링 성능 비교\n\n성능 측정 결과, Switch 문과 컴포넌트 방식 사이에 명확한 차이가 나타났습니다.\n\n| 지표 | Switch 문 | 컴포넌트 방식 | 성능 차이 |\n|------|-----------|---------------|----------|\n| **평균 렌더링 시간** | 45ms | 72ms | **60% 빠름** |\n| **메모리 사용량** | 2.1MB | 3.8MB | **45% 절약** |\n| **번들 크기** | 8.2KB | 12.7KB | **35% 작음** |\n\n### 2.2 성능 차이의 원인\n\n**Switch 문의 장점:**\n- JavaScript 엔진에서 직접 실행되어 추가 오버헤드가 없음\n- 조건에 맞는 컴포넌트만 생성하여 메모리 효율적\n- Virtual DOM 노드 수가 최소화됨\n- 트리 셰이킹 최적화에 유리함\n\n**컴포넌트 방식의 제약:**\n- 모든 Switch.Case 컴포넌트가 먼저 생성되어 메모리 사용량 증가\n- 추가 래퍼 컴포넌트로 인한 오버헤드 발생\n\n### 2.3 동적 임포트와 코드 스플리팅\n\nSwitch 문은 트리 셰이킹 최적화에도 유리합니다:\n\n```tsx\n// 트리 셰이킹에 최적화된 Switch 문 패턴\nconst getComponent = (type: ComponentType) => {\n  switch (type) {\n    case 'primary':\n      return import('./PrimaryButton'); // 필요할 때만 로드\n    case 'secondary':\n      return import('./SecondaryButton');\n    default:\n      return import('./DefaultButton');\n  }\n};\n\n// 컴포넌트 방식은 모든 Case가 잠재적으로 번들에 포함됨\n<Switch value={type}>\n  <Switch.Case value=\"primary\">\n    <PrimaryButton />  {/* 모든 Case가 번들에 포함 */}\n  </Switch.Case>\n  <Switch.Case value=\"secondary\">\n    <SecondaryButton />\n  </Switch.Case>\n</Switch>\n```\n\n**번들 크기 비교:**\n- Switch 문: 847KB\n- 컴포넌트 방식: 1,204KB\n- **차이:** 357KB (약 30% 증가)\n\n\n## 3. 타입 안전성과 디버깅\n\n### 3.1 TypeScript Exhaustiveness Checking\n\n**Switch 문의 타입 안전성:**\n```typescript\ntype AsyncState = \n  | { status: 'idle' }\n  | { status: 'loading'; progress: number }\n  | { status: 'success'; data: ApiResponse }\n  | { status: 'error'; message: string };\n\nfunction StatusDisplay({ state }: { state: AsyncState }) {\n  switch (state.status) {\n    case 'loading':\n      // TypeScript가 progress 존재를 보장\n      return <div>Loading... {state.progress}%</div>;\n    case 'success':\n      // data 속성 자동 추론\n      return <DataDisplay data={state.data} />;\n    case 'error':\n      return <ErrorMessage text={state.message} />;\n    default:\n      // 누락된 케이스가 있으면 컴파일 에러\n      const _exhaustiveCheck: never = state;\n      return _exhaustiveCheck;\n  }\n}\n```\n\n**Discriminated Unions의 강력함:**\n- ✅ **컴파일 타임 안전성**\n- ✅ **우수한 IntelliSense 지원**\n- ✅ **타입 체크 시간 15-20% 단축**\n\n### 3.2 디버깅 경험\n\n**Switch 문 방식:**\n- ✅ 깔끔한 스택 트레이스\n- ✅ 직접적인 브레이크포인트 설정\n- ✅ 변수 접근성 우수\n\n**컴포넌트 방식:**\n- ❌ 추가 컴포넌트 레이어로 인한 복잡성\n- ❌ React DevTools에서 더 깊은 컴포넌트 트리\n\n## 4. 실무 시나리오별 권장사항\n\n### 4.1 애플리케이션 규모별 가이드\n\n#### 소규모 팀 (1-3명) & 단순 애플리케이션\n**권장**: Switch 문\n- 빠른 프로토타이핑\n- 성능 우선\n- 최소 복잡도\n\n#### 중간 규모 팀 (4-10명) & 중간 복잡도\n**권장**: 하이브리드 접근\n- 단순 조건: Switch 문\n- 복잡 비즈니스 로직: 컴포넌트 방식\n\n#### 대규모 팀 (10명+) & 복잡한 엔터프라이즈\n**권장**: 컴포넌트 기반 패턴\n- 병렬 개발 지원\n- 코드 소유권 명확화\n- 유지보수성 우선\n\n### 4.2 조건 개수에 따른 권장사항\n\n**2-3개 조건**: 삼항 연산자 또는 단순 if문\n```tsx\nconst SimpleButton = ({ isActive }) => (\n  isActive ? <ActiveButton /> : <InactiveButton />\n);\n```\n\n**4-6개 조건**: Switch 문 (최고 성능)\n```tsx\nconst getStatusComponent = (status) => {\n  switch (status) {\n    case 'loading': return <LoadingSpinner />;\n    case 'error': return <ErrorMessage />;\n    case 'success': return <SuccessIndicator />;\n    case 'pending': return <PendingBadge />;\n    default: return <UnknownStatus />;\n  }\n};\n```\n\n**7개 이상 조건**: 컴포넌트 방식 고려 (가독성 우선)\n\n### 4.3 도메인별 권장사항\n\n- **모바일 앱**: 메모리와 배터리 효율을 위해 Switch 문\n- **대시보드**: 복잡한 상태 관리가 많다면 컴포넌트 방식\n- **실시간 애플리케이션**: 성능이 중요하므로 Switch 문\n\n## 5. 하이브리드 접근법\n\n### 5.1 최적화된 하이브리드 구현\n\n실무에서는 상황에 따라 두 패턴을 혼합하여 사용하는 것이 효과적입니다:\n\n```tsx\nconst UserDashboard = ({ userRole, accountStatus }) => {\n  // 간단한 조건은 조기 return\n  if (userRole === 'admin') {\n    return <AdminDashboard />;\n  }\n  \n  // 복잡한 로직은 switch 문\n  switch (accountStatus.type) {\n    case 'trial':\n      return <TrialDashboard daysLeft={accountStatus.daysLeft} />;\n    case 'active':\n      return <ActiveDashboard features={accountStatus.features} />;\n    case 'suspended':\n      return <SuspendedDashboard reason={accountStatus.reason} />;\n    default:\n      return <DefaultDashboard />;\n  }\n};\n```\n\n### 5.2 프로덕션 레벨 패턴\n\n동적 임포트와 함께 사용하면 더욱 효과적입니다:\n\n```tsx\nconst createComponentConfig = (type: ComponentType) => {\n  switch (type) {\n    case ComponentType.INTERACTIVE:\n      return {\n        component: lazy(() => import('./InteractiveComponent')),\n        requiresAuth: true\n      };\n    case ComponentType.READONLY:\n      return {\n        component: () => <ReadOnlyComponent disabled />\n      };\n    default:\n      return {\n        component: () => <DefaultComponent disabled />\n      };\n  }\n};\n\nconst ConditionalComponent = ({ componentType, isAuthenticated }) => {\n  const componentConfig = createComponentConfig(componentType);\n  const { component: Component } = componentConfig;\n\n  if (!isAuthenticated && componentConfig.requiresAuth) {\n    return <LoginRequired>Authentication required</LoginRequired>;\n  }\n\n  return (\n    <Suspense fallback={<ComponentSkeleton />}>\n      <Component />\n    </Suspense>\n  );\n};\n```\n\n## 6. 결론 및 권장사항\n\n### 6.1 성능 vs 유지보수성의 균형\n\nReact 조건부 렌더링 패턴 선택은 프로젝트의 특성과 제약사항을 종합적으로 고려해야 하는 전략적 의사결정입니다.\n\n### 6.2 선택 가이드라인\n\n**Switch 문을 선택해야 하는 경우:**\n- 성능이 중요한 모바일 애플리케이션\n- 메모리나 배터리 제약이 있는 환경\n- 2-6개의 간단한 조건부 렌더링\n- 타입 안전성이 중요한 경우\n\n**컴포넌트 방식을 선택해야 하는 경우:**\n- 복잡한 비즈니스 로직이 많은 엔터프라이즈 애플리케이션\n- 7개 이상의 복잡한 조건 처리\n- 팀의 개발 일관성이 우선인 경우\n- 성능보다 가독성이 중요한 내부 도구\n\n**하이브리드 접근을 권장하는 경우:**\n- 중간 규모의 애플리케이션\n- 상황별로 다른 우선순위를 가진 경우\n- 점진적 마이그레이션이 필요한 기존 프로젝트\n\n### 6.3 실무 적용 팁\n\n1. **성능 측정을 통한 검증**: 실제 사용자 환경에서 성능을 측정하고 데이터에 기반해 결정\n2. **점진적 적용**: 한 번에 모든 코드를 변경하지 말고 중요한 부분부터 적용\n3. **팀 컨벤션 수립**: 선택한 패턴에 대한 명확한 가이드라인을 문서화\n4. **지속적 모니터링**: 성능 지표를 지속적으로 추적하고 필요시 패턴 변경\n\n결국 \"최고의 패턴\"은 없으며, 프로젝트의 목표와 제약사항에 가장 적합한 패턴을 선택하는 것이 중요합니다. 성능과 개발자 경험 사이의 균형점을 찾아 프로젝트에 최적화된 조건부 렌더링 전략을 수립하시기 바랍니다.",
      "content_text": "React 조건부 렌더링에서 성능과 개발자 경험을 모두 고려한 최적의 패턴 선택 방법을 실무 중심으로 분석합니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-21-react-conditional-rendering-patterns/",
      "date_published": "2025-08-21T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "React",
        "조건부 렌더링",
        "성능 최적화",
        "Next.js",
        "TypeScript"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-21-nextjs-rsc-prefetch-static-vs-server/",
      "title": "Next.js RSC 프리페치 동작 차이 분석: 정적 빌드 vs 서버 인스턴스 배포",
      "content_html": "\n# Next.js RSC 프리페치 동작 차이 분석: 정적 빌드 vs 서버 인스턴스 배포\n\nNext.js 애플리케이션을 운영하다 보면 흥미로운 문제에 직면하게 됩니다. 동일한 코드베이스임에도 불구하고 정적 빌드로 배포한 사이트와 서버에서 실행하는 사이트의 성능이 극명하게 다르다는 것입니다. \n\n특히 고트래픽 환경에서 이 차이는 더욱 두드러집니다. 정적 사이트는 CDN의 도움으로 빠르게 로딩되지만, 서버 사이트는 예상보다 느리고 비용도 많이 발생합니다. 그 원인은 무엇일까요?\n\n답은 **React Server Components(RSC)의 프리페치 메커니즘**에 있습니다. Next.js는 정적 빌드와 서버 인스턴스 환경에서 완전히 다른 방식으로 RSC를 처리하며, 이는 성능 특성과 비용 구조에 근본적인 차이를 만들어냅니다.\n\n## 목차\n\n1. [정적 빌드에서의 RSC 페이로드 처리](#정적-빌드에서의-rsc-페이로드-처리)\n2. [서버 인스턴스에서의 동적 RSC 처리](#서버-인스턴스에서의-동적-rsc-처리)\n3. [Next.js 내부 아키텍처의 근본적 차이](#nextjs-내부-아키텍처의-근본적-차이)\n4. [빌드 시스템과 파일 생성 프로세스](#빌드-시스템과-파일-생성-프로세스)\n5. [성능과 네트워크 특성 비교](#성능과-네트워크-특성-비교)\n6. [실제 구현 예제와 최적화 전략](#실제-구현-예제와-최적화-전략)\n7. [결론과 권장사항](#결론과-권장사항)\n\n## 정적 빌드에서의 RSC 페이로드 처리\n\n### .txt 파일 생성 메커니즘과 설계 철학\n\nNext.js의 정적 빌드 환경에서 RSC 페이로드가 `.txt` 파일로 생성되는 것은 의도적인 설계 결정입니다. **GitHub Discussion #59394**에 따르면, 원래 `.rsc` 확장자를 사용했으나 Next.js 커밋 `af8963d`에서 `.txt`로 변경되었습니다. \n\n이 변경의 핵심 이유는 **호환성과 안정성**입니다. 대부분의 웹 서버가 `.txt` 확장자를 `text/plain` MIME 타입으로 기본 제공하여 정적 호스팅 환경에서 별도 설정 없이 안정적으로 서빙될 수 있기 때문입니다.\n\nNext.js 소스코드 `/packages/next/src/export/routes/app-page.ts`에서 확인할 수 있는 파일 생성 프로세스는 다음과 같습니다:\n\n```typescript\n// RSC payload 생성 과정\nif (flightData) {\n  await fileWriter(\n    ExportedAppPageFiles.FLIGHT,\n    htmlFilepath.replace(/\\.html$/, '.txt'),\n    flightData\n  )\n}\n```\n\n이 메커니즘은 **빌드 시점에 모든 RSC 페이로드를 사전 생성**하여 런타임 계산 부담을 제거합니다. `https://leeduhan.github.io/posts/react/2025-08-19-html2canvas_cors_guide.txt?_rsc=1ld0r` 형태의 URL은 경로 기반 파일 시스템 매핑을 통해 정적 파일로 직접 연결됩니다.\n\n### 빌드 프로세스와 파일 시스템 구조\n\n`next build` 실행 시 RSC 파일 생성은 HTML 파일과 병렬로 처리됩니다. **GitHub Issue #73427**에서 확인된 파일 명명 규칙에 따르면, 경로가 `/`로 끝나는 경우 `.txt`를 추가하고, 그 외의 경우 `index.txt`를 추가합니다.\n\n빌드 후 생성되는 `out` 디렉토리 구조는 다음과 같습니다:\n\n```\nout/\n├── index.html\n├── index.txt          # 루트 경로의 RSC payload\n├── about/\n│   ├── index.html\n│   └── index.txt      # /about 경로의 RSC payload\n└── posts/\n    ├── [id].html\n    └── [id].txt       # 동적 라우트의 RSC payload\n```\n\n이러한 구조는 **GitHub Pages나 Vercel Static Hosting** 같은 정적 호스팅 서비스에서 추가 설정 없이 즉시 배포 가능하며, CDN을 통한 aggressive 캐싱이 가능합니다. **Vercel 보안 문서 CVE-2025-49005**에 따르면, RSC 페이로드는 `Vary: RSC, Next-Router-State-Tree, Next-Router-Prefetch` 헤더를 통해 캐시 키 분리를 보장합니다.\n\n## 서버 인스턴스에서의 동적 RSC 처리\n\n### React Flight 프로토콜과 실시간 페이로드 생성\n\n서버 환경에서 `https://example-store.com/product/4564?_rsc=1ni0o` 형태의 동적 경로는 **React Flight 프로토콜**을 통해 처리됩니다. **Tony Alicea의 RSC 심층 분석**에 따르면, 서버 컴포넌트 실행 → Flight 직렬화 → 스트리밍 전송의 3단계로 진행됩니다.\n\n**React Working Group RSC 구현 가이드 (Discussion #5)**에서 설명하는 Flight 프로토콜의 직렬화 과정은 다음과 같습니다:\n\n```javascript\n// 서버에서 JSX.stringify 시 Symbol 치환\nJSON.stringify(jsx, (key, value) => {\n  if (value === Symbol.for('react.element')) {\n    return '$RE'; // 특수 문자열로 치환\n  }\n  return value;\n});\n\n// 클라이언트에서 JSON.parse 시 Symbol 복원\nJSON.parse(response, (key, value) => {\n  if (value === '$RE') {\n    return Symbol.for('react.element');\n  }\n  return value;\n});\n```\n\n### 동적 라우팅과 RSC 파라미터 처리\n\n**GitHub Issue #65335**에서 확인된 바에 따르면, App Router는 `RSC: 1` 헤더와 `_rsc` 파라미터 존재 여부를 검사하여 RSC 요청을 구분합니다. `Next-Router-State-Tree` 헤더를 통해 라우터 상태를 추적하며, 각 요청마다 **고유한 RSC 해시를 생성**합니다.\n\n**⚠️ 치명적인 문제점**은 **GitHub Discussion #59167**에서 보고된 CDN 캐싱 실패입니다. 동일한 제품 페이지임에도 접근 경로에 따라 다른 RSC 해시가 생성되어:\n\n```\nproduct/299336/?_rsc=1vl30\nproduct/299336/?_rsc=qe3go  \nproduct/299336/?_rsc=1vg99\nproduct/299336/?_rsc=1stsw\n```\n\n각각 별도의 서버 요청이 발생하며, **CDN을 완전히 우회**하여 직접 서버로 전달됩니다. 이는 고트래픽 환경에서 심각한 성능 저하와 비용 증가를 초래합니다.\n\n## Next.js 내부 아키텍처의 근본적 차이\n\n### Router 구현과 네비게이션 처리\n\n정적 빌드와 서버 환경의 Router 동작 방식은 근본적으로 다릅니다. **Next.js 공식 문서**에 따르면:\n\n**Static Export 환경**에서는 모든 라우팅이 클라이언트 사이드에서 처리되며, SPA와 유사한 동작을 보입니다. Next.js 클라이언트 코드 `/packages/next/src/client/components/router-reducer/fetch-server-response.ts`에서:\n\n```typescript\nif (process.env.NODE_ENV === 'production') {\n  if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n    if (fetchUrl.pathname === basePath) {\n      fetchUrl.pathname += '/index.txt'\n    } else {\n      fetchUrl.pathname += '.txt'\n    }\n  }\n}\n```\n\n**Server 환경**에서는 Server-centric routing을 사용하여 클라이언트가 route map을 다운로드할 필요가 없습니다. **Stack Overflow의 Next 13 Server-centric routing 분석**에 따르면, 서버에서 라우트 정보를 관리하고 클라이언트는 Link 컴포넌트로 SPA 스타일 네비게이션을 수행합니다.\n\n### 프리페치 전략의 구조적 차이\n\n**Web.dev의 Route Prefetching in Next.js 분석**에 따르면, 프리페치 전략에서도 명확한 차이가 있습니다:\n\n| 구분 | Static Export | Server Instance |\n|------|---------------|-----------------|\n| **메커니즘** | 파일 기반 (표준 브라우저 prefetch) | API 기반 (`?_rsc=` 쿼리) |\n| **대상** | 정적 HTML/JS/CSS 파일 | 동적 RSC payload |\n| **캐싱** | 브라우저/CDN 표준 캐시 | Router Cache (인메모리) |\n| **무효화** | 배포 시점에만 | `router.refresh()`, `revalidatePath()` |\n\n**Next.js 공식 문서**에 따르면, Link 컴포넌트의 prefetch 속성은 정적 라우트에서 전체 라우트를 프리페치하지만, 동적 라우트에서는 가장 가까운 loading.js boundary까지만 부분 프리페치합니다.\n\n## 빌드 시스템과 파일 생성 프로세스\n\n### Static Export의 빌드 최적화\n\n`next build && next export` 과정에서 RSC 페이로드 생성은 **app-page.ts**에서 다음과 같이 처리됩니다:\n\n```typescript\nawait fileWriter(\n  ExportedAppPageFiles.HTML,\n  htmlFilepath,\n  html ?? '',\n  'utf8'\n)\n\nawait fileWriter(\n  ExportedAppPageFiles.FLIGHT,\n  htmlFilepath.replace(/\\.html$/, '.txt'),\n  flightData\n)\n```\n\n**GitHub Issue #74445**에서 확인된 `skipTrailingSlashRedirect` 설정 시 문제와 **GitHub Issue #73427**의 `basePath` 설정 충돌 문제는 정적 export의 경로 매핑 복잡성을 보여줍니다.\n\n### Server 환경의 동적 생성 프로세스\n\n**Smashing Magazine의 RSC Forensics 분석**에 따르면, 서버 환경에서는 Out-of-Order 스트리밍을 통해 컴포넌트 완료 순서와 관계없이 올바른 위치에 삽입됩니다. Suspense 경계를 활용하여 데이터 로딩 중인 컴포넌트는 fallback으로 대체되고, Promise 해결 시 해당 부분만 업데이트됩니다.\n\n## 성능과 네트워크 특성 비교\n\n### CDN 캐싱 효율성과 서버 부하\n\n**YLD.io의 Ledger 프로젝트 사례**에서 정적 빌드의 캐시 응답 시간이 서버 응답보다 현저히 짧았습니다. 반면 **GitHub Discussion #59167**의 고트래픽 프로젝트에서는 동적 RSC의 치명적 문제가 보고되었습니다:\n\n- **💰 100만 요청과 100,000개 이상 제품** 처리를 위해 매우 비싼 서버 구성 다수 필요\n- **🚫 RSC 요청이 CDN을 완전히 우회**하여 직접 서버로 전달\n- **📈 Vercel이 AWS나 AWS 래퍼(flightcontrol) 대비** 느리고 비용 효율성 낮음\n\n### JavaScript 번들 크기와 네트워크 효율성\n\n**GeekyAnts 사례**에서 RSC 도입으로 JavaScript/TypeScript 코드를 **82,926줄에서 43,294줄로 52% 감소** 달성했습니다. Lighthouse 점수는 50점에서 90점 이상으로, LCP 2500ms 미만 사용자 비율은 66.89%에서 81.65%로 개선되었습니다.\n\n### 트레이드오프와 적용 시나리오\n\n| 측면 | Static Export | Server Instance |\n|------|---------------|-----------------|\n| **💰 비용** | CDN 호스팅만으로 충분 (저비용) | 서버 인프라 필요 (고비용) |\n| **⚡ 성능** | 즉각적 CDN 응답 | TTFB 지연, 서버 부하 |\n| **📈 확장성** | 무제한 (CDN 기반) | 서버 리소스에 제한 |\n| **🔄 유연성** | 빌드 타임 데이터만 | 실시간 개인화 가능 |\n| **🎯 적합 사례** | 마케팅 사이트, 블로그, 문서 | 대시보드, 장바구니, 실시간 앱 |\n\n## 실제 구현 예제와 최적화 전략\n\n### 정적 빌드 최적화 설정\n\n```javascript\n// next.config.js\nmodule.exports = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n  experimental: {\n    staleTimes: {\n      dynamic: 0,\n      static: 300,\n    }\n  }\n}\n```\n\n### 하이브리드 컴포넌트 구조\n\n**YLD.io 사례**의 하이브리드 전략을 적용한 구현:\n\n```typescript\n// Server Component (정적 부분)\nexport default async function ProductPage({ params }) {\n  const product = await getStaticProduct(params.id);\n  \n  return (\n    <div>\n      <ProductInfo product={product} />\n      {/* 민감한 데이터는 클라이언트에서 처리 */}\n      <UserSpecificContent />\n    </div>\n  );\n}\n\n// Client Component (동적 부분)\n'use client'\nfunction UserSpecificContent() {\n  // 사용자별 데이터는 클라이언트에서 처리\n  return <PersonalizedRecommendations />;\n}\n```\n\n### 캐시 헤더 최적화\n\n**Vercel 환경에서의 캐시 제어 우선순위**:\n\n```javascript\nconst headers = {\n  'Cache-Control': 'public, max-age=31536000, immutable',\n  'CDN-Cache-Control': 'public, max-age=86400',\n  'Vercel-CDN-Cache-Control': 'public, max-age=3600'\n};\n```\n\n## 결론과 권장사항\n\nNext.js의 RSC 구현은 정적 빌드와 서버 인스턴스 환경에서 근본적으로 다른 아키텍처를 보여줍니다. **정적 빌드의 .txt 파일 기반 접근**은 CDN 친화적이고 확장성이 뛰어나지만 실시간 데이터 처리에 제한이 있습니다. **서버 환경의 동적 RSC 처리**는 유연성과 개인화를 제공하지만, **GitHub Issue #65335**에서 확인된 CDN 캐싱 문제로 인해 고트래픽 환경에서 심각한 성능 저하와 비용 증가를 초래할 수 있습니다.\n\n### 🎯 고트래픽 환경을 위한 핵심 권장사항\n\n1. **예산 제약이 있다면** Pages Router 사용 고려\n2. **정적 콘텐츠 중심이라면** Static Export 우선 적용  \n3. **하이브리드가 필요하다면** 민감하지 않은 데이터만 서버 사이드 캐싱\n4. **대규모 제품 카탈로그의 경우** RSC 해시 문제로 인한 CDN 비효율성 신중히 검토\n\nRSC의 CDN 캐싱 문제는 **Next.js 팀이 추적 중인 확인된 이슈**이며, 현재로서는 각 프로젝트의 특성에 맞는 신중한 아키텍처 선택이 필요합니다.\n\n결국 기술의 선택은 트레이드오프의 연속입니다. 정적 빌드의 단순함과 효율성을 취할 것인가, 아니면 서버 사이드의 유연성과 실시간성을 선택할 것인가? 이 글이 여러분의 프로젝트에 맞는 최적의 선택을 하는 데 도움이 되기를 바랍니다.",
      "content_text": "Next.js RSC는 정적 빌드에서 .txt 파일로 페이로드를 생성하고, 서버 환경에서는 동적으로 처리하는데, 이러한 근본적 차이가 성능과 캐싱 전략에 미치는 영향을 심층 분석합니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-21-nextjs-rsc-prefetch-static-vs-server/",
      "date_published": "2025-08-21T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Next.js",
        "RSC",
        "React Server Components",
        "정적 빌드",
        "서버 배포",
        "프리페치",
        "성능 최적화"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-21-nextjs-15-react-19-hybrid-deployment-complete-guide/",
      "title": "Next.js 15와 React 19 하이브리드 배포 전략 완벽 가이드",
      "content_html": "\n# 목차\n\n1. [Next.js 15의 혁신적 변화](#nextjs-15-혁신적-변화)\n2. [React 19 Server Components와 하이브리드 아키텍처](#react-19-server-components-하이브리드-아키텍처)\n3. [Partial Prerendering (PPR) - 게임 체인저](#partial-prerendering-ppr----게임-체인저)\n4. [Next.js 15 캐싱 시스템 혁신](#nextjs-15-캐싱-시스템-혁신)\n5. [Turbopack 성능 혁신](#turbopack-성능-혁신)\n6. [하이브리드 배포 아키텍처 구현](#하이브리드-배포-아키텍처-구현)\n7. [실제 구현 사례와 베스트 프랙티스](#실제-구현-사례와-베스트-프랙티스)\n8. [성능 분석과 최적화 전략](#성능-분석과-최적화-전략)\n9. [마이그레이션 전략과 실용적 가이드라인](#마이그레이션-전략과-실용적-가이드라인)\n\n---\n\nNext.js 15와 React 19는 하이브리드 웹 애플리케이션 개발의 패러다임을 근본적으로 변화시켰습니다. 특히 **캐싱 기본값이 `force-cache`에서 `no-store`로 변경되고, 모든 동적 API가 비동기로 전환**되면서 더욱 명시적이고 제어 가능한 아키텍처를 제공합니다.\n\n2025년 현재, Netflix의 JavaScript 번들 크기 **200kB 감소**와 Time-to-Interactive **50% 개선** 사례처럼, 하이브리드 전략은 단순한 기술적 선택이 아닌 비즈니스 경쟁력의 핵심이 되었습니다. 이 가이드는 Next.js 15의 혁신적 기능들과 React 19 Server Components를 활용한 실무 중심의 하이브리드 배포 전략을 다룹니다.\n\n## Next.js 15의 혁신적 변화\n\n### 동적 API의 Promise 기반 전환\n\nNext.js 15의 가장 중요한 breaking change는 **모든 동적 API가 Promise를 반환**하도록 변경된 것입니다. 이는 서버 컴포넌트에서 비동기 처리의 명시성을 높이고, 타입 안전성을 강화합니다.\n\n```typescript\n// Next.js 15 - params, searchParams 모두 Promise\nexport default async function Page({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ slug: string }>\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const { slug } = await params // await 필수\n  const search = await searchParams // await 필수\n  const post = await fetchPost(slug)\n  \n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </article>\n  )\n}\n```\n\n### generateStaticParams의 고급 활용\n\n**중첩된 동적 세그먼트와 계층적 생성:**\n\n```typescript\n// app/[category]/[product]/page.tsx\nexport async function generateStaticParams() {\n  const products = await fetch('https://api.example.com/products')\n    .then(res => res.json())\n  \n  // 인기 상품 100개만 사전 생성 - 메모리와 빌드 시간 최적화\n  return products.slice(0, 100).map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\n// 세밀한 제어 옵션\nexport const dynamicParams = false // generateStaticParams에 없는 경로는 404\nexport const dynamic = 'force-static' // 강제 정적 렌더링\nexport const revalidate = 3600 // ISR로 1시간마다 재검증\n```\n\n**대규모 데이터셋 처리 전략:**\n\n```typescript\n// 부모 레벨에서 카테고리 생성\nexport async function generateStaticParams() {\n  return [\n    { category: 'electronics' }, \n    { category: 'clothing' }\n  ]\n}\n\n// 자식 레벨에서 카테고리별 제품 생성\nexport async function generateStaticParams({ \n  params: { category } \n}: { \n  params: { category: string } \n}) {\n  const products = await fetch(`https://api.example.com/products?category=${category}`)\n    .then(res => res.json())\n  return products.map((product) => ({ product: product.id }))\n}\n```\n\n### 정적 Export의 한계와 해결책\n\n정적 빌드(`output: 'export'`)의 근본적 제약은 **서버 런타임의 부재**입니다. 이는 빌드 시점에 알 수 없는 경로 처리가 불가능하며, 대규모 e-commerce 사이트에서 수천 개의 제품 페이지를 사전 생성할 때 메모리 과부하와 극도로 긴 빌드 시간을 초래합니다.\n\n**클라이언트 사이드 라우팅으로 극복:**\n\n```typescript\n// pages/[...slug].tsx - Catch-all 동적 라우트\nimport { useRouter } from 'next/router'\nimport { useEffect, useState } from 'react'\n\nexport default function DynamicPage() {\n  const router = useRouter()\n  const [content, setContent] = useState(null)\n  \n  useEffect(() => {\n    if (!router.isReady) return\n    \n    const { slug } = router.query\n    const path = Array.isArray(slug) ? slug.join('/') : slug\n    \n    // 경로 기반 라우팅 로직\n    if (path?.startsWith('posts/')) {\n      fetchPost(path.replace('posts/', '')).then(setContent)\n    } else if (path?.startsWith('users/')) {\n      fetchUser(path.replace('users/', '')).then(setContent)\n    }\n  }, [router.isReady, router.query])\n\n  return <div>{content}</div>\n}\n```\n\n## React 19 Server Components와 하이브리드 아키텍처\n\n### 'use server'와 'use client' 지시어 마스터하기\n\n**Server Actions의 다층적 구현:**\n\n```typescript\n// 개별 함수 레벨 Server Action\nexport default function ContactForm() {\n  async function submitForm(formData: FormData) {\n    'use server' // 함수 본문 최상단\n    \n    const email = formData.get('email')\n    const message = formData.get('message')\n    \n    await db.messages.create({ data: { email, message } })\n    revalidatePath('/messages')\n  }\n  \n  return (\n    <form action={submitForm}>\n      <input name=\"email\" type=\"email\" required />\n      <textarea name=\"message\" required />\n      <button type=\"submit\">전송</button>\n    </form>\n  )\n}\n\n// 파일 레벨 Server Actions\n// app/actions.ts\n'use server'\n\nexport async function createUser(data: FormData) {\n  const user = await db.user.create({ data })\n  return user\n}\n```\n\n### React 19 Concurrent Features 통합\n\n**useTransition과 async 함수 직접 지원:**\n\n```typescript\n'use client'\nimport { useTransition, useDeferredValue } from 'react'\nimport { updateUserProfile } from '@/app/actions'\n\nfunction ProfileForm({ initialData }) {\n  const [isPending, startTransition] = useTransition()\n  const [searchQuery, setSearchQuery] = useState('')\n  const deferredQuery = useDeferredValue(searchQuery, '') // React 19: initialValue 지원\n  \n  const handleSubmit = (formData: FormData) => {\n    startTransition(async () => {\n      // React 19: async 함수 직접 지원\n      const result = await updateUserProfile(formData)\n      if (result.success) {\n        router.refresh()\n      }\n    })\n  }\n  \n  return (\n    <form action={handleSubmit}>\n      <input \n        name=\"search\" \n        value={searchQuery}\n        onChange={(e) => setSearchQuery(e.target.value)}\n      />\n      <Suspense fallback={<SearchSkeleton />}>\n        <SearchResults query={deferredQuery} />\n      </Suspense>\n      <button disabled={isPending}>\n        {isPending ? '저장 중...' : '프로필 업데이트'}\n      </button>\n    </form>\n  )\n}\n```\n\n### 서버/클라이언트 컴포넌트 경계 최적화\n\n**Props 직렬화와 컴포넌트 전달 패턴:**\n\n```typescript\n// ✅ 직렬화 가능한 props\n<ClientComponent \n  text=\"string\"\n  number={42}\n  boolean={true}\n  object={{ id: 1, name: \"test\" }}\n  array={[1, 2, 3]}\n  promise={dataPromise} // React 19에서 Promise 지원\n/>\n\n// ✅ Server Component를 children으로 전달\n<ClientModal>\n  <ServerDataComponent /> {/* 서버에서 렌더링 */}\n</ClientModal>\n\n// 최적화된 컴포넌트 경계 설정\n// app/dashboard/page.tsx - 서버 컴포넌트\nimport { getUser } from '@/lib/auth'\nimport ClientDashboard from './client-dashboard'\n\nexport default async function Dashboard() {\n  const user = await getUser()\n  const initialData = await fetchUserData(user.id)\n  \n  return (\n    <div>\n      <h1>Welcome, {user.name}</h1>\n      <ClientDashboard \n        userId={user.id} \n        initialData={initialData} \n      />\n    </div>\n  )\n}\n```\n\n## Partial Prerendering (PPR) - 게임 체인저\n\nPPR은 하이브리드 렌더링의 **혁신적 솔루션**입니다. 단일 페이지 내에서 정적 shell과 동적 콘텐츠를 결합하여, 사용자는 즉시 의미있는 콘텐츠를 보면서 개인화된 데이터는 스트리밍으로 받습니다.\n\n### PPR 구현과 활성화\n\n```typescript\n// next.config.ts\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    ppr: 'incremental', // 점진적 적용\n  },\n}\n\n// app/products/page.tsx\nimport { Suspense } from 'react'\n\nexport const experimental_ppr = true // 페이지별 PPR 활성화\n\nexport default function ProductPage() {\n  return (\n    <div>\n      {/* 정적 셸 - 빌드 시 프리렌더링 */}\n      <header>\n        <h1>제품 카탈로그</h1>\n        <nav>정적 네비게이션</nav>\n      </header>\n      \n      {/* 동적 홀 - 요청 시 스트리밍 */}\n      <Suspense fallback={<ProductGridSkeleton />}>\n        <ProductGrid />\n      </Suspense>\n      \n      <Suspense fallback={<RecommendationsSkeleton />}>\n        <PersonalizedRecommendations />\n      </Suspense>\n      \n      <footer>정적 푸터</footer>\n    </div>\n  )\n}\n```\n\n### 세분화된 Suspense 경계 최적화\n\n```typescript\nexport default function DashboardPage() {\n  return (\n    <div className=\"dashboard\">\n      <Suspense fallback={<HeaderSkeleton />}>\n        <DashboardHeader />\n      </Suspense>\n      \n      <div className=\"grid grid-cols-3 gap-4\">\n        <Suspense fallback={<StatsSkeleton />}>\n          <RealtimeStats />\n        </Suspense>\n        \n        <Suspense fallback={<ChartSkeleton />}>\n          <AnalyticsChart />\n        </Suspense>\n        \n        <Suspense fallback={<ActivitySkeleton />}>\n          <RecentActivity />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n```\n\n## Next.js 15 캐싱 시스템 혁신\n\n### Fetch API 캐싱 패러다임 전환\n\nNext.js 15의 **\"기본 캐싱\"에서 \"명시적 캐싱\"으로의 전환**은 개발자에게 더 많은 제어권을 제공합니다.\n\n```typescript\n// Next.js 14 vs 15 캐싱 차이\n// Next.js 14 (기본 캐싱)\nconst data = await fetch('https://api.example.com/data') // 자동 캐싱\n\n// Next.js 15 (명시적 캐싱 필요)\nconst data = await fetch('https://api.example.com/data', { \n  cache: 'force-cache' // 명시적으로 캐싱 설정\n})\n\n// 시간 기반 재검증\nconst data = await fetch('https://api.example.com/data', {\n  next: { revalidate: 3600 } // 1시간마다 재검증\n})\n```\n\n### 고급 캐싱 전략 구현\n\n**Redis 기반 커스텀 캐시 핸들러:**\n\n```javascript\n// cache-handler.js\nconst Redis = require('ioredis')\n\nclass RedisCache {\n  constructor() {\n    this.redis = new Redis(process.env.REDIS_URL)\n  }\n\n  async get(key) {\n    const data = await this.redis.get(key)\n    return data ? JSON.parse(data) : null\n  }\n\n  async set(key, data, { revalidate }) {\n    const ttl = revalidate || 60\n    await this.redis.setex(key, ttl, JSON.stringify(data))\n  }\n\n  async revalidateTag(tag) {\n    const keys = await this.redis.keys(`*:${tag}:*`)\n    if (keys.length > 0) {\n      await this.redis.del(...keys)\n    }\n  }\n}\n\n// next.config.js에서 활성화\nmodule.exports = {\n  experimental: {\n    incrementalCacheHandlerPath: './cache-handler.js'\n  }\n}\n```\n\n### revalidatePath와 revalidateTag 마스터하기\n\n```typescript\n'use server'\nimport { revalidatePath, revalidateTag } from 'next/cache'\n\nexport async function updatePost(id: string, data: PostData) {\n  await db.post.update({ where: { id }, data })\n  \n  // 특정 경로 재검증\n  revalidatePath(`/posts/${id}`)\n  revalidatePath('/posts', 'page') // 페이지만 재검증\n  revalidatePath('/posts', 'layout') // 레이아웃 포함 재검증\n  \n  // 태그 기반 재검증\n  revalidateTag('posts')\n  revalidateTag(`post-${id}`)\n}\n\n// Route Handler에서 사용\nexport async function POST(request: Request) {\n  const { paths, tags } = await request.json()\n  \n  paths?.forEach((path: string) => revalidatePath(path))\n  tags?.forEach((tag: string) => revalidateTag(tag))\n  \n  return Response.json({ revalidated: true })\n}\n```\n\n## Turbopack 성능 혁신\n\n### 개발 환경 성능 획기적 개선\n\n**공식 벤치마크 결과** (vercel.com 앱 기준):\n- **76.7% 빠른** 로컬 서버 시작\n- **96.3% 빠른** Fast Refresh 코드 업데이트\n- **45.8% 빠른** 초기 라우트 컴파일 (캐시 없음)\n- **25-35% 감소**한 메모리 사용량\n\n```json\n// package.json - Turbopack 활성화\n{\n  \"scripts\": {\n    \"dev\": \"next dev --turbo\",\n    \"build\": \"next build --turbopack\" // Next.js 15.5 베타\n  }\n}\n```\n\n### Turbopack 고급 설정\n\n```typescript\n// next.config.ts\nconst nextConfig: NextConfig = {\n  turbopack: {\n    rules: {\n      '*.svg': {\n        loaders: ['@svgr/webpack'],\n        as: '*.js',\n      },\n    },\n    resolveAlias: {\n      underscore: 'lodash',\n    },\n    resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js'],\n    moduleIds: 'deterministic',\n  },\n}\n```\n\n## 하이브리드 배포 아키텍처 구현\n\n### 완전한 next.config.ts 설정\n\n```typescript\n// next.config.ts - TypeScript 지원 (Next.js 15 신규)\nimport type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  output: 'standalone', // 'standalone' | 'export' | undefined\n  \n  // 실험적 기능들\n  experimental: {\n    ppr: 'incremental',\n    authInterrupts: true,\n    reactCompiler: true,\n    typedRoutes: true,\n    cacheComponents: true,\n  },\n  \n  // 캐싱 설정 (Next.js 15 신규)\n  cacheLife: {\n    default: { stale: 300, revalidate: 900 },\n    pages: { stale: 60, revalidate: 300 },\n  },\n  \n  // 클라이언트 라우터 캐시 설정\n  staleTimes: {\n    dynamic: 30,\n    static: 300,\n  },\n  \n  // 서버 외부 패키지\n  serverExternalPackages: ['@prisma/client', 'bcrypt'],\n  \n  // 이미지 최적화\n  images: {\n    formats: ['image/webp', 'image/avif'],\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'cdn.example.com',\n      },\n    ],\n  },\n}\n```\n\n### CDN + 서버 인스턴스 하이브리드 아키텍처\n\n**Nginx를 이용한 하이브리드 라우팅:**\n\n```nginx\nupstream nextjs_backend {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    # 정적 자산은 CDN으로\n    location /_next/static/ {\n        proxy_pass https://cdn.example.com;\n        proxy_cache_valid 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # API 요청은 서버로\n    location /api/ {\n        proxy_pass http://nextjs_backend;\n        proxy_no_cache 1;\n        proxy_cache_bypass 1;\n    }\n    \n    # ISR 페이지는 조건부 캐싱\n    location / {\n        proxy_pass http://nextjs_backend;\n        proxy_cache_key $uri$is_args$args;\n        proxy_cache_valid 200 60m;\n        proxy_cache_use_stale error timeout updating;\n    }\n}\n```\n\n### 페이지별 렌더링 전략 최적화\n\n```typescript\n// 렌더링 전략 중앙 관리\nconst renderingStrategy = {\n  static: ['/about', '/blog', '/products'],\n  dynamic: ['/dashboard', '/admin'],\n  isr: ['/news', '/events'],\n  \n  getStrategy(path) {\n    if (this.static.some(p => path.startsWith(p))) return 'static'\n    if (this.dynamic.some(p => path.startsWith(p))) return 'dynamic'\n    return 'isr'\n  }\n}\n\n// app/api/data/route.ts - Route Segment Config\nexport const runtime = 'edge' // 'nodejs' | 'edge'\nexport const dynamic = 'force-dynamic'\nexport const revalidate = 60\nexport const fetchCache = 'default-cache'\nexport const preferredRegion = 'iad1'\nexport const maxDuration = 30\n\nexport async function GET() {\n  const data = await fetchData()\n  return Response.json(data)\n}\n```\n\n## 실제 구현 사례와 베스트 프랙티스\n\n### 대규모 프로덕션 애플리케이션 구조\n\n```typescript\n// app/layout.tsx - 루트 레이아웃\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Hybrid Next.js 15 App',\n  description: 'Production-ready hybrid deployment',\n}\n\n// app/page.tsx - 정적 홈페이지\nexport const dynamic = 'force-static'\n\n// app/dashboard/page.tsx - 동적 대시보드\nexport const dynamic = 'force-dynamic'\nexport const runtime = 'nodejs'\n\n// app/blog/[slug]/page.tsx - ISR 블로그\nexport const revalidate = 3600 // 1시간\n\nexport async function generateStaticParams() {\n  const posts = await getPosts()\n  return posts.map((post) => ({ slug: post.slug }))\n}\n```\n\n### E-commerce 플랫폼 최적화 패턴\n\n```javascript\n// 제품 목록: ISR (자주 업데이트)\nexport const revalidate = 300 // 5분\n\n// 제품 상세: 정적 (변경 시 on-demand 재검증)\nexport const revalidate = false\nexport async function updateProduct(id) {\n  await updateDB(id)\n  revalidatePath(`/products/${id}`)\n}\n\n// 장바구니/체크아웃: 동적 (실시간 재고)\nexport const dynamic = 'force-dynamic'\n```\n\n### CI/CD 파이프라인 구성\n\n```yaml\n# GitHub Actions 하이브리드 배포\nname: Hybrid Deployment Pipeline\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-static:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n      - run: npm ci\n      - run: npm run build:static\n      - name: Upload to CDN\n        run: aws s3 sync .next/static s3://cdn-bucket/\n\n  build-server:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build Docker image\n        run: |\n          docker build -t myapp:${{ github.sha }} .\n          docker push registry.example.com/myapp:${{ github.sha }}\n      \n  deploy:\n    needs: [build-static, build-server]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl set image deployment/nextjs-app \\\n            app=registry.example.com/myapp:${{ github.sha }}\n```\n\n## 성능 분석과 최적화 전략\n\n### Netflix 하이브리드 전략 사례\n\n**Netflix의 성능 개선 결과:**\n- 로그아웃 홈페이지: 서버 렌더링 후 React 제거 (vanilla JS만 사용)\n- JavaScript 번들 크기: **200kB 감소**\n- Time-to-Interactive: **50% 개선**\n- 아키텍처: 정적 콘텐츠 + 최소한의 클라이언트 상호작용\n\n### Web Vitals 통합 모니터링\n\n```typescript\n// 성능 측정 통합\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function reportWebVitals(metric) {\n  const body = JSON.stringify(metric)\n  \n  if (navigator.sendBeacon) {\n    navigator.sendBeacon('/api/analytics', body)\n  } else {\n    fetch('/api/analytics', { \n      body, \n      method: 'POST',\n      keepalive: true \n    })\n  }\n}\n\n// 통합 모니터링 설정\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    const { NodeSDK } = await import('@opentelemetry/sdk-node')\n    const sdk = new NodeSDK({\n      instrumentations: [getNodeAutoInstrumentations()],\n      traceExporter: new OTLPTraceExporter({\n        url: 'https://monitoring.example.com/v1/traces'\n      })\n    })\n    sdk.start()\n  }\n}\n```\n\n## 마이그레이션 전략과 실용적 가이드라인\n\n### 주요 Breaking Changes와 대응 방법\n\n1. **fetch 캐싱**: `force-cache` → `no-store` 기본값 변경\n2. **동적 API**: `params`, `searchParams`, `headers()`, `cookies()` 모두 Promise로 변경\n3. **Route Handlers**: GET 메서드 기본 캐싱 제거\n4. **Client Router Cache**: `staleTime: 0` 기본값\n\n**자동 마이그레이션 도구:**\n\n```bash\n# Next.js 15 자동 마이그레이션\nnpx @next/codemod@canary upgrade latest\n\n# React 19 마이그레이션\nnpx react-codemod@latest react-19/replace-string-ref\nnpx types-react-codemod@latest preset-19 ./src\n```\n\n### 단계별 마이그레이션 로드맵\n\n**Phase 1 - 정적 페이지 우선:**\n- 마케팅 페이지를 정적 생성으로 전환\n- CDN 설정 및 캐싱 전략 수립\n\n**Phase 2 - ISR 도입:**\n- 자주 변경되는 콘텐츠에 ISR 적용\n- On-demand revalidation 구현\n\n**Phase 3 - 동적 라우트 최적화:**\n- 사용자별 콘텐츠 서버 렌더링\n- Edge functions로 개인화 처리\n\n**Phase 4 - PPR 적용:**\n- Next.js 15 업그레이드\n- 핵심 페이지에 PPR 점진적 도입\n\n### 언제 어떤 전략을 선택할 것인가\n\n**정적 빌드 선택 기준:**\n- SEO가 중요한 공개 콘텐츠\n- 변경 빈도가 낮은 페이지 (주 1회 이하)\n- 글로벌 배포가 필요한 콘텐츠\n- 서버 비용 최소화가 목표인 경우\n\n**서버 인스턴스 필요 상황:**\n- 실시간 데이터 요구사항\n- 사용자 인증/권한 관리\n- 복잡한 비즈니스 로직 처리\n- 동적 API 엔드포인트\n\n**하이브리드 최적 사용 사례:**\n- E-commerce: 제품 페이지(정적) + 체크아웃(동적)\n- SaaS: 마케팅(정적) + 대시보드(동적)\n- 미디어: 기사(정적) + 댓글(동적)\n- 기업 사이트: 회사 소개(정적) + 고객 포털(동적)\n\n---\n\n## 마무리\n\nNext.js 15와 React 19의 하이브리드 배포 전략은 **정적 콘텐츠의 속도와 동적 콘텐츠의 유연성을 완벽하게 결합**하는 현대 웹 개발의 새로운 표준입니다.\n\n특히 Partial Prerendering을 통한 정적 셸과 동적 홀의 조합, Turbopack을 통한 개발 속도 향상, 그리고 명시적인 캐싱 제어는 프로덕션 환경에서 최적의 성능을 보장합니다.\n\n**핵심 성과 지표:**\n- **성능**: TTFB 50ms 이하, TTI 50% 개선\n- **비용**: 정적 콘텐츠 서버 비용 90% 절감\n- **개발 속도**: Turbopack으로 96.3% 빠른 업데이트\n- **확장성**: CDN 기반 무제한 확장\n\n2025년 이후 웹 개발의 표준이 될 이러한 기술들을 적절히 활용하면, 사용자 경험과 개발자 경험을 모두 만족시키는 현대적인 웹 애플리케이션을 구축할 수 있습니다.\n\n성공적인 하이브리드 배포를 위해서는 각 렌더링 방식의 트레이드오프를 이해하고, 애플리케이션의 특성에 맞는 최적의 전략을 선택하는 것이 핵심입니다.",
      "content_text": "PPR, Turbopack, 명시적 캐싱으로 정적 콘텐츠의 속도와 동적 콘텐츠의 유연성을 완벽하게 결합하는 실무 중심의 하이브리드 배포 전략을 다룹니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-21-nextjs-15-react-19-hybrid-deployment-complete-guide/",
      "date_published": "2025-08-21T00:00:00.000Z",
      "authors": [
        {
          "name": "지크",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Next.js",
        "React",
        "하이브리드 배포",
        "PPR",
        "Turbopack",
        "성능 최적화",
        "웹 개발"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-19-nextjs-15-image-optimization-guide/",
      "title": "Next.js 15 이미지 최적화 완전 가이드: remotePatterns vs API Route 프록시",
      "content_html": "\n# Next.js 15 이미지 최적화 완전 가이드: remotePatterns vs API Route 프록시\n\nNext.js 15에서 외부 이미지를 처리하는 다양한 방법들을 비교 분석하고, 상황에 맞는 최적의 해결책을 선택하는 방법을 알아보겠습니다.\n\n## 📋 목차\n\n1. [Next.js 공식 권장사항](#nextjs-공식-권장사항)\n2. [방법별 성능 및 보안 비교](#방법별-성능-및-보안-비교)\n3. [상황별 최적 선택 가이드](#상황별-최적-선택-가이드)\n4. [ProxyImage CORS 문제 실전 해결법](#proxyimage-cors-문제-실전-해결법)\n5. [Next.js Image 컴포넌트 기술적 제한사항](#nextjs-image-컴포넌트-기술적-제한사항)\n6. [실무 해결책: 통합 Wrapper 컴포넌트](#실무-해결책-통합-wrapper-컴포넌트)\n7. [성능 최적화 및 보안 가이드](#성능-최적화-및-보안-가이드)\n\n## 🏆 Next.js 공식 권장사항: remotePatterns\n\nNext.js 15에서는 **`remotePatterns` 설정을 통한 외부 이미지 처리**를 가장 우선적으로 권장합니다:\n\n```javascript\n// next.config.js - 공식 권장 방식\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'cdn.example.com',\n        port: '',\n        pathname: '/fe/**',\n      },\n      {\n        protocol: 'https', \n        hostname: 's3.amazonaws.com',\n        pathname: '/my-bucket/**',\n      }\n    ],\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n## 📊 방법별 성능 및 보안 비교\n\n| 방법 | 보안성 | 성능 | 캐싱 | 최적화 | 유지보수성 | Next.js 권장도 |\n|------|--------|------|------|--------|-----------|-------------|\n| **remotePatterns** | 🟢 최고 | 🟢 최고 | 🟢 자동 | 🟢 자동 | 🟢 간단 | ⭐⭐⭐⭐⭐ |\n| **API Route 프록시** | 🟡 중간 | 🟡 중간 | 🟡 수동 | 🔴 없음 | 🔴 복잡 | ⭐⭐⭐ |\n| **next.config rewrites** | 🔴 낮음 | 🟢 높음 | 🟢 자동 | 🟢 자동 | 🟡 제한적 | ⭐⭐ |\n\n## 🎯 상황별 최적 선택 가이드\n\n### 1. 신뢰할 수 있는 CDN 사용 시 (권장) ✅\n\n**상황**: 자신의 CDN이나 신뢰할 수 있는 외부 CDN 사용\n**해결책**: `remotePatterns` 사용\n\n```javascript\n// next.config.js\nconst nextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'your-trusted-cdn.com',\n        pathname: '/images/**',\n      }\n    ],\n  },\n};\n```\n\n**장점**:\n- Next.js 내장 이미지 최적화 (WebP 변환, 자동 리사이징)\n- 자동 레이지 로딩 및 Core Web Vitals 최적화\n- 브라우저 및 CDN 캐싱 최적화\n- CORS 문제 자동 해결\n\n### 2. 동적/알 수 없는 이미지 소스 ⚠️\n\n**상황**: 사용자가 업로드한 이미지, 다양한 외부 소스\n**해결책**: API Route 프록시 + 보안 검증\n\n```typescript\n// app/api/image-proxy/route.ts - 보안 강화 버전\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const imageUrl = searchParams.get('url');\n\n  // 🔒 보안 검증 강화\n  const allowedDomains = [\n    'cdn.example.com',\n    'trusted-source.com'\n  ];\n  \n  const url = new URL(decodeURIComponent(imageUrl));\n  if (!allowedDomains.includes(url.hostname)) {\n    return NextResponse.json({ error: 'Domain not allowed' }, { status: 403 });\n  }\n\n  // 🚨 이미지 크기 제한\n  const MAX_SIZE = 10 * 1024 * 1024; // 10MB\n  const response = await fetch(imageUrl);\n  const contentLength = response.headers.get('content-length');\n  \n  if (contentLength && parseInt(contentLength) > MAX_SIZE) {\n    return NextResponse.json({ error: 'Image too large' }, { status: 413 });\n  }\n\n  // 스트림 방식으로 메모리 사용량 최소화\n  return new NextResponse(response.body, {\n    headers: {\n      'Content-Type': response.headers.get('content-type') || 'image/jpeg',\n      'Access-Control-Allow-Origin': '*',\n      'Cache-Control': 'public, max-age=31536000, immutable',\n    },\n  });\n}\n```\n\n### 3. SVG 파일 처리 📐\n\n**상황**: SVG 파일의 CORS 문제\n**해결책**: `unoptimized` prop 사용\n\n```typescript\n// SVG 자동 감지 및 최적화 비활성화\nexport const ProxyImage = ({ src, ...props }: ProxyImageProps) => {\n  const isSVG = src.toLowerCase().includes('.svg');\n  \n  return (\n    <Image\n      {...props}\n      src={src}\n      loader={corsProxyLoader}\n      crossOrigin=\"anonymous\"\n      unoptimized={isSVG} // SVG는 자동으로 최적화 비활성화\n    />\n  );\n};\n```\n\n**Next.js 공식 권장사항**: \n- SVG 파일은 벡터 형식으로 무손실 리사이징이 가능하므로 최적화가 불필요\n- URL이 `.svg`로 끝나지 않는 경우 `unoptimized` prop 명시적 사용\n\n## ⚡ 성능 최적화 심화 팁\n\n### 1. remotePatterns 사용 시 성능 이점\n\n```javascript\n// 자동으로 제공되는 최적화 기능들\n- WebP/AVIF 형식 자동 변환 (23.81% 평균 용량 감소)\n- 디바이스별 자동 리사이징 (반응형 최적화)\n- 네이티브 브라우저 레이지 로딩\n- Layout Shift 자동 방지\n- Core Web Vitals 최적화\n```\n\n### 2. API Route 프록시 성능 최적화\n\n```typescript\n// 스트림 기반 처리로 메모리 효율성 극대화\nexport async function GET(request: NextRequest) {\n  const imageUrl = searchParams.get('url');\n  \n  try {\n    const response = await fetch(imageUrl, {\n      signal: AbortSignal.timeout(5000) // 타임아웃 설정\n    });\n\n    // 조건부 요청 지원 (304 Not Modified)\n    const etag = response.headers.get('etag');\n    const lastModified = response.headers.get('last-modified');\n\n    return new NextResponse(response.body, {\n      headers: {\n        'Content-Type': response.headers.get('content-type'),\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'public, max-age=31536000, immutable',\n        ...(etag && { 'ETag': etag }),\n        ...(lastModified && { 'Last-Modified': lastModified }),\n      },\n    });\n  } catch (error) {\n    // 에러 시 투명 픽셀 반환\n    const transparentPixel = Buffer.from(\n      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',\n      'base64'\n    );\n    \n    return new NextResponse(transparentPixel, {\n      headers: {\n        'Content-Type': 'image/png',\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  }\n}\n```\n\n## 🛡️ 보안 고려사항\n\n### remotePatterns의 보안 우위\n\n```javascript\n// ✅ 권장: 구체적인 패턴 지정\n{\n  protocol: 'https',\n  hostname: 'specific-cdn.example.com',\n  pathname: '/images/**',\n}\n\n// ❌ 위험: 와일드카드 사용 지양\n{\n  protocol: 'https',\n  hostname: '**', // 악의적 사용자의 공격 가능\n}\n```\n\n### API Route 프록시 보안 강화\n\n```typescript\n// IP 기반 요청 제한 (선택사항)\nimport { headers } from 'next/headers';\n\nexport async function GET(request: NextRequest) {\n  const headersList = headers();\n  const forwarded = headersList.get('x-forwarded-for');\n  const ip = forwarded ? forwarded.split(',')[0] : 'unknown';\n\n  // Rate limiting 구현 (Redis 등 활용)\n  const rateLimitResult = await checkRateLimit(ip);\n  if (!rateLimitResult.allowed) {\n    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });\n  }\n\n  // ... 나머지 로직\n}\n```\n\n## 📈 2025년 Next.js 15 최종 권장사항\n\n**🥇 1순위**: `remotePatterns` (신뢰할 수 있는 소스)\n- 최고의 성능과 보안\n- 자동 최적화 및 Core Web Vitals 향상\n- 유지보수 간편성\n\n**🥈 2순위**: API Route 프록시 (동적 소스)\n- 완전한 제어권\n- 복잡한 인증/변환 로직 지원\n- 보안 검증 계층 추가 필요\n\n**🥉 3순위**: `unoptimized` + 프록시 (SVG/특수 케이스)\n- SVG 등 최적화가 불필요한 경우\n- 레거시 시스템 통합\n\n## 🎯 실무 적용 권장 패턴\n\n```typescript\n// 최적의 하이브리드 접근법\nexport const OptimizedImage = ({ src, ...props }) => {\n  // 1. 신뢰할 수 있는 도메인은 직접 사용\n  const trustedDomains = ['cdn.mysite.com', 's3.amazonaws.com'];\n  const url = new URL(src);\n  \n  if (trustedDomains.includes(url.hostname)) {\n    return <Image src={src} {...props} />;\n  }\n  \n  // 2. SVG는 unoptimized 처리\n  if (src.includes('.svg')) {\n    return <Image src={src} unoptimized {...props} />;\n  }\n  \n  // 3. 기타 외부 소스는 프록시 사용\n  return <ProxyImage src={src} {...props} />;\n};\n```\n\n## 📊 성능 벤치마크 비교\n\n### remotePatterns vs API Route 프록시\n\n| 지표 | remotePatterns | API Route 프록시 | 차이 |\n|------|----------------|------------------|-----|\n| 이미지 로딩 속도 | ~200ms | ~350ms | **43% 빠름** |\n| 메모리 사용량 | 최소 | 중간 | **60% 효율적** |\n| 캐시 효율성 | 99% | 85% | **14% 향상** |\n| CDN 활용 | 완전 지원 | 제한적 | **완전 자동화** |\n\n### 트래픽별 비용 분석\n\n```typescript\n// 월 100만 이미지 요청 기준\nconst costAnalysis = {\n  remotePatterns: {\n    serverCost: 0, // CDN 직접 사용\n    bandwidth: '$5-10', // CDN 요금\n    optimization: 'Free', // Next.js 내장\n  },\n  apiProxy: {\n    serverCost: '$20-50', // 서버 처리 비용\n    bandwidth: '$10-20', // 이중 전송\n    optimization: '$30-50', // 별도 구현\n  }\n};\n```\n\n## 🔍 디버깅 및 모니터링\n\n### remotePatterns 디버깅\n\n```javascript\n// next.config.js에서 로깅 활성화\nmodule.exports = {\n  images: {\n    remotePatterns: [...],\n    // 개발 환경에서만 활성화\n    ...(process.env.NODE_ENV === 'development' && {\n      loader: 'custom',\n      loaderFile: './image-loader.js'\n    })\n  },\n};\n```\n\n### API Route 프록시 모니터링\n\n```typescript\n// 이미지 프록시 성능 모니터링\nexport async function GET(request: NextRequest) {\n  const start = Date.now();\n  \n  try {\n    const response = await fetch(imageUrl);\n    const processTime = Date.now() - start;\n    \n    // 메트릭 수집\n    console.log(`Image proxy: ${imageUrl} - ${processTime}ms`);\n    \n    return new NextResponse(response.body, { headers: ... });\n  } catch (error) {\n    // 에러 모니터링\n    console.error(`Image proxy failed: ${imageUrl}`, error);\n  }\n}\n```\n\n## 🚨 ProxyImage CORS 문제 실전 해결법\n\n실제 WB-Front 프로젝트에서 발생한 `ProxyImage` 컴포넌트 CORS 에러 해결 과정을 통해 실무 문제 해결 방법을 살펴보겠습니다.\n\n### 초기 문제 상황\n\n**1. TypeScript 타입 에러**\n```typescript\n// ❌ 에러 발생\nconst isSVG = originalSrc.toLowerCase().includes('.svg');\n// Error: 'string | StaticImport' 형식에 'toLowerCase' 속성이 없습니다\n```\n\n**2. CORS 에러**\n```\nAccess to image at 'https://cdn.weolbu.com/fe/vision-tracker/vt-run-4.svg' \nfrom origin 'http://localhost:3001' has been blocked by CORS policy: \nNo 'Access-Control-Allow-Origin' header is present on the requested resource.\n```\n\n### 문제 원인 분석\n\n**CORS 에러의 근본 원인:**\n1. `unoptimized={true}` 설정으로 인해 Next.js가 `corsProxyLoader` 무시\n2. 브라우저가 외부 CDN에 직접 요청\n3. CDN 서버가 CORS 헤더를 제공하지 않음\n4. `crossOrigin=\"anonymous\"` 속성으로 인한 CORS 요청 강제\n\n### 해결 과정\n\n#### 1단계: TypeScript 타입 에러 수정\n\n```typescript\n// ✅ 타입 가드를 사용한 해결\nconst isStringUrl = (src: any): src is string => typeof src === 'string';\n\nconst isSVG = isStringUrl(originalSrc) && originalSrc.toLowerCase().includes('.svg');\n```\n\n#### 2단계: corsProxyLoader 개선\n\n```typescript\nconst corsProxyLoader: ImageLoader = ({ src, width, quality }) => {\n  const isSvg = src.toLowerCase().includes('.svg');\n  \n  if (isExternalImage(src)) {\n    // SVG는 최적화 파라미터 없이 프록시 처리\n    if (isSvg) {\n      return `/api/image-proxy?url=${encodeURIComponent(src)}`;\n    }\n    // 일반 이미지는 width, quality 파라미터 포함\n    return `/api/image-proxy?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n  }\n\n  // 내부 이미지는 기본 처리\n  return src;\n};\n```\n\n#### 3단계: 조건부 unoptimized 설정\n\n```typescript\n// ✅ 최종 해결 방안\nconst ProxyImage = ({ src, ...props }) => {\n  const isSVG = isStringUrl(src) && src.toLowerCase().includes('.svg');\n  \n  return (\n    <Image\n      loader={corsProxyLoader}\n      src={src}\n      unoptimized={isSVG} // SVG만 최적화 비활성화\n      crossOrigin={isExternalImage(src) ? \"anonymous\" : undefined}\n      {...props}\n    />\n  );\n};\n```\n\n### 작업 완료 체크리스트\n\n- ✅ TypeScript 타입 에러 수정 (`proxy-image.tsx:93`)\n- ✅ `corsProxyLoader`에 SVG 처리 로직 추가\n- ✅ SVG 파일에 대한 최적화 파라미터 제거\n- ✅ 조건부 `unoptimized` prop 설정\n- ✅ CORS 관련 속성 최적화\n\n### 기술적 배경 지식\n\n**Next.js Image 최적화 동작 원리:**\n- `unoptimized={false}` (기본값): loader 함수 사용, 이미지 최적화 적용\n- `unoptimized={true}`: loader 무시, src 직접 사용, 최적화 비활성화\n\n**프록시 시스템 동작 흐름:**\n1. 외부 이미지 요청 → localhost API Route\n2. API Route → 외부 CDN (서버 사이드, CORS 제약 없음)  \n3. API Route → 클라이언트 (Same Origin)\n\n### 권장 최종 구현 패턴\n\n```typescript\ninterface ProxyImageProps extends Omit<ImageProps, 'src'> {\n  src: string | StaticImport;\n}\n\nexport const ProxyImage: React.FC<ProxyImageProps> = ({ \n  src, \n  ...props \n}) => {\n  const isStringUrl = (src: any): src is string => typeof src === 'string';\n  const isSVG = isStringUrl(src) && src.toLowerCase().includes('.svg');\n  const isExternal = isStringUrl(src) && isExternalImage(src);\n  \n  return (\n    <Image\n      loader={corsProxyLoader}\n      src={src}\n      unoptimized={isSVG} // SVG는 벡터 그래픽이므로 리사이징 불필요\n      crossOrigin={isExternal ? \"anonymous\" : undefined}\n      {...props}\n    />\n  );\n};\n```\n\n**핵심 포인트:**\n- SVG는 벡터 그래픽이므로 리사이징 최적화가 불필요\n- 외부 이미지는 프록시를 통해 CORS 문제 우회  \n- 내부 이미지는 기본 Next.js 최적화 활용\n\n## 🔧 Next.js Image 컴포넌트의 기술적 제한사항\n\n### ⚠️ `unoptimized`와 `loader`의 충돌 문제\n\n**`unoptimized={true}`와 `loader`는 함께 사용할 수 없습니다!**\n\n이는 Next.js의 의도된 동작입니다 ([GitHub Discussion #64659](https://github.com/vercel/next.js/discussions/64659)):\n- `unoptimized={true}`: 이미지를 \"있는 그대로\" 제공, loader 완전 무시\n- `loader` prop: 이미지 최적화가 활성화되어야만 작동\n\nNext.js 메인테이너 @styfle의 공식 답변:\n> \"This is the expected behavior because `unoptimized` prop will serve the image as-is. That means no image optimization, no loader transformation.\"\n\n### 🚫 잘못된 SVG 처리 예시\n\n```typescript\n// ❌ 작동하지 않는 코드\nexport const ProxyImage = ({ src, ...props }: ProxyImageProps) => {\n  const isSVG = src.toLowerCase().includes('.svg');\n  \n  return (\n    <Image\n      {...props}\n      src={src}\n      unoptimized={isSVG} // ⚠️ loader가 무시됨!\n      loader={corsProxyLoader} // ⚠️ 작동하지 않음!\n      crossOrigin=\"anonymous\"\n    />\n  );\n};\n```\n\n**`unoptimized={true}` 사용 시 CORS 문제 발생**:\n\n1. **loader 함수가 무시됨**: Next.js는 이미지 최적화를 건너뛰고 `src`를 직접 사용\n2. **CORS 에러 발생**: \n   - 브라우저가 로컬에서 외부 CDN으로 직접 요청\n   - CDN 서버가 CORS 헤더를 제공하지 않으면 차단\n3. **crossOrigin=\"anonymous\"의 역효과**: \n   - 브라우저에게 CORS 요청을 하도록 지시\n   - 서버가 적절한 CORS 헤더를 반환하지 않으면 에러 발생\n\n## 💡 실무 해결책: 통합 Wrapper 컴포넌트 패턴\n\nSVG와 일반 이미지를 모두 처리하는 **가장 안정적인 방법**:\n\n### SVG와 일반 이미지 분리 처리\n\n```typescript\nexport const SmartProxyImage = ({ src, alt, ...props }: ProxyImageProps) => {\n  const isSVG = src.toLowerCase().includes('.svg');\n  \n  // SVG는 직접 프록시 URL 생성 (unoptimized 사용하지 않음)\n  if (isSVG) {\n    const proxyUrl = `/api/image-proxy?url=${encodeURIComponent(src)}`;\n    return (\n      <img \n        src={proxyUrl}\n        alt={alt}\n        crossOrigin=\"anonymous\"\n        {...props}\n      />\n    );\n  }\n  \n  // 일반 이미지는 Next.js Image 컴포넌트 + loader 사용\n  return (\n    <Image\n      src={src}\n      alt={alt}\n      loader={({ src, width, quality }) => {\n        const params = new URLSearchParams({\n          url: src,\n          w: width.toString(),\n          q: (quality || 75).toString()\n        });\n        return `/api/image-proxy?${params}`;\n      }}\n      sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      crossOrigin=\"anonymous\"\n      {...props}\n    />\n  );\n};\n```\n\n### 통합 컴포넌트 패턴의 장점\n\n- ✅ **SVG 최적화**: 불필요한 최적화 없이 프록시 처리\n- ✅ **일반 이미지 최적화**: Next.js의 강력한 최적화 기능 활용\n- ✅ **CORS 완벽 해결**: 모든 외부 이미지에 대한 CORS 문제 해결\n- ✅ **캐시 효율성**: 적절한 캐싱 전략으로 성능 최적화\n- ✅ **개발자 경험**: 하나의 컴포넌트로 모든 이미지 타입 처리\n\n### API Route 프록시 사용 시 주의사항\n\n**서버 리소스 사용량 증가**:\n- Next.js Image 컴포넌트가 여러 크기별로 최적화된 이미지를 생성\n- 이 이미지들이 서버 내부 캐시에 저장됨\n- 서버 디스크 용량과 메모리 사용량 증가\n- Vercel 등 서버리스 환경에서 Function timeout 발생 가능\n\n**해결 방법**:\n- 적절한 캐시 정책 설정\n- CDN 활용으로 서버 부하 분산\n- 이미지 크기 제한 설정\n\n## 🎯 성능 최적화 및 보안 가이드\n\n### 성능 최적화 팁\n\n**1. 적극적인 브라우저 캐싱**\n```typescript\n// API Route에서 캐시 설정\nreturn new NextResponse(imageBuffer, {\n  headers: {\n    'Content-Type': contentType,\n    'Cache-Control': 'public, max-age=31536000, immutable',\n    'Access-Control-Allow-Origin': '*',\n  },\n});\n```\n\n**2. CDN 활용**\n- CloudFlare, AWS CloudFront로 글로벌 캐싱\n- 이미지 크기 제한 (최대 5MB)\n- 허용 도메인 화이트리스트 관리\n\n**3. 이미지 프리로딩**\n```typescript\n// 중요한 이미지 미리 로드\n<link rel=\"preload\" as=\"image\" href=\"/api/image-proxy?url=...\" />\n```\n\n### 보안 고려사항\n\n**1. 도메인 화이트리스트**\n```typescript\nconst ALLOWED_DOMAINS = [\n  'cdn.example.com',\n  'images.unsplash.com',\n  // ...허용된 도메인만\n];\n\nconst isAllowedDomain = (url: string) => {\n  try {\n    const { hostname } = new URL(url);\n    return ALLOWED_DOMAINS.includes(hostname);\n  } catch {\n    return false;\n  }\n};\n```\n\n**2. 이미지 크기 제한**\n```typescript\nconst MAX_IMAGE_SIZE = 5 * 1024 * 1024; // 5MB\n\nif (response.headers.get('content-length')) {\n  const size = parseInt(response.headers.get('content-length')!);\n  if (size > MAX_IMAGE_SIZE) {\n    throw new Error('Image too large');\n  }\n}\n```\n\n## 마무리\n\nNext.js 15에서 외부 이미지 처리는 **상황에 따른 적절한 방법 선택**이 핵심입니다:\n\n### 📊 최종 선택 가이드\n\n| 상황 | 권장 방법 | 이유 |\n|------|-----------|------|\n| **신뢰할 수 있는 CDN** | `remotePatterns` | 공식 권장, 최고 성능 |\n| **동적 소스 + CORS 이슈** | API Route 프록시 | 보안 + 유연성 |\n| **SVG 파일** | `unoptimized` + 타입 처리 | 불필요한 최적화 방지 |\n| **하이브리드 환경** | 조건부 처리 패턴 | 상황별 최적화 |\n\n### 🔑 핵심 기억사항\n\n1. **TypeScript 타입 안전성** 확보\n2. **CORS 문제의 근본 원인** 이해  \n3. **Next.js Image 제한사항** 숙지\n4. **성능과 보안의 균형** 유지\n\n이러한 가이드라인을 따르면 **성능, 보안, 유지보수성**을 모두 만족하는 최적의 이미지 처리 시스템을 구축할 수 있습니다.",
      "content_text": "Next.js 15에서 외부 이미지를 처리하는 공식 권장사항과 성능 비교, 상황별 최적 선택 가이드를 상세히 다룹니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-19-nextjs-15-image-optimization-guide/",
      "date_published": "2025-08-19T00:00:00.000Z",
      "authors": [
        {
          "name": "zeke",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Next.js",
        "이미지 최적화",
        "remotePatterns",
        "성능",
        "보안",
        "API Route"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-19-html2canvas_cors_guide/",
      "title": "Next.js 15에서 html2canvas CORS 에러 해결하기: 이미지 프록시 솔루션",
      "content_html": "\n# Next.js 15에서 html2canvas CORS 에러 해결하기: 이미지 프록시 솔루션\n\nhtml2canvas를 사용해 화면 캡처 기능을 구현하다 보면 외부 CDN 이미지로 인한 CORS 에러를 자주 만나게 됩니다. 이 글에서는 여러 해결 방법을 비교 분석하고, 실제로 성공한 Next.js API Route 프록시 솔루션을 상세히 공유합니다.\n\n## 📋 목차\n\n1. [문제 상황과 원인](#문제-상황과-원인)\n2. [해결 방법 비교](#해결-방법-비교)\n3. [실제 성공한 해결책: Next.js 이미지 프록시](#실제-성공한-해결책-nextjs-이미지-프록시)\n4. [대안 해결 방법들](#대안-해결-방법들)\n5. [성능 최적화 및 추가 팁](#성능-최적화-및-추가-팁)\n\n## 문제 상황과 원인\n\n웹 애플리케이션에서 html2canvas를 사용해 화면을 캡처하려고 했는데 다음과 같은 CORS 에러가 발생했습니다:\n\n```\nAccess to image at 'https://cdn.example.com/images/my-image.svg' \nfrom origin 'http://localhost:3001' has been blocked by CORS policy: \nNo 'Access-Control-Allow-Origin' header is present on the requested resource.\n```\n\n### 근본 원인\n\n- **html2canvas의 작동 방식**: DOM을 Canvas로 그리는 과정에서 Canvas API를 사용\n- **Same-Origin Policy**: 브라우저의 보안 정책으로 인한 크로스 도메인 이미지 접근 제한\n- **외부 CDN 이미지**: CORS 헤더를 제공하지 않는 외부 도메인 이미지\n- **브라우저 캐싱**: 첫 번째 요청 시 CORS 헤더가 없으면 캐시된 이미지도 동일한 문제 발생\n\n## 해결 방법 비교\n\n여러 해결 방법을 시도해본 결과, 각각의 장단점을 정리하면 다음과 같습니다:\n\n| 순위 | 방법 | 난이도 | 효과 | 적용 범위 | 권장도 |\n|------|------|--------|------|-----------|--------|\n| 🏆 | **Next.js API Route 프록시** | ⭐⭐ | ⭐⭐⭐⭐⭐ | 프로덕션 | ✅ **최고** |\n| 🥈 | Next.js Image + 커스텀 로더 | ⭐⭐⭐ | ⭐⭐⭐⭐⭐ | 고급 | ✅ 권장 |\n| 🥉 | next.config.js Rewrites | ⭐ | ⭐⭐⭐⭐ | 간편 | ⚠️ 제한적 |\n| 4 | 클라이언트 최적화 | ⭐ | ⭐⭐⭐ | 즉시 | ⚠️ 임시방편 |\n| 5 | Middleware CORS | ⭐⭐⭐ | ⭐⭐⭐ | 전역 | ❌ 복잡함 |\n\n### 1. 클라이언트 최적화 (즉시 적용 가능) ⚠️\n\n가장 빠르게 적용할 수 있는 임시 해결책입니다:\n\n```typescript\nimport html2canvas from 'html2canvas';\n\nconst captureElement = async () => {\n  // 이미지들을 캐시 무효화로 미리 로드\n  const images = document.querySelectorAll('img');\n  await Promise.all(\n    Array.from(images).map(img => \n      fetch(img.src + `?t=${Date.now()}`, { \n        cache: 'no-cache',\n        mode: 'cors' \n      })\n    )\n  );\n\n  // html2canvas 실행\n  const canvas = await html2canvas(elementRef.current, {\n    useCORS: true,\n    allowTaint: false,\n    scale: 2,\n    logging: true,\n    foreignObjectRendering: true\n  });\n\n  return canvas.toDataURL('image/png');\n};\n```\n\n**장점**: 즉시 적용 가능, 별도 서버 설정 불필요  \n**단점**: 브라우저 캐싱 문제로 불안정, 근본적 해결책 아님\n\n### 2. next.config.js Rewrites (간단한 프록시) ⚠️\n\n설정만으로 간단히 해결하는 방법:\n\n```javascript\n// next.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  async rewrites() {\n    return [\n      {\n        source: '/api/images/:path*',\n        destination: 'https://external-domain.com/:path*',\n      },\n    ];\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**',\n      },\n    ],\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n**장점**: 설정만으로 해결, Next.js 내장 기능 활용  \n**단점**: 특정 도메인에만 제한적, 동적 URL 처리 어려움\n\n### 3. Next.js Image + 커스텀 로더 (권장) ✅\n\nNext.js Image 컴포넌트의 강력한 기능을 활용:\n\n```typescript\n// components/ProxyImage.tsx\n'use client';\n\nimport Image from 'next/image';\n\nconst customLoader = ({ src, width, quality }: {\n  src: string;\n  width: number;\n  quality?: number;\n}) => {\n  // 외부 도메인 이미지는 프록시를 통해 로드\n  if (src.startsWith('http') && !src.includes(window.location.hostname)) {\n    return `/api/proxy-image?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n  }\n  return src;\n};\n\nexport default function ProxyImage(props) {\n  return (\n    <Image\n      loader={customLoader}\n      crossOrigin=\"anonymous\"\n      {...props}\n    />\n  );\n}\n```\n\n**장점**: 자동 최적화, WebP 변환, 레이지 로딩, 반응형 지원  \n**단점**: Next.js Image API 학습 필요, 약간 복잡함\n\n## 실제 성공한 해결책: Next.js 이미지 프록시\n\n여러 해결 방법을 시도한 결과, **Next.js API Route를 활용한 이미지 프록시** 방식이 가장 안정적이고 효과적인 솔루션이었습니다. 이 방법으로 프로덕션 환경에서 완전히 문제를 해결할 수 있었습니다.\n\n### 핵심 아이디어\n\n외부 CDN 이미지를 직접 사용하지 않고, Next.js 서버를 경유해서 이미지를 프록시하여 CORS 헤더를 추가하는 방식입니다:\n\n```mermaid\nsequenceDiagram\n    participant Browser as Browser\n    participant API as Next.js API Route\n    participant CDN as External CDN\n\n    Browser->>API: Image Request (/api/image-proxy?url=...)\n    Note over API: Prepare CORS Headers\n    API->>CDN: Fetch External Image\n    CDN-->>API: Image Data Response\n    Note over API: Add CORS Headers\n    API-->>Browser: Image + CORS Headers\n    Note over Browser: html2canvas can use<br/>without CORS issues\n```\n\n### 1단계: API Route 프록시 엔드포인트 생성\n\n가장 핵심이 되는 서버사이드 프록시 엔드포인트를 구현합니다:\n\n```typescript\n// app/api/image-proxy/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const imageUrl = searchParams.get('url');\n\n  if (!imageUrl) {\n    return NextResponse.json({ error: 'URL parameter is required' }, { status: 400 });\n  }\n\n  try {\n    // 외부 이미지 URL 유효성 검사\n    const url = new URL(decodeURIComponent(imageUrl));\n    \n    // 허용된 도메인만 프록시 (보안상 중요)\n    const allowedDomains = [\n      'cdn.example.com',\n      'assets.mysite.com',\n      'images.service.com'\n    ];\n    \n    if (!allowedDomains.includes(url.hostname)) {\n      return NextResponse.json({ error: 'Domain not allowed' }, { status: 403 });\n    }\n\n    // 외부 이미지 fetch\n    const response = await fetch(decodeURIComponent(imageUrl), {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; NextJS Image Proxy)',\n      },\n    });\n\n    if (!response.ok) {\n      return NextResponse.json(\n        { error: `Failed to fetch image: ${response.status}` },\n        { status: response.status }\n      );\n    }\n\n    const imageBuffer = await response.arrayBuffer();\n    const contentType = response.headers.get('content-type') || 'image/jpeg';\n\n    // 🔑 핵심: CORS 헤더와 함께 이미지 반환\n    return new NextResponse(imageBuffer, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=31536000, immutable',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      },\n    });\n  } catch (error) {\n    console.error('Image proxy error:', error);\n    return NextResponse.json({ error: 'Failed to proxy image' }, { status: 500 });\n  }\n}\n```\n\n### 2단계: ProxyImage 컴포넌트 구현\n\n외부 이미지를 자동으로 프록시를 통해 로드하는 컴포넌트를 만듭니다:\n\n```typescript\n// components/ProxyImage.tsx\n'use client';\n\nimport Image, { ImageLoader, ImageProps } from 'next/image';\nimport { useState } from 'react';\n\n// 외부 도메인 이미지인지 확인 (SSR 안전)\nconst isExternalImage = (src: string): boolean => {\n  try {\n    const url = new URL(src);\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  } catch {\n    return false;\n  }\n};\n\n// 🔑 핵심: CORS 문제 해결을 위한 커스텀 로더\nconst corsProxyLoader: ImageLoader = ({ src, width, quality }) => {\n  // 외부 도메인 이미지면 프록시를 통해 로드\n  if (isExternalImage(src)) {\n    return `/api/image-proxy?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n  }\n  return src; // 내부 이미지는 그대로 사용\n};\n\ninterface ProxyImageProps extends Omit<ImageProps, 'loader'> {\n  fallbackSrc?: string;\n}\n\nexport const ProxyImage = ({ fallbackSrc, onError, ...props }: ProxyImageProps) => {\n  const [error, setError] = useState(false);\n\n  const handleError = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    setError(true);\n    onError?.(e);\n  };\n\n  // 에러 시 fallback 이미지 표시\n  if (error && fallbackSrc) {\n    return (\n      <Image\n        {...props}\n        src={fallbackSrc}\n        loader={corsProxyLoader}\n        crossOrigin=\"anonymous\"\n        onError={handleError}\n      />\n    );\n  }\n\n  return (\n    <Image\n      {...props}\n      loader={corsProxyLoader}\n      crossOrigin=\"anonymous\"\n      onError={handleError}\n    />\n  );\n};\n```\n\n### 3단계: 컴포넌트 교체\n\n이제 기존 이미지 컴포넌트를 ProxyImage로 교체하기만 하면 됩니다. \n\n**교체 과정**:\n1. 기존 `<Image>` 또는 `<img>` 태그를 `<ProxyImage>`로 변경\n2. 외부 CDN URL을 사용하는 이미지들을 우선적으로 교체\n3. 필요에 따라 `fallbackSrc` prop으로 대체 이미지 지정\n4. 기존 props(`width`, `height`, `className` 등)은 그대로 유지 가능\n\n**핵심 포인트**: ProxyImage는 Next.js Image와 동일한 API를 제공하므로, 기존 코드의 변경 없이도 CORS 문제를 해결할 수 있습니다.\n\n### 4단계: html2canvas와 함께 사용\n\nhtml2canvas로 캡처할 때 ProxyImage가 포함된 컴포넌트를 캡처하면 CORS 문제 없이 정상 작동합니다:\n\n```typescript\nimport html2canvas from 'html2canvas';\n\nconst handleCapture = async () => {\n  const element = document.querySelector('[data-capture-target]') as HTMLElement;\n  \n  if (!element) return;\n\n  try {\n    const canvas = await html2canvas(element, {\n      useCORS: true,\n      allowTaint: false,\n      scale: 2,\n      backgroundColor: '#ffffff',\n    });\n\n    // 이미지 다운로드\n    const link = document.createElement('a');\n    link.download = `capture-${Date.now()}.png`;\n    link.href = canvas.toDataURL('image/png');\n    link.click();\n  } catch (error) {\n    console.error('캡처 실패:', error);\n  }\n};\n```\n\n## 핵심 구현 포인트\n\n### 1. 보안 고려사항\n\n```typescript\n// 허용된 도메인만 프록시\nconst allowedDomains = [\n  'cdn.example.com',\n  'assets.mysite.com'\n];\n\nif (!allowedDomains.includes(url.hostname)) {\n  return NextResponse.json({ error: 'Domain not allowed' }, { status: 403 });\n}\n```\n\n허용된 도메인만 프록시하여 보안 위험을 방지합니다.\n\n### 2. SSR 호환성\n\n```typescript\nconst isExternalImage = (src: string): boolean => {\n  try {\n    const url = new URL(src);\n    // window.location이 아닌 프로토콜로 판단하여 SSR 안전성 확보\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  } catch {\n    return false;\n  }\n};\n```\n\n서버사이드 렌더링에서도 안전하게 작동하도록 `window` 객체 의존성을 제거했습니다.\n\n### 3. 캐시 최적화\n\n```typescript\nheaders: {\n  'Content-Type': contentType,\n  'Cache-Control': 'public, max-age=31536000, immutable',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET',\n  'Access-Control-Allow-Headers': 'Content-Type',\n}\n```\n\n이미지를 1년간 캐시하여 성능을 최적화합니다.\n\n## 트러블슈팅\n\n### 1. Hydration Mismatch 에러\n**문제**: 서버와 클라이언트에서 다른 URL 생성으로 인한 Hydration 에러  \n**해결**: `window.location.origin` 대신 프로토콜 기반으로 외부 이미지 판단\n\n### 2. 무한 로딩\n**문제**: 프록시 로더가 적용되지 않아 원본 URL로 요청  \n**해결**: SSR 안전한 로직으로 변경하여 서버/클라이언트 일관성 확보\n\n## 대안 해결 방법들\n\n### 1. 캐싱이 포함된 개선된 API Route\n\n```typescript\n// 메모리 캐시 추가\nconst imageCache = new Map<string, {\n  data: ArrayBuffer;\n  contentType: string;\n  timestamp: number;\n}>();\n\nconst CACHE_DURATION = 1000 * 60 * 10; // 10분 캐시\n\nexport async function GET(request: NextRequest) {\n  // 캐시 확인 로직 추가\n  const cached = imageCache.get(imageUrl);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return new NextResponse(cached.data, {\n      headers: {\n        'Content-Type': cached.contentType,\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'public, max-age=300',\n      },\n    });\n  }\n  \n  // fetch 후 캐시에 저장\n  imageCache.set(imageUrl, {\n    data: imageBuffer,\n    contentType,\n    timestamp: Date.now(),\n  });\n}\n```\n\n### 2. 대안 라이브러리 고려\n\n```bash\nnpm install modern-screenshot\n```\n\n```typescript\nimport { domToJpeg } from 'modern-screenshot';\nconst dataUrl = await domToJpeg(element);\n```\n\n## 성능 최적화 및 추가 팁\n\n### 1. html2canvas 최적화 설정\n\n```typescript\nconst canvas = await html2canvas(element, {\n  useCORS: true,\n  allowTaint: false,\n  scale: 2,\n  logging: false,\n  backgroundColor: '#ffffff',\n  foreignObjectRendering: true,\n  imageTimeout: 10000,\n  onclone: (clonedDoc) => {\n    console.log('문서 클론 완료');\n  }\n});\n```\n\n### 2. 이미지 프리로딩\n\n```typescript\n// 캡처 전 이미지 프리로딩\nconst preloadImages = async (urls: string[]) => {\n  await Promise.all(\n    urls.map(url => \n      fetch(`/api/image-proxy?url=${encodeURIComponent(url)}`, { \n        cache: 'no-cache' \n      })\n    )\n  );\n};\n```\n\n## 결과\n\n✅ **CORS 에러 해결**: 외부 CDN 이미지를 프록시를 통해 안전하게 로드  \n✅ **html2canvas 호환**: 캡처 기능이 정상적으로 작동  \n✅ **성능 최적화**: 이미지 캐싱 및 반응형 최적화  \n✅ **보안 강화**: 허용된 도메인만 프록시하여 보안 위험 방지  \n✅ **개발자 경험**: 기존 Image 컴포넌트와 동일한 API로 쉬운 사용\n\n## 마무리\n\nNext.js의 API Route를 활용한 이미지 프록시 솔루션으로 CORS 문제를 깔끔하게 해결할 수 있었습니다. 특히 SSR 호환성과 보안을 고려한 설계로 프로덕션 환경에서도 안전하게 사용할 수 있는 솔루션이 되었습니다.\n\n### 권장 구현 순서\n\n1. **1단계**: API Route 프록시 엔드포인트 생성 (10분)\n2. **2단계**: ProxyImage 컴포넌트 구현 (20분)  \n3. **3단계**: 기존 이미지 컴포넌트 교체 (5분)\n4. **4단계**: html2canvas 테스트 및 최적화 (15분)\n5. **5단계**: 성능 최적화 및 캐싱 추가 (선택사항)\n\n이 순서대로 진행하면 **Next.js 15의 강력한 서버사이드 기능을 활용**하여 html2canvas CORS 문제를 **가장 효율적으로 해결**할 수 있습니다!\n\n### 핵심 성과\n\n- **html2canvas 호환성**: 외부 CDN 이미지가 포함된 화면을 성공적으로 캡처\n- **성능 최적화**: 이미지 캐싱과 반응형 최적화로 사용자 경험 향상\n- **보안 강화**: 도메인 화이트리스트로 악의적 요청 차단\n- **개발자 경험**: 기존 Image 컴포넌트와 동일한 API로 쉬운 마이그레이션\n\n이 방법은 html2canvas뿐만 아니라 Canvas API를 사용하는 다른 라이브러리(Fabric.js, Konva.js 등)에서도 동일하게 적용할 수 있어, 크로스 도메인 이미지 처리가 필요한 다양한 상황에서 유용할 것입니다.\n\n---\n\n## ⚠️ API Route 프록시 방식 주의사항\n\nAPI Route 프록시는 html2canvas CORS 문제를 해결하지만, **서버 리소스** 측면에서 고려해야 할 사항이 있습니다:\n\n### 🖼️ 서버 리소스 문제\n\n```html\n<!-- Next.js Image가 생성하는 HTML -->\n<img srcset=\"/api/image-proxy?url=...&w=256 256w,\n             /api/image-proxy?url=...&w=384 384w,\n             /api/image-proxy?url=...&w=640 640w\" />\n```\n\n**문제점**:\n- 모든 이미지 요청이 서버를 거쳐감 → **서버 부하 증가**\n- 여러 크기의 이미지가 서버 캐시에 저장 → **메모리 사용량 증가**\n- Vercel/Netlify 등에서 **Function timeout** 발생 가능\n\n### 💡 해결 방법\n\n#### 1. 적극적인 캐시 정책\n```typescript\nreturn new NextResponse(imageBuffer, {\n  headers: {\n    'Cache-Control': 'public, max-age=31536000, immutable',\n    'Access-Control-Allow-Origin': '*',\n  },\n});\n```\n\n#### 2. CDN 활용\n- CloudFlare, AWS CloudFront로 서버 부하 분산\n- 이미지 크기 제한 (최대 5MB)\n- 화이트리스트 도메인 관리\n\n> **📝 Next.js Image 컴포넌트 기술적 제한사항**: `unoptimized`와 `loader` 충돌 문제, SVG 처리 방법 등은 [다음 글](./2025-08-19-nextjs-15-image-optimization-guide)에서 상세히 다룹니다.\n\n\n\n## 🚀 성능 최적화 및 추가 팁\n\n### 1. html2canvas 최적화 설정\n\n```typescript\nconst canvas = await html2canvas(element, {\n  useCORS: true,\n  allowTaint: false,\n  scale: 2,\n  logging: false,\n  backgroundColor: '#ffffff',\n  foreignObjectRendering: true,\n  imageTimeout: 10000,\n  onclone: (clonedDoc) => {\n    console.log('문서 클론 완료');\n  }\n});\n```\n\n### 2. 이미지 프리로딩\n\n```typescript\n// 캡처 전 이미지 프리로딩\nconst preloadImages = async (urls: string[]) => {\n  await Promise.all(\n    urls.map(url => \n      fetch(`/api/image-proxy?url=${encodeURIComponent(url)}`, { \n        cache: 'no-cache' \n      })\n    )\n  );\n};\n```\n\n### 3. 메모리 캐시 추가 (고급)\n\n```typescript\n// 메모리 캐시 추가\nconst imageCache = new Map<string, {\n  data: ArrayBuffer;\n  contentType: string;\n  timestamp: number;\n}>();\n\nconst CACHE_DURATION = 1000 * 60 * 10; // 10분 캐시\n\nexport async function GET(request: NextRequest) {\n  // 캐시 확인 로직 추가\n  const cached = imageCache.get(imageUrl);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return new NextResponse(cached.data, {\n      headers: {\n        'Content-Type': cached.contentType,\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'public, max-age=300',\n      },\n    });\n  }\n  \n  // fetch 후 캐시에 저장\n  imageCache.set(imageUrl, {\n    data: imageBuffer,\n    contentType,\n    timestamp: Date.now(),\n  });\n}\n```\n\n### 📚 더 자세한 이미지 최적화 가이드\n\nNext.js 15의 공식 권장사항과 더 자세한 성능 비교를 원한다면 **[Next.js 15 이미지 최적화 완전 가이드](/posts/react/2025-08-19-nextjs-15-image-optimization-guide)**를 참고하세요.",
      "content_text": "html2canvas 사용 시 외부 CDN 이미지로 인한 CORS 에러를 Next.js API Route 프록시로 완벽 해결한 과정과 다양한 해결 방법들을 상세히 소개합니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-19-html2canvas_cors_guide/",
      "date_published": "2025-08-19T00:00:00.000Z",
      "authors": [
        {
          "name": "zeke",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Next.js",
        "html2canvas",
        "CORS",
        "React",
        "TypeScript",
        "이미지 프록시"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-08-19-complete-guide-to-fine-grained-reactivity/",
      "title": "Fine-Grained Reactivity 완벽 가이드: 차세대 반응형 프로그래밍의 모든 것",
      "content_html": "\n# Fine-Grained Reactivity 완벽 가이드: 차세대 반응형 프로그래밍의 모든 것\n\n## 📑 목차\n\n### 📚 Chapter 1: Fine-Grained Reactivity의 이해\n- [1.1 핵심 개념](#11-핵심-개념-정밀한-반응성이란)\n- [1.2 Push vs Pull: 반응형 모델의 두 가지 접근](#12-push-vs-pull-반응형-모델의-두-가지-접근)\n- [1.3 FGR의 3대 핵심 원시 타입](#13-fgr의-3대-핵심-원시-타입)\n  - [Signal: 반응형 값의 기본 단위](#signal-반응형-값의-기본-단위)\n  - [Effect: 자동 반응형 부수 효과](#effect-자동-반응형-부수-효과)\n  - [Memo: 캐싱된 파생 값](#memo-캐싱된-파생-값)\n\n### 🔧 Chapter 2: 반응형 시스템 직접 구현하기\n- [2.1 완전한 반응형 라이브러리 구축](#21-완전한-반응형-라이브러리-구축)\n- [2.2 고급 기능 추가](#22-고급-기능-추가)\n  - [Batch 업데이트](#batch-업데이트)\n  - [Untrack: 선택적 의존성 제외](#untrack-선택적-의존성-제외)\n  - [Root: 메모리 관리](#root-메모리-관리)\n\n### ⚛️ Chapter 3: React의 리렌더링 문제와 FGR 솔루션\n- [3.1 React의 근본적인 문제](#31-react의-근본적인-문제)\n- [3.2 Legend State: React를 위한 완벽한 FGR 솔루션](#32-legend-state-react를-위한-완벽한-fgr-솔루션)\n  - [📊 성능 벤치마크](#성능-벤치마크)\n  - [🔧 핵심 기능 (9가지)](#핵심-기능-9가지)\n  - [⚡ 성능 최적화 가이드](#성능-최적화-가이드)\n  - [🏗️ 아키텍처 패턴](#아키텍처-패턴)\n- [3.3 FGR의 내부 동작 원리](#33-fgr의-내부-동작-원리)\n\n### 🚀 Chapter 4: FGR 프레임워크 총정리\n- [4.1 SolidJS: FGR의 정점](#41-solidjs-fgr의-정점)\n- [4.2 Vue 3: Composition API와 반응성](#42-vue-3-composition-api와-반응성)\n- [4.3 Svelte: 컴파일 타임 반응성](#43-svelte-컴파일-타임-반응성)\n- [4.4 MobX: 데코레이터 기반 반응성](#44-mobx-데코레이터-기반-반응성)\n- [4.5 Preact Signals: 경량 FGR 솔루션](#45-preact-signals-경량-fgr-솔루션)\n\n### 📊 Chapter 5: 실전 패턴과 최적화\n- [5.1 동적 의존성 추적 패턴](#51-동적-의존성-추적-패턴)\n- [5.2 폼 검증 시스템 구현](#52-폼-검증-시스템-구현)\n- [5.3 실시간 데이터 대시보드](#53-실시간-데이터-대시보드)\n\n### 🎯 Chapter 6: FGR vs Virtual DOM - 성능 비교\n- [6.1 벤치마크 시나리오](#61-벤치마크-시나리오)\n- [6.2 메모리 사용량 비교](#62-메모리-사용량-비교)\n\n### 🚨 Chapter 7: 주의사항과 트레이드오프\n- [7.1 FGR의 한계](#71-fgr의-한계)\n- [7.2 언제 FGR을 선택해야 하는가?](#72-언제-fgr을-선택해야-하는가)\n\n### 🎓 Chapter 8: 미래 전망\n- [8.1 React의 대응: React Forget과 Signals 제안](#81-react의-대응-react-forget과-signals-제안)\n- [8.2 웹 표준화 움직임](#82-웹-표준화-움직임)\n\n### 📝 마무리와 정리\n- [마무리와 정리](#-마무리와-정리)\n- [마지막 조언](#-마지막-조언)\n- [FGR의 미래](#-fgr의-미래)\n- [참고 자료](#-참고-자료)\n\n---\n\n## 🎯 들어가며: 웹 개발의 패러다임 전환\n\n당신이 스프레드시트에서 `=A1+B1`이라는 공식을 작성했다고 상상해보세요. A1이나 B1의 값을 변경하면, 결과가 **즉시 자동으로** 업데이트됩니다. 어떤 버튼을 클릭하거나 페이지를 새로고침할 필요가 없죠.\n\n하지만 React로 이와 같은 동작을 구현하려면 어떨까요?\n\n```tsx\n// React에서는 이렇게 해야 합니다\nfunction Calculator() {\n  const [a, setA] = useState(1);\n  const [b, setB] = useState(2);\n  const [sum, setSum] = useState(3); // 수동으로 관리해야 함\n  \n  // a나 b가 변경될 때마다 수동으로 sum 업데이트\n  useEffect(() => {\n    setSum(a + b);\n  }, [a, b]);\n  \n  return <div>{sum}</div>; // 전체 컴포넌트 리렌더링\n}\n```\n\n**Fine-Grained Reactivity(FGR)**는 이 문제를 근본적으로 해결합니다. 스프레드시트처럼 **값이 변경되면 연관된 부분만 자동으로 업데이트**되는 시스템을 제공합니다.\n\n### 현대 웹 개발의 도전과제\n\n- **성능 병목**: 수천 개 컴포넌트의 불필요한 리렌더링\n- **복잡한 상태 관리**: 수동 의존성 추적과 메모이제이션\n- **예측 불가능한 업데이트**: 비동기 배치 처리로 인한 혼란\n- **메모리 오버헤드**: Virtual DOM의 이중 트리 구조\n\n**FGR은 이 모든 문제를 한 번에 해결합니다.**\n\n## 📚 Chapter 1: Fine-Grained Reactivity의 이해\n\n### 1.1 핵심 개념: 정밀한 반응성이란?\n\nFine-Grained Reactivity는 **상태 변경이 정확히 필요한 부분만 업데이트하는 반응형 프로그래밍 패러다임**입니다. \n\n전통적인 Virtual DOM 방식과 비교해보겠습니다:\n\n#### 🚫 Virtual DOM 방식 (React)\n1. 상태 변경 → 2. 전체 컴포넌트 함수 재실행 → 3. 새로운 Virtual DOM 생성 → 4. 이전 Virtual DOM과 비교(diff) → 5. 변경된 부분만 실제 DOM 업데이트\n\n#### ✅ Fine-Grained Reactivity 방식\n1. 상태 변경 → 2. **변경된 상태를 구독하는 특정 DOM 노드만 직접 업데이트**\n\n이제 실제 예제로 확인해보겠습니다:\n\n```typescript\n// 스프레드시트의 동작 방식\n// A1 = 10\n// B1 = 20  \n// C1 = A1 + B1 // 자동으로 30\n// A1을 15로 변경 → C1이 자동으로 35로 업데이트\n\n// FGR로 구현\nconst [a, setA] = createSignal(10);\nconst [b, setB] = createSignal(20);\nconst c = createMemo(() => a() + b());\n\nconsole.log(c()); // 30\nsetA(15);\nconsole.log(c()); // 35 (자동 업데이트!)\n```\n\n### 1.2 Push vs Pull: 반응형 모델의 두 가지 접근\n\n#### Pull 모델 (React 방식)\n```tsx\nfunction ReactComponent() {\n  const [count, setCount] = useState(0);\n  \n  // 렌더링 시점에 값을 \"당겨옴\"\n  const doubled = count * 2; // 매번 계산\n  \n  return <div>{doubled}</div>;\n}\n```\n\n#### Push 모델 (FGR 방식)\n```tsx\nfunction FGRComponent() {\n  const [count, setCount] = createSignal(0);\n  const doubled = createMemo(() => count() * 2);\n  \n  // count 변경이 doubled로 자동으로 \"밀어냄\"\n  createEffect(() => {\n    console.log(\"Doubled:\", doubled());\n  });\n}\n```\n\n### 1.3 FGR의 3대 핵심 원시 타입\n\n#### 🔵 Signal: 반응형 값의 기본 단위\n\nSignal은 getter와 setter를 가진 반응형 컨테이너입니다.\n\n```typescript\n// Signal의 내부 구조 (간소화)\nfunction createSignal<T>(initialValue: T) {\n  let value = initialValue;\n  const subscribers = new Set<{ execute: () => void }>();\n  \n  const read = (): T => {\n    // 현재 실행 중인 Effect가 있으면 구독자로 등록\n    if (currentListener) {\n      subscribers.add(currentListener);\n    }\n    return value;\n  };\n  \n  const write = (newValue: T | ((prev: T) => T)): void => {\n    value = typeof newValue === 'function' \n      ? (newValue as (prev: T) => T)(value) \n      : newValue;\n    \n    // 모든 구독자에게 변경 알림\n    for (const sub of [...subscribers]) {\n      sub.execute();\n    }\n  };\n  \n  return [read, write] as const;\n}\n```\n\n#### 🟢 Effect: 자동 반응형 부수 효과\n\nEffect는 Signal을 자동으로 추적하고 변경 시 재실행됩니다.\n\n```typescript\n// Effect의 내부 구조\nlet currentListener: { execute: () => void; dependencies: Set<any> } | null = null;\n\nfunction createEffect(fn: () => void) {\n  const execute = () => {\n    // 이전 의존성 정리\n    cleanup(running);\n    \n    // 현재 Effect를 전역 컨텍스트에 설정\n    currentListener = running;\n    \n    try {\n      fn(); // 함수 실행 중 Signal 읽기가 자동 추적됨\n    } finally {\n      currentListener = null;\n    }\n  };\n  \n  const running = {\n    execute,\n    dependencies: new Set<any>()\n  };\n  \n  execute(); // 초기 실행\n  return running;\n}\n\nfunction cleanup(running: { dependencies: Set<any> }) {\n  for (const dep of running.dependencies) {\n    dep.delete?.(running);\n  }\n  running.dependencies.clear();\n}\n```\n\n#### 🟡 Memo: 캐싱된 파생 값\n\nMemo는 계산 비용이 높은 파생 값을 캐싱합니다.\n\n```typescript\nfunction createMemo<T>(fn: () => T) {\n  const [signal, setSignal] = createSignal<T>(undefined as any);\n  createEffect(() => setSignal(fn()));\n  return signal;\n}\n\n// 사용 예제\nconst [count, setCount] = createSignal(0);\nconst expensive = createMemo(() => {\n  console.log(\"계산 중...\");\n  return count() ** 2; // 제곱 계산\n});\n\nconsole.log(expensive()); // \"계산 중...\" → 0\nconsole.log(expensive()); // 0 (캐싱됨)\nsetCount(5);\nconsole.log(expensive()); // \"계산 중...\" → 25\n```\n\n## 🔧 Chapter 2: 반응형 시스템 직접 구현하기\n\n### 2.1 완전한 반응형 라이브러리 구축\n\n이제 실제로 작동하는 반응형 시스템을 처음부터 구현해봅시다.\n\n```typescript\n// reactive.ts - 완전한 구현\ntype Context = Array<{ execute: () => void; dependencies: Set<any> }>;\nconst context: Context = [];\n\n// 양방향 구독 관계 설정\nfunction subscribe(running: { dependencies: Set<any> }, subscriptions: Set<any>) {\n  subscriptions.add(running);\n  running.dependencies.add(subscriptions);\n}\n\n// 의존성 정리\nfunction cleanup(running: { dependencies: Set<any> }) {\n  for (const dep of running.dependencies) {\n    dep.delete(running);\n  }\n  running.dependencies.clear();\n}\n\n// Signal 구현\nexport function createSignal<T>(value: T) {\n  const subscriptions = new Set();\n\n  const read = () => {\n    const running = context[context.length - 1];\n    if (running) subscribe(running, subscriptions);\n    return value;\n  };\n\n  const write = (nextValue) => {\n    value = typeof nextValue === 'function' \n      ? nextValue(value) \n      : nextValue;\n    \n    for (const sub of [...subscriptions]) {\n      sub.execute();\n    }\n  };\n  \n  return [read, write];\n}\n\n// Effect 구현\nexport function createEffect(fn) {\n  const execute = () => {\n    cleanup(running);\n    context.push(running);\n    try {\n      fn();\n    } finally {\n      context.pop();\n    }\n  };\n\n  const running = {\n    execute,\n    dependencies: new Set()\n  };\n\n  execute();\n}\n\n// Memo 구현\nexport function createMemo(fn) {\n  const [signal, setSignal] = createSignal();\n  createEffect(() => setSignal(fn()));\n  return signal;\n}\n```\n\n### 2.2 고급 기능 추가\n\n#### Batch 업데이트: 성능 최적화\n\n```javascript\nlet pending = false;\nconst queue = new Set();\n\nfunction flush() {\n  if (pending) return;\n  pending = true;\n  \n  queueMicrotask(() => {\n    for (const effect of queue) {\n      effect.execute();\n    }\n    queue.clear();\n    pending = false;\n  });\n}\n\nexport function batch(fn) {\n  const prevQueue = queue;\n  queue = new Set();\n  fn();\n  const effects = queue;\n  queue = prevQueue;\n  \n  for (const effect of effects) {\n    queue.add(effect);\n  }\n  \n  if (!prevQueue.size) flush();\n}\n\n// 사용 예제\nbatch(() => {\n  setFirstName(\"Jane\");\n  setLastName(\"Doe\");\n}); // 한 번만 Effect 실행\n```\n\n#### Untrack: 선택적 의존성 제외\n\n```javascript\nexport function untrack(fn) {\n  const prevContext = context;\n  context = [];\n  const result = fn();\n  context = prevContext;\n  return result;\n}\n\n// 사용 예제\ncreateEffect(() => {\n  console.log(\"Count:\", count()); // 추적됨\n  untrack(() => {\n    console.log(\"Debug:\", debugInfo()); // 추적 안 됨\n  });\n});\n```\n\n## ⚛️ Chapter 3: React의 리렌더링 문제와 FGR 솔루션\n\n### 3.1 React의 근본적인 문제\n\nReact의 Context API를 사용한 전역 상태 관리의 문제점을 살펴봅시다:\n\n```jsx\n// 문제가 되는 코드\nconst UserContext = createContext();\n\nfunction UserProvider({ children }) {\n  const [user, setUser] = useState({\n    name: \"김개발\",\n    age: 25,\n    theme: \"dark\",\n    preferences: { /* 복잡한 중첩 객체 */ }\n  });\n  \n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\n// name만 사용하는 컴포넌트\nfunction UserName() {\n  const { user } = useContext(UserContext);\n  console.log(\"UserName 리렌더링!\"); // theme 변경해도 실행됨 😱\n  return <div>{user.name}</div>;\n}\n```\n\n### 3.2 Legend State: React를 위한 완벽한 FGR 솔루션\n\nLegend State는 가장 빠른 React 상태 관리 라이브러리로, Expo에서 공식 지원합니다. \"**성능, 간결함, 강력함**\"을 모두 갖춘 Signal 기반 상태 관리 솔루션입니다.\n\n#### 📊 성능 벤치마크\n\nLegend State는 모든 주요 React 상태 관리 라이브러리를 압도합니다:\n- **Zustand보다 5배 빠름**\n- **MobX보다 3배 빠름**  \n- **Redux Toolkit보다 10배 빠름**\n- **Jotai보다 4배 빠름**\n\n#### 🔧 핵심 기능\n\n##### 1. Observable 시스템\n\n```jsx\nimport { observable } from '@legendapp/state';\n\n// 무한 중첩 가능한 Observable\nconst state$ = observable({\n  user: {\n    profile: {\n      name: \"김개발\",\n      bio: \"프론트엔드 개발자\",\n      skills: [\"React\", \"TypeScript\", \"Node.js\"]\n    },\n    settings: {\n      theme: \"dark\",\n      notifications: {\n        email: true,\n        push: false,\n        sms: false\n      }\n    }\n  },\n  todos: []\n});\n\n// 간단한 get/set 인터페이스\nconsole.log(state$.user.profile.name.get()); // \"김개발\"\nstate$.user.profile.name.set(\"박개발\");\n\n// 배열 조작\nstate$.user.profile.skills.push(\"GraphQL\");\nstate$.todos.push({ id: 1, text: \"Legend State 학습\", done: false });\n\n// 함수형 업데이트\nstate$.user.settings.theme.set(prev => prev === \"dark\" ? \"light\" : \"dark\");\n```\n\n##### 2. React 통합 - use$ 훅\n\n```jsx\nimport { observable, use$ } from '@legendapp/state';\n\nconst app$ = observable({\n  count: 0,\n  user: { name: \"김개발\", age: 25 },\n  todos: [],\n  filter: \"all\"\n});\n\nfunction SmartComponent() {\n  // 필요한 부분만 정확히 구독\n  const count = use$(() => app$.count.get());\n  const userName = use$(() => app$.user.name.get());\n  \n  // 컴포넌트는 count나 user.name이 변경될 때만 리렌더링\n  console.log(\"Render SmartComponent\");\n  \n  return (\n    <div>\n      <h1>{userName}님, 안녕하세요!</h1>\n      <p>카운트: {count}</p>\n      <button onClick={() => app$.count.set(c => c + 1)}>증가</button>\n    </div>\n  );\n}\n\n// 더 간단한 문법: 직접 Observable 전달\nfunction SimpleComponent() {\n  // Observable을 직접 JSX에 사용 가능\n  return (\n    <div>\n      <h1>{app$.user.name}님</h1>\n      <p>나이: {app$.user.age}</p>\n    </div>\n  );\n}\n```\n\n##### 3. Computed Observables (파생 상태)\n\n```jsx\nimport { observable, computed } from '@legendapp/state';\n\nconst store$ = observable({\n  items: [\n    { id: 1, name: \"노트북\", price: 1500000, quantity: 2 },\n    { id: 2, name: \"마우스\", price: 50000, quantity: 5 }\n  ],\n  taxRate: 0.1,\n  discount: 0.05\n});\n\n// Computed observable 생성\nconst calculations$ = observable({\n  // 함수를 전달하면 자동으로 computed가 됨\n  subtotal: () => {\n    return store$.items.get().reduce((sum, item) => \n      sum + (item.price * item.quantity), 0\n    );\n  },\n  \n  tax: () => calculations$.subtotal.get() * store$.taxRate.get(),\n  \n  discount: () => calculations$.subtotal.get() * store$.discount.get(),\n  \n  total: () => {\n    const subtotal = calculations$.subtotal.get();\n    const tax = calculations$.tax.get();\n    const discount = calculations$.discount.get();\n    return subtotal + tax - discount;\n  }\n});\n\n// 사용\nconsole.log(calculations$.total.get()); // 자동 계산\nstore$.items[0].quantity.set(3); // total 자동 재계산\n```\n\n##### 4. 강력한 영속성 (Persistence)\n\n```jsx\nimport { observable, observablePersistLocalStorage } from '@legendapp/state';\nimport { persistObservable } from '@legendapp/state/persist';\nimport { ObservablePersistIndexedDB } from '@legendapp/state/persist-plugins/indexeddb';\n\n// LocalStorage 영속성\nconst settings$ = observable({\n  theme: \"dark\",\n  language: \"ko\",\n  fontSize: 16\n});\n\npersistObservable(settings$, {\n  local: 'app_settings', // localStorage 키\n  pluginLocal: observablePersistLocalStorage\n});\n\n// IndexedDB 영속성 (대용량 데이터)\nconst cache$ = observable({\n  posts: [],\n  images: {},\n  userData: {}\n});\n\npersistObservable(cache$, {\n  local: 'app_cache',\n  pluginLocal: ObservablePersistIndexedDB\n});\n\n// React Native MMKV 지원\nimport { ObservablePersistMMKV } from '@legendapp/state/persist-plugins/mmkv';\n\nconst mobileSettings$ = observable({ /* ... */ });\n\npersistObservable(mobileSettings$, {\n  local: 'mobile_settings',\n  pluginLocal: ObservablePersistMMKV\n});\n```\n\n##### 5. 원격 동기화 - \"Local State = Remote State\"\n\n```jsx\nimport { observable, syncedFetch, syncedKeel, syncedSupabase } from '@legendapp/state';\n\n// 1. 기본 Fetch 동기화\nconst profile$ = observable(syncedFetch({\n  get: 'https://api.example.com/profile',\n  set: 'https://api.example.com/profile',\n  persist: {\n    name: 'profile',\n    plugin: observablePersistLocalStorage\n  },\n  retry: {\n    times: 3,\n    delay: 1000\n  },\n  debounce: 500 // 변경 사항 디바운싱\n}));\n\n// 2. Supabase 실시간 동기화\nconst todos$ = observable(syncedSupabase({\n  supabase,\n  collection: 'todos',\n  filter: (select) => select.eq('user_id', userId),\n  persist: { name: 'todos' },\n  realtime: true, // 실시간 업데이트\n  realtimeOptions: {\n    broadcast: { self: true }\n  }\n}));\n\n// 3. Keel 백엔드 동기화\nconst products$ = observable(syncedKeel({\n  list: keelClient.api.queries.listProducts,\n  create: keelClient.api.mutations.createProduct,\n  update: keelClient.api.mutations.updateProduct,\n  delete: keelClient.api.mutations.deleteProduct,\n  persist: { name: 'products' }\n}));\n\n// 사용 - 로컬처럼 사용하면 자동 동기화\ntodos$.push({ text: \"새 할일\", done: false }); // 자동으로 서버 동기화\nproducts$[0].name.set(\"업데이트된 상품명\"); // 자동으로 서버 업데이트\n```\n\n##### 6. TypeScript 완벽 지원\n\n```typescript\nimport { observable, Observable } from '@legendapp/state';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  preferences: {\n    theme: 'light' | 'dark';\n    notifications: boolean;\n  };\n}\n\ninterface AppState {\n  user: User | null;\n  todos: Todo[];\n  isLoading: boolean;\n}\n\n// 타입 안전한 Observable\nconst state$ = observable<AppState>({\n  user: null,\n  todos: [],\n  isLoading: false\n});\n\n// 타입 추론 완벽 지원\nconst userName = state$.user.name.get(); // string | undefined\nstate$.user.preferences.theme.set('blue'); // TS Error: 'blue'는 허용되지 않음\n\n// Observable 타입\ntype UserObservable = Observable<User>;\n```\n\n##### 7. 고급 기능들\n\n```jsx\n// when - 조건이 충족될 때까지 대기\nimport { when } from '@legendapp/state';\n\nawait when(() => state$.user.get() !== null);\nconsole.log(\"사용자 로그인 완료!\");\n\n// observe - Observable 관찰\nimport { observe } from '@legendapp/state';\n\nconst dispose = observe(() => {\n  console.log(\"Count:\", state$.count.get());\n});\n\n// onChange - 특정 Observable 변경 감지\nstate$.user.onChange((value, prev) => {\n  console.log(\"User changed from\", prev, \"to\", value);\n});\n\n// batch - 여러 변경을 하나로 묶기\nimport { batch } from '@legendapp/state';\n\nbatch(() => {\n  state$.user.name.set(\"새이름\");\n  state$.user.age.set(30);\n  state$.todos.push({ id: 1, text: \"새 할일\" });\n}); // 한 번만 리렌더링\n\n// peek - 추적 없이 값 읽기\nconst currentValue = state$.count.peek(); // Effect에서 추적되지 않음\n```\n\n##### 8. React 컴포넌트 최적화 패턴\n\n```jsx\n// Reactive 컴포넌트 - 가장 간단하고 빠른 방법\nimport { Reactive } from '@legendapp/state/react';\n\nfunction OptimizedList() {\n  return (\n    <Reactive.div>\n      {/* 이 div는 todos가 변경될 때만 리렌더링 */}\n      {state$.todos.map(todo => (\n        <Reactive.li key={todo.id}>\n          <Reactive.input\n            type=\"checkbox\"\n            checked={todo.done}\n            onChange={e => todo.done.set(e.target.checked)}\n          />\n          {todo.text}\n        </Reactive.li>\n      ))}\n    </Reactive.div>\n  );\n}\n\n// Show/Switch 컴포넌트\nimport { Show, Switch } from '@legendapp/state/react';\n\nfunction ConditionalRender() {\n  return (\n    <>\n      <Show if={state$.user}>\n        {(user) => <UserProfile user={user} />}\n      </Show>\n      \n      <Switch value={state$.view}>\n        {{\n          list: () => <ListView />,\n          grid: () => <GridView />,\n          default: () => <DefaultView />\n        }}\n      </Switch>\n    </>\n  );\n}\n\n// For 컴포넌트 - 최적화된 리스트 렌더링\nimport { For } from '@legendapp/state/react';\n\nfunction TodoList() {\n  return (\n    <For each={state$.todos}>\n      {(todo$, index) => (\n        <TodoItem todo={todo$} index={index} />\n      )}\n    </For>\n  );\n}\n```\n\n##### 9. 실전 예제: 완전한 Todo 앱\n\n```jsx\nimport { observable, persistObservable, computed } from '@legendapp/state';\nimport { use$, Reactive, For, Show } from '@legendapp/state/react';\n\n// 전역 상태 정의\nconst todos$ = observable({\n  items: [],\n  filter: 'all',\n  \n  // Computed values\n  filtered: () => {\n    const items = todos$.items.get();\n    const filter = todos$.filter.get();\n    \n    switch(filter) {\n      case 'active': return items.filter(t => !t.done);\n      case 'completed': return items.filter(t => t.done);\n      default: return items;\n    }\n  },\n  \n  stats: () => {\n    const items = todos$.items.get();\n    return {\n      total: items.length,\n      active: items.filter(t => !t.done).length,\n      completed: items.filter(t => t.done).length\n    };\n  }\n});\n\n// 영속성 설정\npersistObservable(todos$, {\n  local: 'todos_app',\n  pluginLocal: observablePersistLocalStorage\n});\n\n// 액션 함수들\nconst actions = {\n  addTodo: (text) => {\n    todos$.items.push({\n      id: Date.now(),\n      text,\n      done: false,\n      createdAt: new Date()\n    });\n  },\n  \n  toggleTodo: (id) => {\n    const todo = todos$.items.find(t => t.id === id);\n    if (todo) todo.done.toggle();\n  },\n  \n  deleteTodo: (id) => {\n    todos$.items.set(prev => prev.filter(t => t.id !== id));\n  },\n  \n  clearCompleted: () => {\n    todos$.items.set(prev => prev.filter(t => !t.done));\n  }\n};\n\n// React 컴포넌트\nfunction TodoApp() {\n  const stats = use$(todos$.stats);\n  \n  return (\n    <div>\n      <h1>Todo App with Legend State</h1>\n      \n      <TodoInput />\n      \n      <Reactive.div>\n        필터: {todos$.filter}\n        <button onClick={() => todos$.filter.set('all')}>전체</button>\n        <button onClick={() => todos$.filter.set('active')}>진행중</button>\n        <button onClick={() => todos$.filter.set('completed')}>완료</button>\n      </Reactive.div>\n      \n      <For each={todos$.filtered}>\n        {(todo$) => <TodoItem todo={todo$} />}\n      </For>\n      \n      <div>\n        전체: {stats.total} | \n        진행중: {stats.active} | \n        완료: {stats.completed}\n      </div>\n    </div>\n  );\n}\n```\n\n#### 🎯 Legend State의 차별점\n\n1. **제로 보일러플레이트**: 액션, 리듀서, 셀렉터 불필요\n2. **직관적 API**: get/set만으로 모든 작업 가능\n3. **최고의 성능**: 벤치마크 1위\n4. **완벽한 TypeScript**: 100% 타입 안전\n5. **통합 영속성**: LocalStorage, IndexedDB, MMKV 지원\n6. **원격 동기화**: Supabase, Firebase, Keel 등 지원\n7. **React Native 최적화**: Expo 공식 추천\n\n#### ⚡ Legend State 성능 최적화 가이드\n\nLegend State는 기본적으로 매우 최적화되어 있지만, 대규모 애플리케이션에서 더 나은 성능을 위한 고급 기법들이 있습니다.\n\n##### 1. Batch 처리로 리렌더링 최소화\n\n```javascript\nimport { batch } from '@legendapp/state';\n\n// ❌ Bad: 1000번 리렌더링\nfunction addManyItems() {\n  for (let i = 0; i < 1000; i++) {\n    state$.items.push({ id: i, name: `Item ${i}` });\n  }\n}\n\n// ✅ Good: 1번만 리렌더링\nfunction addManyItemsBatched() {\n  batch(() => {\n    for (let i = 0; i < 1000; i++) {\n      state$.items.push({ id: i, name: `Item ${i}` });\n    }\n  });\n}\n\n// 실전 예제: 대량 데이터 업데이트\nconst bulkUpdate = () => {\n  batch(() => {\n    // 모든 변경사항이 한 번에 반영됨\n    state$.users.set(newUsers);\n    state$.settings.theme.set('dark');\n    state$.ui.loading.set(false);\n    state$.analytics.events.push(...newEvents);\n  });\n};\n```\n\n##### 2. 프록시 생성 최적화\n\n```javascript\n// ❌ Bad: 불필요한 프록시 생성\nconst calculateSum = () => {\n  let sum = 0;\n  // 각 아이템마다 프록시 생성됨\n  state$.items.forEach(item => {\n    sum += item.data.value.get();\n  });\n  return sum;\n};\n\n// ✅ Good: Raw 데이터 직접 접근\nconst calculateSumOptimized = () => {\n  let sum = 0;\n  // get()으로 raw 데이터 접근 - 프록시 생성 없음\n  const items = state$.items.get();\n  items.forEach(item => {\n    sum += item.data.value;\n  });\n  return sum;\n};\n\n// ✅ Better: peek()으로 추적 없이 읽기\nconst calculateSumPeek = () => {\n  let sum = 0;\n  // peek()은 의존성 추적을 하지 않음\n  const items = state$.items.peek();\n  items.forEach(item => {\n    sum += item.data.value;\n  });\n  return sum;\n};\n```\n\n##### 3. 배열 렌더링 최적화\n\n```javascript\n// ❌ Bad: 배열 변경 시 부모 컴포넌트도 리렌더링\nfunction TodoList() {\n  const todos = use$(state$.todos);\n  \n  return (\n    <div>\n      {todos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n    </div>\n  );\n}\n\n// ✅ Good: For 컴포넌트로 최적화\nimport { For } from '@legendapp/state/react';\n\nfunction TodoListOptimized() {\n  return (\n    <div>\n      <For each={state$.todos} optimized>\n        {(todo$) => <TodoItem todo={todo$} />}\n      </For>\n    </div>\n  );\n}\n\n// 고급: 아이템별 메모이제이션\nconst TodoItem = memo(({ todo$ }) => {\n  const todo = use$(todo$);\n  return (\n    <div>\n      <Reactive.span>{todo$.text}</Reactive.span>\n      <Reactive.input\n        type=\"checkbox\"\n        checked={todo$.done}\n        onChange={e => todo$.done.set(e.target.checked)}\n      />\n    </div>\n  );\n});\n```\n\n##### 4. ID 기반 안정적인 참조\n\n```javascript\n// ✅ 객체 배열에는 항상 고유 ID 사용\nconst todos$ = observable([\n  { id: 1, text: \"Learn Legend State\", done: false },\n  { id: 2, text: \"Build awesome app\", done: false }\n]);\n\n// ID를 통한 안정적인 Observable 참조\nfunction TodoApp() {\n  const addTodo = (text) => {\n    todos$.push({\n      id: Date.now(), // 고유 ID 생성\n      text,\n      done: false\n    });\n  };\n  \n  const updateTodo = (id, updates) => {\n    // ID로 특정 아이템 찾아 업데이트\n    const todo = todos$.find(t => t.id.peek() === id);\n    if (todo) {\n      Object.assign(todo, updates);\n    }\n  };\n  \n  return (\n    <For each={todos$} optimized>\n      {(todo$, index) => (\n        // 안정적인 key로 React 최적화\n        <TodoItem key={todo$.id.peek()} todo={todo$} />\n      )}\n    </For>\n  );\n}\n```\n\n##### 5. 선택적 추적과 peek() 활용\n\n```javascript\n// peek()을 사용한 조건부 렌더링 최적화\nfunction SmartComponent() {\n  const isDebugMode = state$.debug.peek(); // 추적하지 않음\n  \n  // debug 모드 변경 시 리렌더링되지 않음\n  if (isDebugMode) {\n    console.log('Debug info:', state$.data.peek());\n  }\n  \n  // 실제로 추적이 필요한 값만 get() 사용\n  const importantData = use$(state$.importantData);\n  \n  return <div>{importantData}</div>;\n}\n\n// 계산 최적화\nconst expensiveCalculation = createMemo(() => {\n  const config = state$.config.peek(); // 설정은 추적 안 함\n  const data = state$.data.get(); // 데이터만 추적\n  \n  return processData(data, config);\n});\n```\n\n#### 🏗️ Legend State 아키텍처 패턴\n\n##### 1. 글로벌 상태 패턴 (Centralized)\n\n```typescript\n// stores/globalState.ts\nimport { observable } from '@legendapp/state';\n\n// 전체 앱 상태를 하나의 Observable로 관리\nexport const globalState$ = observable({\n  // 인증 관련\n  auth: {\n    user: null as User | null,\n    token: null as string | null,\n    isAuthenticated: false\n  },\n  \n  // UI 상태\n  ui: {\n    theme: 'light' as 'light' | 'dark',\n    sidebarOpen: true,\n    modals: {\n      settings: false,\n      profile: false\n    },\n    notifications: [] as Notification[]\n  },\n  \n  // 비즈니스 데이터\n  data: {\n    products: [] as Product[],\n    orders: [] as Order[],\n    customers: [] as Customer[]\n  },\n  \n  // 설정\n  settings: {\n    language: 'ko',\n    timezone: 'Asia/Seoul',\n    notifications: {\n      email: true,\n      push: false\n    }\n  }\n});\n\n// Computed values\nexport const computed$ = observable({\n  // 파생 상태들\n  activeOrders: () => {\n    return globalState$.data.orders.get()\n      .filter(order => order.status === 'active');\n  },\n  \n  totalRevenue: () => {\n    return globalState$.data.orders.get()\n      .reduce((sum, order) => sum + order.total, 0);\n  },\n  \n  userDisplayName: () => {\n    const user = globalState$.auth.user.get();\n    return user ? `${user.firstName} ${user.lastName}` : 'Guest';\n  }\n});\n\n// Actions\nexport const actions = {\n  login: async (credentials: LoginCredentials) => {\n    const response = await api.login(credentials);\n    batch(() => {\n      globalState$.auth.user.set(response.user);\n      globalState$.auth.token.set(response.token);\n      globalState$.auth.isAuthenticated.set(true);\n    });\n  },\n  \n  logout: () => {\n    batch(() => {\n      globalState$.auth.set({\n        user: null,\n        token: null,\n        isAuthenticated: false\n      });\n    });\n  },\n  \n  toggleTheme: () => {\n    globalState$.ui.theme.set(prev => \n      prev === 'light' ? 'dark' : 'light'\n    );\n  }\n};\n```\n\n##### 2. 모듈식 Atom 패턴 (Decentralized)\n\n```typescript\n// stores/atoms/authAtom.ts\nexport const auth$ = observable({\n  user: null as User | null,\n  token: null as string | null,\n  \n  // Atom 내부 computed\n  isAuthenticated: () => auth$.user.get() !== null,\n  \n  // Atom 내부 actions\n  login: async (credentials: LoginCredentials) => {\n    const response = await api.login(credentials);\n    batch(() => {\n      auth$.user.set(response.user);\n      auth$.token.set(response.token);\n    });\n  },\n  \n  logout: () => {\n    auth$.user.set(null);\n    auth$.token.set(null);\n  }\n});\n\n// stores/atoms/uiAtom.ts\nexport const ui$ = observable({\n  theme: 'light' as Theme,\n  sidebarOpen: true,\n  \n  toggleTheme: () => {\n    ui$.theme.set(prev => prev === 'light' ? 'dark' : 'light');\n  },\n  \n  toggleSidebar: () => {\n    ui$.sidebarOpen.set(prev => !prev);\n  }\n});\n\n// stores/atoms/productsAtom.ts\nexport const products$ = observable({\n  items: [] as Product[],\n  loading: false,\n  error: null as string | null,\n  \n  // 파생 상태\n  featured: () => products$.items.get().filter(p => p.featured),\n  \n  inStock: () => products$.items.get().filter(p => p.stock > 0),\n  \n  // Actions\n  fetch: async () => {\n    products$.loading.set(true);\n    try {\n      const data = await api.getProducts();\n      products$.items.set(data);\n    } catch (error) {\n      products$.error.set(error.message);\n    } finally {\n      products$.loading.set(false);\n    }\n  }\n});\n```\n\n##### 3. 컴포넌트 레벨 상태 패턴\n\n```typescript\n// hooks/useComponentState.ts\nimport { useObservable } from '@legendapp/state/react';\n\n// 재사용 가능한 커스텀 훅\nexport function useFormState<T>(initialValues: T) {\n  const form$ = useObservable({\n    values: initialValues,\n    errors: {} as Record<keyof T, string>,\n    touched: {} as Record<keyof T, boolean>,\n    isSubmitting: false,\n    \n    // Computed\n    isValid: () => {\n      const errors = form$.errors.get();\n      return Object.keys(errors).length === 0;\n    },\n    \n    // Actions\n    setField: (field: keyof T, value: any) => {\n      form$.values[field].set(value);\n      form$.touched[field].set(true);\n    },\n    \n    setError: (field: keyof T, error: string) => {\n      form$.errors[field].set(error);\n    },\n    \n    reset: () => {\n      batch(() => {\n        form$.values.set(initialValues);\n        form$.errors.set({});\n        form$.touched.set({});\n        form$.isSubmitting.set(false);\n      });\n    },\n    \n    submit: async (onSubmit: (values: T) => Promise<void>) => {\n      form$.isSubmitting.set(true);\n      try {\n        await onSubmit(form$.values.get());\n        form$.reset();\n      } finally {\n        form$.isSubmitting.set(false);\n      }\n    }\n  });\n  \n  return form$;\n}\n\n// 컴포넌트에서 사용\nfunction LoginForm() {\n  const form$ = useFormState({\n    email: '',\n    password: ''\n  });\n  \n  const handleSubmit = () => {\n    form$.submit(async (values) => {\n      await auth$.login(values);\n    });\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <Reactive.input\n        value={form$.values.email}\n        onChange={e => form$.setField('email', e.target.value)}\n        className={form$.errors.email && 'error'}\n      />\n      <Show if={form$.errors.email}>\n        {(error) => <span className=\"error-message\">{error}</span>}\n      </Show>\n      \n      <Reactive.button \n        disabled={form$.isSubmitting || !form$.isValid}\n        type=\"submit\"\n      >\n        {form$.isSubmitting ? 'Loading...' : 'Login'}\n      </Reactive.button>\n    </form>\n  );\n}\n```\n\n##### 4. Context와 Provider 패턴\n\n```typescript\n// contexts/AppStateContext.tsx\nimport { createContext, useContext } from 'react';\nimport { Observable } from '@legendapp/state';\n\ninterface AppState {\n  user: User | null;\n  settings: Settings;\n  // ...\n}\n\nconst AppStateContext = createContext<Observable<AppState> | null>(null);\n\nexport function AppStateProvider({ children }) {\n  const state$ = useObservable<AppState>({\n    user: null,\n    settings: defaultSettings\n  });\n  \n  // 영속성 설정\n  useEffect(() => {\n    persistObservable(state$.settings, {\n      local: 'app_settings'\n    });\n  }, []);\n  \n  return (\n    <AppStateContext.Provider value={state$}>\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n\nexport function useAppState() {\n  const state$ = useContext(AppStateContext);\n  if (!state$) {\n    throw new Error('useAppState must be used within AppStateProvider');\n  }\n  return state$;\n}\n\n// 사용\nfunction SomeComponent() {\n  const state$ = useAppState();\n  const user = use$(state$.user);\n  \n  return <div>Welcome, {user?.name}!</div>;\n}\n```\n\n##### 5. 도메인 기반 아키텍처\n\n```typescript\n// domains/shopping/state.ts\nclass ShoppingDomain {\n  private state$ = observable({\n    cart: {\n      items: [] as CartItem[],\n      coupon: null as string | null\n    },\n    \n    checkout: {\n      step: 'cart' as CheckoutStep,\n      shippingAddress: null as Address | null,\n      paymentMethod: null as PaymentMethod | null\n    }\n  });\n  \n  // Getters\n  get cart$() { return this.state$.cart; }\n  get checkout$() { return this.state$.checkout; }\n  \n  // Computed\n  readonly total$ = observable(() => {\n    const items = this.cart$.items.get();\n    const subtotal = items.reduce((sum, item) => \n      sum + (item.price * item.quantity), 0\n    );\n    \n    const coupon = this.cart$.coupon.get();\n    const discount = coupon ? calculateDiscount(subtotal, coupon) : 0;\n    \n    return {\n      subtotal,\n      discount,\n      total: subtotal - discount\n    };\n  });\n  \n  // Actions\n  addToCart(product: Product, quantity = 1) {\n    const existingItem = this.cart$.items.find(\n      item => item.productId.peek() === product.id\n    );\n    \n    if (existingItem) {\n      existingItem.quantity.set(prev => prev + quantity);\n    } else {\n      this.cart$.items.push({\n        productId: product.id,\n        name: product.name,\n        price: product.price,\n        quantity\n      });\n    }\n  }\n  \n  removeFromCart(productId: string) {\n    this.cart$.items.set(prev => \n      prev.filter(item => item.productId !== productId)\n    );\n  }\n  \n  applyCoupon(code: string) {\n    // 쿠폰 검증 로직\n    this.cart$.coupon.set(code);\n  }\n  \n  proceedToCheckout() {\n    if (this.cart$.items.get().length === 0) {\n      throw new Error('Cart is empty');\n    }\n    this.checkout$.step.set('shipping');\n  }\n}\n\nexport const shoppingDomain = new ShoppingDomain();\n```\n\nLegend State는 \"**Write Less, Do More**\" 철학으로 복잡한 상태 관리를 단순하게 만들어줍니다.\n\n### 3.3 FGR의 내부 동작 원리\n\n```javascript\n// Observable의 핵심 구조\nconst observableValue = {\n  _value: \"초기값\",\n  _handlers: [], // 구독자들\n  \n  get() {\n    // 현재 실행 중인 Effect를 구독자로 등록\n    if (currentTracker) {\n      this._handlers.push(currentTracker);\n    }\n    return this._value;\n  },\n  \n  set(newValue) {\n    this._value = newValue;\n    // 구독자들에게 알림\n    this._handlers.forEach(handler => handler());\n  }\n};\n\n// use$ 훅의 간소화된 구현\nfunction use$(callback) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  \n  useEffect(() => {\n    effect(() => {\n      callback(); // Observable 값 읽기 (자동 구독)\n      forceUpdate(); // 값 변경 시 리렌더링\n    });\n  }, []);\n  \n  return callback();\n}\n```\n\n## 🚀 Chapter 4: FGR 프레임워크 총정리\n\n### 4.1 SolidJS: FGR의 정점\n\nSolidJS는 FGR을 핵심으로 설계된 프레임워크입니다.\n\n```jsx\nimport { createSignal, createEffect, createMemo, Show, For } from 'solid-js';\n\nfunction TodoApp() {\n  const [todos, setTodos] = createSignal([]);\n  const [filter, setFilter] = createSignal('all');\n  \n  // 자동 메모이제이션\n  const filteredTodos = createMemo(() => {\n    const currentFilter = filter();\n    const currentTodos = todos();\n    \n    switch(currentFilter) {\n      case 'active': return currentTodos.filter(t => !t.done);\n      case 'completed': return currentTodos.filter(t => t.done);\n      default: return currentTodos;\n    }\n  });\n  \n  const stats = createMemo(() => ({\n    total: todos().length,\n    active: todos().filter(t => !t.done).length,\n    completed: todos().filter(t => t.done).length\n  }));\n  \n  // JSX는 한 번만 실행됨\n  return (\n    <div>\n      <div>전체: {stats().total}</div>\n      <For each={filteredTodos()}>\n        {(todo) => <TodoItem todo={todo} />}\n      </For>\n    </div>\n  );\n}\n```\n\n#### SolidJS의 Store: 중첩 반응성\n\n```javascript\nimport { createStore } from 'solid-js/store';\n\nconst [state, setState] = createStore({\n  user: {\n    profile: {\n      name: \"김개발\",\n      bio: \"프론트엔드 개발자\"\n    },\n    settings: {\n      theme: \"dark\",\n      notifications: true\n    }\n  }\n});\n\n// 세밀한 업데이트\nsetState(\"user\", \"profile\", \"name\", \"박개발\");\n// user.profile.name을 구독하는 곳만 업데이트!\n\n// 배치 업데이트\nbatch(() => {\n  setState(\"user\", \"settings\", \"theme\", \"light\");\n  setState(\"user\", \"settings\", \"notifications\", false);\n});\n```\n\n### 4.2 Vue 3: Composition API와 반응성\n\nVue 3는 Proxy 기반의 반응형 시스템을 제공합니다.\n\n```javascript\nimport { ref, reactive, computed, watchEffect } from 'vue';\n\n// Vue의 반응형 원시 타입들\nconst count = ref(0); // Signal과 유사\nconst state = reactive({ // Store와 유사\n  user: { name: \"김개발\", age: 25 }\n});\n\n// Computed = Memo\nconst doubled = computed(() => count.value * 2);\n\n// WatchEffect = Effect\nwatchEffect(() => {\n  console.log(`${state.user.name}: ${doubled.value}`);\n});\n\n// 자동 추적\ncount.value++; // watchEffect 재실행\nstate.user.name = \"박개발\"; // watchEffect 재실행\n```\n\n### 4.3 Svelte: 컴파일 타임 반응성\n\nSvelte는 컴파일 시점에 반응형 코드를 생성합니다.\n\n```svelte\n<script>\n  // $ 레이블로 반응형 선언\n  let count = 0;\n  $: doubled = count * 2; // Memo와 유사\n  \n  $: { // Effect와 유사\n    console.log(`count: ${count}, doubled: ${doubled}`);\n  }\n  \n  // 컴파일 후 실제 생성되는 코드 (간소화)\n  // $$invalidate(0, count = 5);\n  // if ($$dirty & /*count*/ 1) $$invalidate(1, doubled = count * 2);\n</script>\n\n<button on:click={() => count++}>\n  {count} × 2 = {doubled}\n</button>\n```\n\n### 4.4 MobX: 데코레이터 기반 반응성\n\n```javascript\nimport { makeObservable, observable, computed, autorun, action } from 'mobx';\n\nclass TodoStore {\n  todos = [];\n  filter = \"all\";\n  \n  constructor() {\n    makeObservable(this, {\n      todos: observable,\n      filter: observable,\n      filteredTodos: computed,\n      addTodo: action\n    });\n  }\n  \n  get filteredTodos() {\n    switch(this.filter) {\n      case \"active\": return this.todos.filter(t => !t.done);\n      case \"completed\": return this.todos.filter(t => t.done);\n      default: return this.todos;\n    }\n  }\n  \n  addTodo(text) {\n    this.todos.push({ text, done: false });\n  }\n}\n\nconst store = new TodoStore();\n\n// 자동 반응\nautorun(() => {\n  console.log(`Todos: ${store.filteredTodos.length}`);\n});\n```\n\n### 4.5 Preact Signals: 경량 FGR 솔루션\n\nPreact는 2022년 Signals를 도입하여 선택적 FGR을 지원합니다.\n\n```jsx\nimport { signal, computed, effect } from '@preact/signals';\n\n// 컴포넌트 외부에서도 정의 가능\nconst globalCount = signal(0);\nconst doubled = computed(() => globalCount.value * 2);\n\nfunction Counter() {\n  // 컴포넌트는 한 번만 렌더링\n  console.log(\"Component rendered once\");\n  \n  return (\n    <div>\n      <span>{globalCount}</span> {/* 텍스트 노드만 업데이트 */}\n      <span>{doubled}</span>\n      <button onClick={() => globalCount.value++}>+</button>\n    </div>\n  );\n}\n\n// 컴포넌트 외부에서 Effect\neffect(() => {\n  document.title = `Count: ${globalCount.value}`;\n});\n```\n\n## 📊 Chapter 5: 실전 패턴과 최적화\n\n### 5.1 동적 의존성 추적 패턴\n\n```javascript\nconst [showDetails, setShowDetails] = createSignal(false);\nconst [summary, setSummary] = createSignal(\"요약\");\nconst [details, setDetails] = createSignal(\"상세 정보\");\n\ncreateEffect(() => {\n  console.log(\"Summary:\", summary());\n  \n  // 조건부 의존성\n  if (showDetails()) {\n    console.log(\"Details:\", details());\n  }\n});\n\n// showDetails가 false일 때\nsetDetails(\"새 상세 정보\"); // Effect 실행 안 됨!\nsetShowDetails(true); // 이제 details도 추적 시작\n```\n\n### 5.2 폼 검증 시스템 구현\n\n```javascript\nfunction createFormValidator() {\n  const fields = {\n    email: createSignal(\"\"),\n    password: createSignal(\"\"),\n    confirmPassword: createSignal(\"\")\n  };\n  \n  const validators = {\n    email: createMemo(() => {\n      const value = fields.email[0]();\n      if (!value) return { valid: false, error: \"필수 입력\" };\n      if (!value.includes('@')) return { valid: false, error: \"올바른 이메일 형식이 아닙니다\" };\n      return { valid: true };\n    }),\n    \n    password: createMemo(() => {\n      const value = fields.password[0]();\n      if (value.length < 8) return { valid: false, error: \"8자 이상 입력\" };\n      if (!/[A-Z]/.test(value)) return { valid: false, error: \"대문자 포함 필수\" };\n      if (!/[0-9]/.test(value)) return { valid: false, error: \"숫자 포함 필수\" };\n      return { valid: true };\n    }),\n    \n    confirmPassword: createMemo(() => {\n      const password = fields.password[0]();\n      const confirm = fields.confirmPassword[0]();\n      if (password !== confirm) return { valid: false, error: \"비밀번호가 일치하지 않습니다\" };\n      return { valid: true };\n    })\n  };\n  \n  const isFormValid = createMemo(() => {\n    return Object.values(validators).every(v => v().valid);\n  });\n  \n  const errors = createMemo(() => {\n    return Object.entries(validators)\n      .filter(([_, validator]) => !validator().valid)\n      .map(([field, validator]) => ({\n        field,\n        error: validator().error\n      }));\n  });\n  \n  return { fields, validators, isFormValid, errors };\n}\n```\n\n### 5.3 실시간 데이터 대시보드\n\n```javascript\nfunction createRealtimeDashboard() {\n  const [data, setData] = createSignal([]);\n  const [filters, setFilters] = createStore({\n    status: \"all\",\n    dateRange: { start: null, end: null },\n    searchTerm: \"\"\n  });\n  \n  // 다단계 파생 상태\n  const filtered = createMemo(() => {\n    let result = data();\n    \n    if (filters.status !== \"all\") {\n      result = result.filter(item => item.status === filters.status);\n    }\n    \n    if (filters.searchTerm) {\n      result = result.filter(item => \n        item.name.toLowerCase().includes(filters.searchTerm.toLowerCase())\n      );\n    }\n    \n    if (filters.dateRange.start && filters.dateRange.end) {\n      result = result.filter(item => \n        item.date >= filters.dateRange.start && \n        item.date <= filters.dateRange.end\n      );\n    }\n    \n    return result;\n  });\n  \n  const sorted = createMemo(() => {\n    return [...filtered()].sort((a, b) => b.date - a.date);\n  });\n  \n  const stats = createMemo(() => ({\n    total: filtered().length,\n    active: filtered().filter(i => i.status === \"active\").length,\n    pending: filtered().filter(i => i.status === \"pending\").length,\n    completed: filtered().filter(i => i.status === \"completed\").length,\n    avgValue: filtered().reduce((sum, i) => sum + i.value, 0) / filtered().length || 0\n  }));\n  \n  const chartData = createMemo(() => {\n    const grouped = filtered().reduce((acc, item) => {\n      const date = item.date.toDateString();\n      acc[date] = (acc[date] || 0) + item.value;\n      return acc;\n    }, {});\n    \n    return Object.entries(grouped).map(([date, value]) => ({ date, value }));\n  });\n  \n  // WebSocket 연결 시뮬레이션\n  createEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');\n    \n    ws.onmessage = (event) => {\n      const newItem = JSON.parse(event.data);\n      setData(prev => [...prev, newItem]);\n    };\n    \n    return () => ws.close();\n  });\n  \n  return { sorted, stats, chartData, filters, setFilters };\n}\n```\n\n## 🎯 Chapter 6: FGR vs Virtual DOM - 성능 비교\n\n### 6.1 벤치마크 시나리오\n\n```javascript\n// 1000개의 아이템을 가진 리스트에서 하나의 아이템 업데이트\n\n// React (Virtual DOM)\nfunction ReactList({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>\n          {item.name}: {item.value}\n        </li>\n      ))}\n    </ul>\n  );\n}\n// 결과: 전체 리스트 Virtual DOM 재생성 → 비교 → 하나의 DOM 노드 업데이트\n\n// SolidJS (FGR)\nfunction SolidList(props) {\n  return (\n    <ul>\n      <For each={props.items}>\n        {(item) => (\n          <li>\n            {item.name}: {item.value}\n          </li>\n        )}\n      </For>\n    </ul>\n  );\n}\n// 결과: 변경된 아이템의 텍스트 노드만 직접 업데이트\n```\n\n### 6.2 메모리 사용량 비교\n\n```javascript\n// Virtual DOM 방식\n// - 전체 컴포넌트 트리의 Virtual DOM 객체 유지\n// - 이전 Virtual DOM과 새 Virtual DOM 두 개 보관\n// - Fiber 노드 추가 메모리\n\n// FGR 방식  \n// - Signal-Effect 연결 그래프만 유지\n// - Virtual DOM 없음\n// - 컴포넌트 인스턴스 최소화\n```\n\n## 🚨 Chapter 7: 주의사항과 트레이드오프\n\n### 7.1 FGR의 한계\n\n```javascript\n// 1. 학습 곡선\n// React 개발자가 익숙한 패턴\nconst [state, setState] = useState({ name: \"김개발\", age: 25 });\nsetState({ ...state, age: 26 });\n\n// FGR에서 요구되는 패턴\nconst state = createStore({ name: \"김개발\", age: 25 });\nsetState(\"age\", 26);\n\n// 2. 디버깅의 복잡성\n// 반응형 그래프가 복잡해지면 의존성 추적이 어려움\ncreateEffect(() => {\n  // 이 Effect가 왜 실행되었는지 추적하기 어려울 수 있음\n  const result = complexCalculation();\n  sideEffect(result);\n});\n\n// 3. 생태계 호환성\n// React 생태계의 라이브러리들과 호환성 문제\n// - React DevTools 지원 제한\n// - 써드파티 컴포넌트 라이브러리 통합 어려움\n```\n\n### 7.2 언제 FGR을 선택해야 하는가?\n\n✅ **FGR이 적합한 경우:**\n- 실시간 데이터가 많은 대시보드\n- 복잡한 상태 의존성을 가진 애플리케이션\n- 성능이 매우 중요한 모바일 웹\n- 세밀한 반응성 제어가 필요한 경우\n\n❌ **FGR이 부적합한 경우:**\n- 간단한 CRUD 애플리케이션\n- SEO가 중요한 콘텐츠 사이트\n- React 생태계에 깊게 의존하는 프로젝트\n- 팀의 학습 비용이 부담되는 경우\n\n## 🎓 Chapter 8: 미래 전망\n\n### 8.1 React의 대응: React Forget과 Signals 제안\n\n```javascript\n// React Forget (자동 메모이제이션 컴파일러)\nfunction Component({ data }) {\n  // 컴파일러가 자동으로 useMemo 적용\n  const expensive = data.map(item => heavyComputation(item));\n  return <List items={expensive} />;\n}\n\n// React Signals 제안 (TC39 Stage 1)\nconst counter = new Signal(0);\nconst doubled = new Computed(() => counter.value * 2);\n\neffect(() => {\n  console.log(doubled.value);\n});\n```\n\n### 8.2 웹 표준화 움직임\n\nJavaScript 표준에 Signals를 추가하려는 TC39 제안이 진행 중입니다. 이것이 실현되면:\n\n- 프레임워크 간 상호 운용성 향상\n- 브라우저 수준의 최적화 가능\n- 표준화된 반응형 프로그래밍 모델\n\n## 📝 마무리: FGR로 시작하는 새로운 개발 경험\n\nFine-Grained Reactivity는 단순히 성능 최적화 기법이 아닙니다. **개발자 경험과 사용자 경험을 동시에 혁신하는 패러다임 전환**입니다.\n\n### 🎯 FGR이 가져다주는 변화\n\n| 측면 | 기존 방식 | FGR 방식 | 개선 효과 |\n|------|----------|----------|----------|\n| **성능** | 전체 컴포넌트 리렌더링 | 변경 부분만 업데이트 | 5-10배 빠른 업데이트 |\n| **메모리** | Virtual DOM 이중 구조 | 직접 DOM 조작 | 50% 메모리 절약 |\n| **개발 경험** | 수동 의존성 관리 | 자동 추적 | 버그 90% 감소 |\n| **코드 복잡도** | useEffect, useMemo 남발 | 선언적 파생 상태 | 코드량 30% 감소 |\n\n\n### 🚀 지금 시작하는 FGR 로드맵\n\n#### 1단계: 개념 학습 (1주)\n```typescript\n// 간단한 카운터로 Signal 패턴 익히기\nconst [count, setCount] = createSignal(0);\nconst doubled = createMemo(() => count() * 2);\n\ncreateEffect(() => {\n  console.log(`Count: ${count()}, Doubled: ${doubled()}`);\n});\n```\n\n#### 2단계: 부분 적용 (2-4주)\n- **React 프로젝트**: Legend State로 전역 상태 관리\n- **새 프로젝트**: SolidJS로 간단한 페이지 구현\n- **Vue 사용자**: Composition API의 reactive/computed 적극 활용\n\n#### 3단계: 프로덕션 준비 (2-3개월)\n- 팀 교육 및 코딩 컨벤션 수립\n- 기존 프로젝트 점진적 마이그레이션\n- 성능 모니터링 및 최적화\n\n### 🎓 마지막 조언\n\n**\"완벽한 기술은 없지만, 더 나은 선택은 있습니다.\"**\n\nFGR은 다음과 같은 프로젝트에 특히 적합합니다:\n- ✅ 실시간 데이터 처리가 중요한 대시보드\n- ✅ 복잡한 상태 의존성을 가진 애플리케이션  \n- ✅ 모바일 성능이 중요한 PWA\n- ✅ 새로 시작하는 프로젝트\n\n반면 다음의 경우는 신중하게 고려하세요:\n- ⚠️ 단순한 콘텐츠 중심 웹사이트\n- ⚠️ React 생태계에 깊게 의존하는 레거시 프로젝트\n- ⚠️ 팀의 학습 리소스가 제한적인 상황\n\n### 🌟 FGR의 미래\n\nTC39에서 JavaScript 표준으로 Signals 제안이 진행 중이며, React도 React Forget과 Signals 도입을 검토하고 있습니다. **FGR은 선택이 아닌 필수가 되어가고 있습니다.**\n\n지금 시작하면, 당신은 **웹 개발의 다음 10년을 준비하는 것**입니다.\n\n---\n\n## 📚 참고 자료\n\n### 공식 문서\n- [SolidJS Documentation](https://docs.solidjs.com)\n- [Vue 3 Reactivity](https://vuejs.org/guide/extras/reactivity-in-depth.html)\n- [Legend State](https://legendapp.com/open-source/state/)\n- [Preact Signals](https://preactjs.com/guide/v10/signals/)\n\n### 심화 학습\n- [Building a Reactive Library from Scratch](https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p)\n- [A Hands-on Introduction to Fine-Grained Reactivity](https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf)\n- [TC39 Signals Proposal](https://github.com/tc39/proposal-signals)\n\n### 커뮤니티\n- [SolidJS Discord](https://discord.com/invite/solidjs)\n- [Vue.js Discord](https://discord.com/invite/vue)\n- [Svelte Discord](https://discord.com/invite/svelte)\n",
      "content_text": "Virtual DOM의 한계를 넘어선 Fine-Grained Reactivity의 핵심 개념부터 실전 구현까지. SolidJS, Vue 3, Legend State 등 주요 FGR 프레임워크와 성능 최적화 기법을 상세히 다룹니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-08-19-complete-guide-to-fine-grained-reactivity/",
      "date_published": "2025-08-19T00:00:00.000Z",
      "authors": [
        {
          "name": "김개발",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Fine Grained Reactivity",
        "FGR",
        "React",
        "SolidJS",
        "Vue3",
        "Legend State",
        "Signal",
        "Effect",
        "Memo",
        "상태관리",
        "성능최적화",
        "반응형 시스템"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/css/html-data-attributes-guide/",
      "title": "HTML 데이터 속성(Data Attributes) 완전 가이드",
      "content_html": "\n# HTML 데이터 속성(Data Attributes) 가이드\n\n웹 개발을 하다 보면 HTML 요소에 추가적인 정보를 저장해야 할 때가 자주 있습니다. 예를 들어 버튼을 클릭했을 때 어떤 동작을 할지, 특정 요소의 상태 정보는 무엇인지 같은 정보들을 말입니다.\n\n이런 상황에서 매우 유용한 것이 바로 **HTML 데이터 속성(Data Attributes)**입니다. 이번 글에서는 데이터 속성의 개념부터 실제 활용 방법까지 상세하게 알아보겠습니다.\n\n## 목차\n\n1. [데이터 속성이란 무엇인가?](#데이터-속성이란-무엇인가)\n2. [데이터 속성을 사용하는 이유](#데이터-속성을-사용하는-이유)\n3. [데이터 속성 기본 문법](#데이터-속성-기본-문법)\n4. [HTML에서 데이터 속성 사용하기](#html에서-데이터-속성-사용하기)\n5. [CSS로 데이터 속성 활용하기](#css로-데이터-속성-활용하기)\n6. [JavaScript로 데이터 속성 다루기](#javascript로-데이터-속성-다루기)\n7. [실무에서 바로 쓸 수 있는 예제들](#실무에서-바로-쓸-수-있는-예제들)\n8. [알아두면 좋은 주의사항들](#알아두면-좋은-주의사항들)\n\n---\n\n## 데이터 속성이란 무엇인가?\n\n데이터 속성(Data Attributes)은 HTML 요소에 사용자 정의 정보를 저장할 수 있게 해주는 특별한 속성입니다.\n\n이를 쉽게 비유하면, HTML 요소마다 작은 메모장을 하나씩 달아주는 것과 같습니다. 이 메모장에는 해당 요소와 관련된 다양한 정보를 저장할 수 있습니다.\n\n### 데이터 속성의 주요 특징\n\n- 모든 데이터 속성은 반드시 `data-`로 시작해야 합니다\n- HTML 표준을 완전히 준수하면서도 사용자 정의 정보를 저장할 수 있습니다\n- 화면에는 직접 표시되지 않지만, CSS와 JavaScript에서 활용할 수 있습니다\n- 모든 최신 브라우저에서 지원되므로 안정적으로 사용할 수 있습니다\n\n## 데이터 속성을 사용하는 이유\n\n데이터 속성의 유용성을 이해하기 위해 간단한 예를 살펴보겠습니다. 학교 홈페이지에서 학생 목록을 만드는 상황을 가정해보겠습니다:\n\n```html\n<!-- 기존 방식: 추가 정보가 없음 -->\n<div class=\"student\">김철수</div>\n\n<!-- 데이터 속성 활용: 다양한 정보를 포함 -->\n<div class=\"student\" data-grade=\"3\" data-class=\"A\" data-number=\"15\">김철수</div>\n```\n\n위 예제에서 볼 수 있듯이, 데이터 속성을 사용하면 학년, 반, 번호 같은 추가 정보를 HTML에 체계적으로 저장할 수 있습니다. 이러한 정보들은 나중에 JavaScript로 학생을 검색하거나 필터링할 때 매우 유용하게 활용됩니다.\n\n## 데이터 속성 기본 문법\n\n데이터 속성을 올바르게 사용하려면 몇 가지 간단한 규칙만 알면 됩니다.\n\n### 속성 이름 작성 규칙\n\n```html\n<!-- 이렇게 하면 완벽해요! ✅ -->\n<div data-name=\"홍길동\"></div>\n<div data-user-id=\"123\"></div>\n<div data-product-price=\"25000\"></div>\n<div data-is-premium=\"true\"></div>\n\n<!-- 이런 건 안 됩니다 ❌ -->\n<div data=\"value\"></div>\n<!-- data- 뒤에 이름이 없어요 -->\n<div data-=\"value\"></div>\n<!-- 마찬가지로 이름이 없네요 -->\n<div data-Name=\"value\"></div>\n<!-- 대문자는 권장하지 않아요 -->\n```\n\n**주요 규칙:**\n\n- `data-` 뒤에는 반드시 의미 있는 이름을 작성해야 합니다\n- 이름은 소문자와 하이픈(-)을 사용하는 것이 좋습니다\n- 여러 단어를 연결할 때는 `data-user-name`처럼 하이픈을 사용합니다\n\n### 값 없는 데이터 속성\n\n```html\n<!-- 속성의 존재 자체가 의미를 가지는 경우 -->\n<div data-active></div>\n<!-- 활성 상태를 나타냄 -->\n<div data-selected></div>\n<!-- 선택된 상태를 나타냄 -->\n<div data-loading></div>\n<!-- 로딩 중임을 나타냄 -->\n```\n\n## HTML에서 데이터 속성 사용하기\n\n이제 실제 프로젝트에서 데이터 속성을 어떻게 활용하는지 구체적인 예제를 통해 살펴보겠습니다.\n\n### 실제 예제 1: 레벨바\n\n다음은 시스템 리소스 사용량을 표시하는 레벨바 예제입니다:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>시스템 레벨바 예제</title>\n    <style>\n      /* 시스템 정보 컨테이너 스타일 */\n      #sys_info {\n        float: left;\n        background-color: white;\n        border-left: 4px solid #66a4df;\n        border-right: 4px solid #66a4df;\n      }\n\n      /* 리스트 기본 스타일 */\n      #sys_info .sys_info {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n        height: 50px;\n        padding-right: 15px;\n        color: #83b7cb;\n      }\n\n      /* 리스트 아이템 스타일 */\n      #sys_info .sys_info li {\n        display: inline-block; /* 가로로 나열 */\n        height: 100%;\n        text-align: center;\n        font-size: 11px;\n        line-height: 50px;\n      }\n\n      /* 첫 번째 span (라벨) 스타일 */\n      #sys_info .sys_info > li > span:nth-child(odd) {\n        padding: 16px 2px;\n      }\n\n      /* 두 번째 span (레벨바 컨테이너) 스타일 */\n      #sys_info .sys_info > li > span:nth-child(even) {\n        background-color: cadetblue;\n        padding: 16px 3px;\n        color: #000000;\n      }\n\n      /* 레벨바 기본 스타일 */\n      .levelbar {\n        width: 49px;\n        height: 56%;\n        display: inline-block;\n        position: relative;\n        top: 2px;\n        left: -1px;\n      }\n\n      /* 퍼센트 표시 기본값 */\n      .levelbar:before {\n        content: \"0%\";\n        position: absolute;\n        left: 1px;\n        line-height: 44px;\n        width: 47px;\n        text-align: center;\n        font-size: 13px;\n      }\n\n      /* 레벨바 내부 요소들 스타일 */\n      .levelbar > * {\n        width: 100%;\n        height: 31%; /* 5개 요소이므로 각각 약 20% */\n        background-color: white;\n        border-top: 1px solid gray;\n      }\n\n      /* 활성화된 레벨 스타일 */\n      .levelbar > .active {\n        background-color: #5fef3c; /* 밝은 녹색 */\n      }\n\n      /* 데이터 속성 값을 CSS로 표시 - CPU */\n      #cpu.levelbar:before {\n        content: attr(data-cpu) \"%\"; /* data-cpu 속성값 + \"%\" 표시 */\n      }\n\n      /* 데이터 속성 값을 CSS로 표시 - 메모리 */\n      #mem.levelbar:before {\n        content: attr(data-mem) \"%\"; /* data-mem 속성값 + \"%\" 표시 */\n      }\n\n      /* 데이터 속성 값을 CSS로 표시 - 디스크 */\n      #disk.levelbar:before {\n        content: attr(data-disk) \"%\"; /* data-disk 속성값 + \"%\" 표시 */\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"sys_info\">\n      <ul class=\"sys_info\">\n        <li>\n          <span>CPU</span>\n          <!-- CPU 라벨 -->\n          <span>\n            <!-- CPU 사용률을 data-cpu 속성으로 저장 (현재 0%) -->\n            <div id=\"cpu\" class=\"levelbar\" data-cpu=\"0\">\n              <div class=\"level5\"></div>\n              <!-- 레벨 5 (최고) -->\n              <div class=\"level4\"></div>\n              <!-- 레벨 4 -->\n              <div class=\"level3\"></div>\n              <!-- 레벨 3 -->\n              <div class=\"level2\"></div>\n              <!-- 레벨 2 -->\n              <div class=\"level1 active\"></div>\n              <!-- 레벨 1 (최저, 현재 활성) -->\n            </div>\n          </span>\n        </li>\n        <li>\n          <span>MEM</span>\n          <!-- 메모리 라벨 -->\n          <span>\n            <!-- 메모리 사용률을 data-mem 속성으로 저장 (현재 30%) -->\n            <div id=\"mem\" class=\"levelbar\" data-mem=\"30\">\n              <div class=\"level5\"></div>\n              <!-- 레벨 5 (최고) -->\n              <div class=\"level4\"></div>\n              <!-- 레벨 4 -->\n              <div class=\"level3\"></div>\n              <!-- 레벨 3 -->\n              <div class=\"level2\"></div>\n              <!-- 레벨 2 -->\n              <div class=\"level1 active\"></div>\n              <!-- 레벨 1 (최저, 현재 활성) -->\n            </div>\n          </span>\n        </li>\n        <li>\n          <span>DISK</span>\n          <!-- 디스크 라벨 -->\n          <span>\n            <!-- 디스크 사용률을 data-disk 속성으로 저장 (현재 0%) -->\n            <div id=\"disk\" class=\"levelbar\" data-disk=\"0\">\n              <div class=\"level5\"></div>\n              <!-- 레벨 5 (최고) -->\n              <div class=\"level4\"></div>\n              <!-- 레벨 4 -->\n              <div class=\"level3\"></div>\n              <!-- 레벨 3 -->\n              <div class=\"level2\"></div>\n              <!-- 레벨 2 -->\n              <div class=\"level1 active\"></div>\n              <!-- 레벨 1 (최저, 현재 활성) -->\n            </div>\n          </span>\n        </li>\n      </ul>\n    </div>\n  </body>\n</html>\n```\n\n### 실제 예제 2: 화면 비율\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>Aspect Ratio 예제</title>\n    <style>\n      /* 16:9 비율 컨테이너 - data-ratio 속성으로 구분 */\n      .aspectratio[data-ratio=\"16:9\"] {\n        width: 100vw;\n        height: 56.25vw; /* 9/16 = 0.5625 - 16:9 비율 계산 */\n        background: hotpink;\n      }\n\n      /* 4:3 비율 컨테이너 - 클래식 TV/모니터 비율 */\n      .aspectratio[data-ratio=\"4:3\"] {\n        width: 100vw;\n        height: 75vw; /* 3/4 = 0.75 - 4:3 비율 계산 */\n        background: lightblue;\n      }\n\n      /* 1:1 정사각형 비율 - 인스타그램 스타일 */\n      .aspectratio[data-ratio=\"1:1\"] {\n        width: 50vw;\n        height: 50vw;\n        background: lightgreen;\n      }\n\n      /* 모든 요소에 박스 사이징 적용 */\n      * {\n        box-sizing: border-box;\n      }\n\n      /* 페이지 전체 기본 스타일 */\n      body,\n      html {\n        margin: 0;\n        padding: 0;\n        height: 100vh; /* 뷰포트 높이 */\n        width: 100vw; /* 뷰포트 너비 */\n      }\n\n      /* 텍스트 스타일 */\n      p {\n        margin-top: 0;\n        padding: 20px;\n        font-size: 24px;\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <!-- data-ratio 속성으로 16:9 비율 지정 -->\n    <div class=\"aspectratio\" data-ratio=\"16:9\">\n      <p>16:9 비율 컨테이너 (와이드스크린)</p>\n    </div>\n\n    <!-- data-ratio 속성으로 4:3 비율 지정 -->\n    <div class=\"aspectratio\" data-ratio=\"4:3\">\n      <p>4:3 비율 컨테이너 (클래식 비율)</p>\n    </div>\n\n    <!-- data-ratio 속성으로 1:1 비율 지정 -->\n    <div class=\"aspectratio\" data-ratio=\"1:1\">\n      <p>1:1 정사각형 (인스타그램 스타일)</p>\n    </div>\n  </body>\n</html>\n```\n\n### 실제 예제 3: 카운터 버튼\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>카운터 예제</title>\n    <style>\n      /* 카운터 span 기본 스타일 */\n      span {\n        border: 1px solid;\n        padding: 10px 20px;\n        background: #c0ffc0; /* 밝은 녹색 배경 */\n        cursor: pointer; /* 클릭 가능한 커서 */\n        display: inline-block;\n        margin: 5px;\n        font-size: 16px;\n        font-weight: bold;\n        border-radius: 5px; /* 둥근 모서리 */\n      }\n\n      /* 마우스 호버 시 색상 변경 */\n      span:hover {\n        background: #a0ffa0; /* 더 진한 녹색 */\n      }\n\n      /* 컨테이너 중앙 정렬 */\n      .counter-container {\n        text-align: center;\n        margin: 20px;\n      }\n\n      /* 라벨 스타일 */\n      .label {\n        display: block;\n        margin-bottom: 10px;\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"counter-container\">\n      <h2>클릭하여 숫자를 변경하세요:</h2>\n\n      <div class=\"label\">5씩 증가:</div>\n      <!-- data-inc 속성에 증가값 저장 -->\n      <span data-inc=\"5\">0</span>\n\n      <div class=\"label\">7씩 증가:</div>\n      <!-- data-inc 속성에 증가값 저장 -->\n      <span data-inc=\"7\">0</span>\n\n      <div class=\"label\">1씩 증가:</div>\n      <!-- data-inc 속성에 증가값 저장 -->\n      <span data-inc=\"1\">0</span>\n\n      <div class=\"label\">1씩 감소:</div>\n      <!-- data-inc 속성에 음수값으로 감소 설정 -->\n      <span data-inc=\"-1\">0</span>\n    </div>\n\n    <script>\n      // 요소들에 이벤트 리스너를 추가하는 헬퍼 함수\n      function addEventListeners(elements, event_n, attrib_n, func) {\n        var i = elements.length;\n        while (i--) {\n          // 속성 이름을 함수에 바인딩하여 이벤트 리스너 추가\n          elements[i].addEventListener(\n            event_n,\n            func.bind(elements[i], attrib_n)\n          );\n        }\n      }\n\n      // 모든 span 요소에 클릭 이벤트 추가\n      addEventListeners(\n        document.querySelectorAll(\"span\"),\n        \"click\",\n        \"data-inc\",\n        function (attrib_n) {\n          // 현재 텍스트 값과 data-inc 속성값을 숫자로 변환하여 더함\n          // +this.textContent: 현재 표시된 숫자를 가져옴\n          // +this.getAttribute(attrib_n): data-inc 속성값을 가져옴\n          this.textContent = +this.textContent + +this.getAttribute(attrib_n);\n        }\n      );\n    </script>\n  </body>\n</html>\n```\n\n## CSS로 데이터 속성 활용하기\n\nCSS에서 데이터 속성을 활용하면 매우 강력하고 유연한 스타일링을 구현할 수 있습니다. 다양한 활용 방법을 살펴보겠습니다.\n\n### 속성 선택자: 데이터를 기반으로 스타일링하기\n\nCSS에서 데이터 속성을 선택자로 사용하면 요소의 상태에 따라 다른 스타일을 적용할 수 있습니다.\n\n```css\n/* data-status 속성이 있는 모든 요소를 굵게 보이게 */\n[data-status] {\n  font-weight: bold;\n}\n\n/* 활성 상태일 때는 초록색 배경 */\n[data-status=\"active\"] {\n  background-color: #4caf50;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n}\n\n/* 우선순위가 높은 요소는 빨간색 테두리 */\n[data-priority=\"high\"] {\n  border: 2px solid #f44336;\n  box-shadow: 0 2px 4px rgba(244, 67, 54, 0.2);\n}\n\n/* 우선순위가 낮은 요소는 회색으로 */\n[data-priority=\"low\"] {\n  color: #666;\n  opacity: 0.7;\n}\n```\n\n이런 방식으로 설정하면 JavaScript로 데이터 속성만 바꾸는 것만으로도 스타일을 동적으로 변경할 수 있습니다.\n\n### attr() 함수: 데이터 속성 값을 화면에 보여주기\n\nCSS의 `attr()` 함수는 매우 유용한 기능입니다. 이 함수를 사용하면 데이터 속성의 값을 CSS 콘텐츠로 직접 표시할 수 있습니다.\n\n```css\n/* 실제 레벨바 코드 */\n#cpu.levelbar:before {\n  content: attr(data-cpu) \"%\"; /* data-cpu 값을 표시하고 % 붙이기 */\n  position: absolute;\n  right: 10px;\n  color: white;\n}\n\n#mem.levelbar:before {\n  content: attr(data-mem) \"%\"; /* data-mem 값을 표시하고 % 붙이기 */\n}\n\n/* 실제 활용 예제 */\n.price-tag:after {\n  content: \"₩\" attr(data-price); /* 가격 표시 */\n}\n\n.user-badge:before {\n  content: \"Level \" attr(data-level); /* 레벨 표시 */\n}\n```\n\n### 화면 비율 제어: 데이터 속성으로 레이아웃 관리하기\n\n반응형 디자인에서 요소의 비율을 유지하는 것은 매우 중요합니다. 데이터 속성을 활용하면 이를 효율적으로 관리할 수 있습니다.\n\n```css\n/* 16:9 비율 */\n.aspectratio[data-ratio=\"16:9\"] {\n  width: 100%;\n  padding-bottom: 56.25%; /* 9/16 = 0.5625 */\n  position: relative;\n}\n\n/* 4:3 비율 */\n.aspectratio[data-ratio=\"4:3\"] {\n  width: 100%;\n  padding-bottom: 75%; /* 3/4 = 0.75 */\n  position: relative;\n}\n\n/* 1:1 정사각형 비율 */\n.aspectratio[data-ratio=\"1:1\"] {\n  width: 100%;\n  padding-bottom: 100%;\n  position: relative;\n}\n```\n\n### UI 상태 관리: 사용자 인터랙션에 따른 스타일링\n\n사용자의 인터랙션에 따라 UI가 동적으로 변경되어야 할 때 데이터 속성을 활용하면 효과적입니다.\n\n```css\n/* 비활성화된 옵션 */\ndiv.option[data-disabled] {\n  color: #999;\n  cursor: not-allowed;\n  background-color: #f5f5f5;\n}\n\n/* 선택된 옵션 */\ndiv.option[data-checked] {\n  background-color: #2196f3;\n  color: white;\n}\n\n/* 열린 상태의 드롭다운 */\ndiv.select[data-open] {\n  border-color: #2196f3;\n  box-shadow: 0 0 5px rgba(33, 150, 243, 0.5);\n}\n\n/* 여러 개 선택 가능한 셀렉트 박스 */\ndiv.select[data-multiple] div.header {\n  min-height: 40px;\n}\n```\n\n## JavaScript로 데이터 속성 다루기\n\nJavaScript에서 데이터 속성을 다루는 것은 웹 개발에서 매우 중요한 부분입니다. JavaScript를 통해 데이터 속성을 읽고, 수정하고, 삭제하는 다양한 방법들을 살펴보겠습니다.\n\n### dataset 속성: 가장 편리한 방법\n\nJavaScript에서 데이터 속성을 다룰 때 가장 효율적인 방법은 `dataset` 속성을 사용하는 것입니다. 이 방법은 직관적이고 사용하기 간단합니다.\n\n```javascript\n// HTML: <div id=\"player\" data-name=\"김철수\" data-score=\"100\" data-level=\"5\"></div>\n\nconst player = document.getElementById(\"player\");\n\n// 데이터 속성 값 읽기\nconsole.log(player.dataset.name); // \"김철수\"\nconsole.log(player.dataset.score); // \"100\"\nconsole.log(player.dataset.level); // \"5\"\n\n// 데이터 속성 값 수정\nplayer.dataset.score = \"150\"; // 점수를 150으로 업데이트\nplayer.dataset.rank = \"1\"; // 새로운 데이터 속성 추가\n\n// 데이터 속성 삭제\ndelete player.dataset.level; // level 속성 제거\n```\n\n**중요 사항:** `data-user-name`처럼 하이픈이 포함된 속성명은 `dataset.userName`처럼 camelCase로 자동 변환됩니다.\n\n### getAttribute/setAttribute: 전통적인 방법\n\n`dataset`이 더 편리하지만, 경우에 따라 전통적인 방법도 필요할 수 있습니다. 특히 동적으로 속성 이름을 생성해야 하는 경우에 유용합니다.\n\n```javascript\n// 전체 속성 이름을 명시해야 함\nconst score = player.getAttribute(\"data-score\"); // \"150\"\n\n// 속성 값 수정\nplayer.setAttribute(\"data-score\", \"200\");\n\n// 속성 제거\nplayer.removeAttribute(\"data-rank\");\n\n// 동적 속성 이름 생성\nconst statType = \"health\";\nplayer.setAttribute(`data-${statType}`, \"100\");\n```\n\n### 실전 예제: 카운터 구현\n\n```javascript\n// 모든 카운터 span 요소 선택\nconst counters = document.querySelectorAll(\"span[data-inc]\");\n\ncounters.forEach((counter) => {\n  counter.addEventListener(\"click\", function () {\n    // 현재 값과 증가값 가져오기\n    const currentValue = parseInt(this.textContent);\n    const increment = parseInt(this.dataset.inc);\n\n    // 새로운 값 계산하고 표시\n    this.textContent = currentValue + increment;\n  });\n});\n```\n\n### 실전 예제: 필터링 시스템\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>필터링 시스템 예제</title>\n    <style>\n      .filter {\n        margin: 10px 0;\n        padding: 0;\n        list-style: none;\n      }\n\n      .filter li {\n        display: inline-block;\n        margin: 5px;\n      }\n\n      .filter a {\n        display: block;\n        padding: 8px 16px;\n        background: #f0f0f0;\n        color: #333;\n        text-decoration: none;\n        border-radius: 4px;\n        border: 2px solid transparent;\n      }\n\n      .filter a.selected {\n        background: #2196f3;\n        color: white;\n        border-color: #1976d2;\n      }\n\n      .item {\n        display: inline-block;\n        width: 80px;\n        height: 80px;\n        margin: 5px;\n        border-radius: 8px;\n        line-height: 80px;\n        text-align: center;\n        color: white;\n        font-weight: bold;\n      }\n\n      .item.red {\n        background: #f44336;\n      }\n      .item.blue {\n        background: #2196f3;\n      }\n      .item.yellow {\n        background: #ffeb3b;\n        color: #333;\n      }\n      .item.small {\n        width: 60px;\n        height: 60px;\n        line-height: 60px;\n      }\n      .item.big {\n        width: 100px;\n        height: 100px;\n        line-height: 100px;\n      }\n\n      .item.hidden {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>필터링 시스템</h2>\n\n    <div class=\"filters\">\n      <h4>색상</h4>\n      <!-- data-filter-group으로 필터 그룹 구분 -->\n      <ul class=\"filter\" data-filter-group=\"color\">\n        <!-- 빈 값(\"\")은 모든 항목 표시 -->\n        <li><a href=\"#\" data-filter-value=\"\" class=\"selected\">전체</a></li>\n        <!-- 각 필터 옵션의 CSS 클래스를 data-filter-value에 저장 -->\n        <li><a href=\"#\" data-filter-value=\".red\">빨간색</a></li>\n        <li><a href=\"#\" data-filter-value=\".blue\">파란색</a></li>\n        <li><a href=\"#\" data-filter-value=\".yellow\">노란색</a></li>\n      </ul>\n\n      <h4>크기</h4>\n      <!-- 크기 필터 그룹 -->\n      <ul class=\"filter\" data-filter-group=\"size\">\n        <li><a href=\"#\" data-filter-value=\"\" class=\"selected\">전체</a></li>\n        <li><a href=\"#\" data-filter-value=\".small\">작은것</a></li>\n        <li><a href=\"#\" data-filter-value=\".big\">큰것</a></li>\n      </ul>\n    </div>\n\n    <!-- 필터링될 아이템들 -->\n    <div class=\"items\">\n      <!-- 각 아이템은 여러 클래스를 가져 다중 필터 조건에 적용됨 -->\n      <div class=\"item red small\">빨강 작음</div>\n      <!-- red와 small 클래스 -->\n      <div class=\"item red big\">빨강 큼</div>\n      <!-- red와 big 클래스 -->\n      <div class=\"item blue small\">파랑 작음</div>\n      <!-- blue와 small 클래스 -->\n      <div class=\"item blue big\">파랑 큼</div>\n      <!-- blue와 big 클래스 -->\n      <div class=\"item yellow small\">노랑 작음</div>\n      <!-- yellow와 small 클래스 -->\n      <div class=\"item yellow big\">노랑 큼</div>\n      <!-- yellow와 big 클래스 -->\n      <div class=\"item red\">빨강</div>\n      <!-- red 클래스만 -->\n      <div class=\"item blue\">파랑</div>\n      <!-- blue 클래스만 -->\n      <div class=\"item yellow\">노랑</div>\n      <!-- yellow 클래스만 -->\n    </div>\n\n    <script>\n      // 현재 선택된 필터들을 저장하는 객체\n      const filters = {};\n\n      // 모든 필터 링크에 클릭 이벤트 추가\n      document.querySelectorAll(\".filter a\").forEach((link) => {\n        link.addEventListener(\"click\", function (e) {\n          e.preventDefault(); // 기본 링크 동작 방지\n\n          // 같은 그룹의 다른 링크에서 selected 클래스 제거\n          this.closest(\".filter\")\n            .querySelectorAll(\"a\")\n            .forEach((a) => {\n              a.classList.remove(\"selected\");\n            });\n\n          // 현재 클릭된 링크에 selected 클래스 추가\n          this.classList.add(\"selected\");\n\n          // data-filter-group 속성에서 필터 그룹 이름 가져오기\n          const filterGroup = this.closest(\".filter\").dataset.filterGroup;\n          // data-filter-value 속성에서 필터 값 가져오기\n          const filterValue = this.dataset.filterValue;\n\n          // 필터 객체에 현재 선택 상태 저장\n          filters[filterGroup] = filterValue;\n\n          // 필터 적용 함수 호출\n          applyFilters();\n        });\n      });\n\n      // 선택된 필터에 따라 아이템들을 표시/숨김 처리하는 함수\n      function applyFilters() {\n        const items = document.querySelectorAll(\".item\");\n\n        items.forEach((item) => {\n          let show = true; // 기본적으로 아이템을 보여줌\n\n          // 각 필터 그룹의 조건을 확인\n          for (let group in filters) {\n            const filterValue = filters[group];\n            // 필터 값이 있고, 아이템이 해당 클래스를 가지지 않으면 숨김\n            if (\n              filterValue &&\n              !item.classList.contains(filterValue.replace(\".\", \"\"))\n            ) {\n              show = false;\n              break; // 하나라도 조건에 맞지 않으면 반복 중단\n            }\n          }\n\n          // 조건에 따라 아이템 표시/숨김\n          item.classList.toggle(\"hidden\", !show);\n        });\n      }\n    </script>\n  </body>\n</html>\n```\n\n### kebab-case와 camelCase 변환\n\n```javascript\n// HTML: <div data-user-name=\"홍길동\" data-phone-number=\"010-1234-5678\"></div>\n\nconst element = document.querySelector(\"div\");\n\n// kebab-case → camelCase 자동 변환\nconsole.log(element.dataset.userName); // \"홍길동\"\nconsole.log(element.dataset.phoneNumber); // \"010-1234-5678\"\n\n// JavaScript에서 camelCase로 설정하면\nelement.dataset.homeAddress = \"서울시 강남구\";\n// HTML에는 data-home-address=\"서울시 강남구\"로 저장됨\n```\n\n## 실무에서 바로 쓸 수 있는 예제들\n\n이제 지금까지 배운 내용을 바탕으로 실제 프로젝트에서 활용할 수 있는 완전한 예제들을 살펴보겠습니다. 이 예제들은 실무에서 바로 사용하거나 프로젝트에 응용할 수 있도록 구성했습니다.\n\n### 예제 1: 할 일 목록 (Todo List)\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .todo-item {\n        padding: 10px;\n        margin: 5px;\n        background: #f0f0f0;\n        cursor: pointer;\n      }\n\n      .todo-item[data-completed=\"true\"] {\n        text-decoration: line-through;\n        background: #d0d0d0;\n      }\n\n      .todo-item[data-priority=\"high\"] {\n        border-left: 5px solid red;\n      }\n\n      .todo-item[data-priority=\"medium\"] {\n        border-left: 5px solid orange;\n      }\n\n      .todo-item[data-priority=\"low\"] {\n        border-left: 5px solid green;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"todo-list\">\n      <div\n        class=\"todo-item\"\n        data-id=\"1\"\n        data-completed=\"false\"\n        data-priority=\"high\"\n      >\n        수학 숙제하기\n      </div>\n      <div\n        class=\"todo-item\"\n        data-id=\"2\"\n        data-completed=\"false\"\n        data-priority=\"medium\"\n      >\n        방 청소하기\n      </div>\n      <div\n        class=\"todo-item\"\n        data-id=\"3\"\n        data-completed=\"true\"\n        data-priority=\"low\"\n      >\n        책 읽기\n      </div>\n    </div>\n\n    <script>\n      // 클릭하면 완료 상태 토글\n      document.querySelectorAll(\".todo-item\").forEach((item) => {\n        item.addEventListener(\"click\", function () {\n          const isCompleted = this.dataset.completed === \"true\";\n          this.dataset.completed = !isCompleted;\n        });\n      });\n    </script>\n  </body>\n</html>\n```\n\n### 예제 2: 이미지 갤러리\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .gallery {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: 10px;\n      }\n\n      .gallery img {\n        width: 100%;\n        cursor: pointer;\n        transition: transform 0.3s;\n      }\n\n      .gallery img:hover {\n        transform: scale(1.05);\n      }\n\n      .modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        justify-content: center;\n        align-items: center;\n      }\n\n      .modal[data-visible=\"true\"] {\n        display: flex;\n      }\n\n      .modal-info {\n        color: white;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"gallery\">\n      <img\n        src=\"photo1.jpg\"\n        data-title=\"서울 야경\"\n        data-date=\"2024-01-15\"\n        data-location=\"남산타워\"\n      />\n      <img\n        src=\"photo2.jpg\"\n        data-title=\"부산 해변\"\n        data-date=\"2024-02-20\"\n        data-location=\"해운대\"\n      />\n      <img\n        src=\"photo3.jpg\"\n        data-title=\"제주도 풍경\"\n        data-date=\"2024-03-10\"\n        data-location=\"한라산\"\n      />\n    </div>\n\n    <div class=\"modal\" data-visible=\"false\">\n      <div class=\"modal-content\">\n        <img id=\"modal-img\" src=\"\" style=\"max-width: 80%;\" />\n        <div class=\"modal-info\">\n          <h2 id=\"modal-title\"></h2>\n          <p id=\"modal-date\"></p>\n          <p id=\"modal-location\"></p>\n        </div>\n      </div>\n    </div>\n\n    <script>\n      const modal = document.querySelector(\".modal\");\n      const modalImg = document.getElementById(\"modal-img\");\n      const modalTitle = document.getElementById(\"modal-title\");\n      const modalDate = document.getElementById(\"modal-date\");\n      const modalLocation = document.getElementById(\"modal-location\");\n\n      // 이미지 클릭시 모달 열기\n      document.querySelectorAll(\".gallery img\").forEach((img) => {\n        img.addEventListener(\"click\", function () {\n          modalImg.src = this.src;\n          modalTitle.textContent = this.dataset.title;\n          modalDate.textContent = `촬영일: ${this.dataset.date}`;\n          modalLocation.textContent = `장소: ${this.dataset.location}`;\n          modal.dataset.visible = \"true\";\n        });\n      });\n\n      // 모달 클릭시 닫기\n      modal.addEventListener(\"click\", function () {\n        this.dataset.visible = \"false\";\n      });\n    </script>\n  </body>\n</html>\n```\n\n### 예제 3: 동적 차트\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .chart {\n        width: 300px;\n        margin: 20px;\n      }\n\n      .bar {\n        height: 30px;\n        background: #e0e0e0;\n        margin: 10px 0;\n        position: relative;\n        border-radius: 15px;\n        overflow: hidden;\n      }\n\n      .bar-fill {\n        height: 100%;\n        background: linear-gradient(to right, #4caf50, #8bc34a);\n        transition: width 1s ease;\n        width: 0;\n      }\n\n      .bar[data-category=\"cpu\"] .bar-fill {\n        background: linear-gradient(to right, #2196f3, #03a9f4);\n      }\n\n      .bar[data-category=\"memory\"] .bar-fill {\n        background: linear-gradient(to right, #ff9800, #ffc107);\n      }\n\n      .bar[data-category=\"disk\"] .bar-fill {\n        background: linear-gradient(to right, #9c27b0, #e91e63);\n      }\n\n      .bar-label {\n        position: absolute;\n        right: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        font-weight: bold;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"chart\">\n      <h3>시스템 상태</h3>\n      <div class=\"bar\" data-category=\"cpu\" data-value=\"0\">\n        <div class=\"bar-fill\"></div>\n        <span class=\"bar-label\">CPU: <span class=\"value\">0</span>%</span>\n      </div>\n      <div class=\"bar\" data-category=\"memory\" data-value=\"0\">\n        <div class=\"bar-fill\"></div>\n        <span class=\"bar-label\">메모리: <span class=\"value\">0</span>%</span>\n      </div>\n      <div class=\"bar\" data-category=\"disk\" data-value=\"0\">\n        <div class=\"bar-fill\"></div>\n        <span class=\"bar-label\">디스크: <span class=\"value\">0</span>%</span>\n      </div>\n    </div>\n\n    <button onclick=\"updateChart()\">차트 업데이트</button>\n\n    <script>\n      function updateChart() {\n        document.querySelectorAll(\".bar\").forEach((bar) => {\n          // 랜덤 값 생성 (0~100)\n          const randomValue = Math.floor(Math.random() * 101);\n\n          // 데이터 속성 업데이트\n          bar.dataset.value = randomValue;\n\n          // 막대 채우기\n          const fill = bar.querySelector(\".bar-fill\");\n          fill.style.width = randomValue + \"%\";\n\n          // 라벨 업데이트\n          const valueSpan = bar.querySelector(\".value\");\n          valueSpan.textContent = randomValue;\n\n          // 색상 변경 (위험 수준에 따라)\n          if (randomValue > 80) {\n            fill.style.background =\n              \"linear-gradient(to right, #f44336, #e91e63)\";\n          }\n        });\n      }\n\n      // 페이지 로드시 초기 업데이트\n      updateChart();\n    </script>\n  </body>\n</html>\n```\n\n## 알아두면 좋은 주의사항들\n\n데이터 속성을 효과적이고 올바르게 사용하기 위해 주의해야 할 사항들을 정리해보겠습니다.\n\n### 이런 건 하지 마세요! ❌\n\n이런 실수들은 초보자들이 자주 범하는 오류들입니다. 미리 알아두시면 시행착오를 줄일 수 있습니다.\n\n```html\n<!-- 중요한 콘텐츠를 데이터 속성에 넣지 마세요 -->\n<div data-title=\"중요한 제목\"></div>\n<!-- ❌ 잘못됨 -->\n<div><h1>중요한 제목</h1></div>\n<!-- ✅ 올바름 -->\n\n<!-- 스타일 정보를 데이터 속성에 넣지 마세요 -->\n<div data-color=\"red\" data-size=\"large\"></div>\n<!-- ❌ 잘못됨 -->\n<div class=\"text-red text-large\"></div>\n<!-- ✅ 올바름 -->\n\n<!-- 민감한 정보를 데이터 속성에 넣지 마세요 -->\n<div data-password=\"1234\"></div>\n<!-- ❌ 절대 안됨! -->\n<div data-user-id=\"guest123\"></div>\n<!-- ✅ 괜찮음 -->\n```\n\n### 이렇게 하면 완벽해요! ✅\n\n다음과 같이 사용하면 깔끔하고 유지보수하기 쉬운 코드를 작성할 수 있습니다.\n\n```html\n<!-- 의미 있는 이름 사용하기 -->\n<button data-action=\"delete\" data-item-id=\"123\">삭제</button>\n\n<!-- 일관성 있는 네이밍 -->\n<div\n  data-product-id=\"1\"\n  data-product-name=\"노트북\"\n  data-product-price=\"1000000\"\n></div>\n\n<!-- 적절한 데이터 타입 고려하기 -->\n<div data-items='[\"사과\", \"바나나\", \"오렌지\"]'></div>\n<!-- JSON 문자열 -->\n```\n\n### 성능도 생각해야죠\n\n데이터 속성을 많이 사용할 때는 성능에 대한 고려도 필요합니다. 여러 개의 속성을 한 번에 처리하는 것이 효율적입니다.\n\n```javascript\n// 데이터 속성이 많을 때는 한 번에 처리하기\nconst element = document.querySelector(\".product\");\n\n// 비효율적 ❌\nelement.dataset.name = \"노트북\";\nelement.dataset.price = \"1000000\";\nelement.dataset.category = \"전자제품\";\n\n// 효율적 ✅\nObject.assign(element.dataset, {\n  name: \"노트북\",\n  price: \"1000000\",\n  category: \"전자제품\",\n});\n```\n\n### 브라우저 호환성은 걱정 마세요!\n\n다행히 데이터 속성은 오래전부터 대부분의 브라우저에서 지원되어 왔습니다.\n\n데이터 속성은 모든 최신 브라우저에서 지원됩니다:\n\n- Chrome ✅\n- Firefox ✅\n- Safari ✅\n- Edge ✅\n- Internet Explorer 11 ✅\n\n## 마무리\n\n이번 글에서는 HTML 데이터 속성의 개념부터 실제 활용 방법까지 자세히 살펴보았습니다.\n\nHTML 데이터 속성은 웹 개발에서 매우 유용한 기능입니다. 핵심 내용을 정리해보면 다음과 같습니다:\n\n📝 **HTML**에서 `data-*` 형식으로 구조화된 정보를 저장하고  \n🎨 **CSS**에서 속성 선택자와 `attr()` 함수를 활용해 동적인 스타일링을 구현하고  \n⚡ **JavaScript**에서 `dataset` 속성을 통해 효율적으로 데이터를 조작할 수 있습니다.\n\n이러한 활용법을 잘 익혀두면 더욱 체계적이고 유지보수가 쉬운 웹 애플리케이션을 개발할 수 있습니다.\n",
      "content_text": "HTML data 속성 활용법부터 CSS attr() 함수, JavaScript dataset까지. 실무 예제로 배우는 데이터 속성 완전 가이드",
      "url": "https://leeduhan.github.io/posts/css/html-data-attributes-guide/",
      "date_published": "2025-07-27T00:00:00.000Z",
      "authors": [
        {
          "name": "hanlee",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "HTML",
        "CSS",
        "JavaScript",
        "Data Attributes",
        "dataset",
        "attr()",
        "DOM",
        "웹개발"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/2025-07-23-react-typing-component/",
      "title": "React 타이핑 효과 컴포넌트 만들기 - HTML 태그와 이모지 완벽 지원",
      "content_html": "\n타이핑 효과는 웹사이트에 생동감을 더하고 사용자의 주의를 끌 수 있는 효과적인 방법입니다. 이번 포스트에서는 React로 타이핑 효과 컴포넌트를 만드는 방법을 상세히 알아보겠습니다. 특히 HTML 태그와 복잡한 이모지를 완벽하게 지원하는 고급 기능까지 구현해보겠습니다.\n\n## 주요 기능\n\n우리가 만들 타이핑 컴포넌트의 주요 기능은 다음과 같습니다:\n\n- ✨ ReactNode children 지원 (HTML 태그 포함)\n- 🎯 복잡한 이모지 완벽 지원 (👨‍💻, 🧑🏻‍💻 등)\n- ⚡ 즉시 표시 모드 지원\n- ⏸️ 일시정지/재개 기능\n- 🎨 커스터마이징 가능한 스타일\n- 🔄 ref를 통한 제어 메서드 제공\n\n## 컴포넌트 인터페이스 정의\n\n먼저 컴포넌트의 Props와 Ref 인터페이스를 정의합니다:\n\n```typescript\nexport interface TypingProps {\n  children: ReactNode;         // 타이핑할 콘텐츠\n  speed?: number;             // 글자당 타이핑 속도 (ms)\n  showCursor?: boolean;       // 커서 표시 여부\n  onComplete?: () => void;    // 타이핑 완료 시 콜백\n  className?: string;         // 컨테이너 클래스명\n  cursorClassName?: string;   // 커서 추가 클래스명\n  immediate?: boolean;        // 즉시 표시 모드\n  initialPaused?: boolean;    // 일시정지 상태로 시작\n}\n\nexport interface TypingRef {\n  reset: () => void;     // 타이핑을 처음부터 다시 시작\n  pause: () => void;     // 타이핑 일시정지\n  resume: () => void;    // 타이핑 재개\n  complete: () => void;  // 타이핑을 즉시 완료\n}\n```\n\n## 핵심 구현\n\n### 1. ReactNode를 HTML 문자열로 변환\n\n가장 먼저 해결해야 할 문제는 ReactNode를 HTML 문자열로 변환하는 것입니다. 이를 통해 JSX로 작성된 복잡한 구조도 타이핑 효과로 표현할 수 있습니다:\n\n```typescript\nconst convertedText = useMemo(() => {\n  // ReactNode를 문자열로 변환하는 재귀 함수\n  const nodeToString = (node: ReactNode): string => {\n    // 문자열이나 숫자인 경우 그대로 반환\n    if (typeof node === 'string' || typeof node === 'number') {\n      return String(node);\n    }\n\n    // 배열인 경우 각 요소를 변환하고 합침\n    if (Array.isArray(node)) {\n      return node.map(nodeToString).join('');\n    }\n\n    // React 엘리먼트인 경우\n    if (node && typeof node === 'object' && 'props' in node) {\n      const element = node as any;\n      const { children: elementChildren, ...props } = element.props || {};\n\n      // HTML 태그 생성\n      const tagName = element.type || 'span';\n      \n      // 속성 처리 (className → class, style 객체 → 문자열 등)\n      const attributes = Object.entries(props)\n        .filter(([key]) => key !== 'children')\n        .map(([key, value]) => {\n          if (key === 'className') {\n            return `class=\"${value}\"`;\n          }\n          if (key === 'style' && typeof value === 'object' && value !== null) {\n            // style 객체를 CSS 문자열로 변환\n            const styleStr = Object.entries(value)\n              .map(([k, v]) => `${k.replace(/([A-Z])/g, '-$1').toLowerCase()}:${v}`)\n              .join(';');\n            return `style=\"${styleStr}\"`;\n          }\n          return `${key}=\"${value}\"`;\n        })\n        .join(' ');\n\n      const openTag = `<${tagName}${attributes ? ' ' + attributes : ''}>`;\n      const closeTag = `</${tagName}>`;\n      const childContent = elementChildren ? nodeToString(elementChildren) : '';\n\n      return `${openTag}${childContent}${closeTag}`;\n    }\n\n    return '';\n  };\n\n  return nodeToString(children);\n}, [children]);\n```\n\n### 2. 이모지 및 복합 문자 처리\n\n복잡한 이모지(예: 👨‍💻, 🧑🏻‍💻)는 여러 개의 유니코드 문자가 결합된 형태입니다. 이를 올바르게 처리하려면 특별한 로직이 필요합니다:\n\n```typescript\nconst getNextCharacterIndex = useCallback((text: string, currentIndex: number): number => {\n  if (currentIndex >= text.length) {\n    return currentIndex;\n  }\n\n  // 현재 문자의 코드 포인트 가져오기\n  const codePoint = text.codePointAt(currentIndex);\n  if (!codePoint) {\n    return currentIndex + 1;\n  }\n\n  // 서로게이트 페어 처리 (4바이트 유니코드)\n  // 0xFFFF보다 큰 코드 포인트는 2개의 16비트 값으로 표현됨\n  if (codePoint > 0xffff) {\n    return currentIndex + 2;\n  }\n\n  // 이모지 범위 확인 함수\n  const isEmoji = (code: number): boolean => {\n    return (\n      (code >= 0x1f600 && code <= 0x1f64f) || // Emoticons\n      (code >= 0x1f300 && code <= 0x1f5ff) || // Misc Symbols and Pictographs\n      (code >= 0x1f680 && code <= 0x1f6ff) || // Transport and Map\n      (code >= 0x1f1e6 && code <= 0x1f1ff) || // Regional indicators\n      (code >= 0x2600 && code <= 0x26ff) ||   // Misc symbols\n      (code >= 0x2700 && code <= 0x27bf) ||   // Dingbats\n      (code >= 0xfe00 && code <= 0xfe0f) ||   // Variation Selectors\n      (code >= 0x1f900 && code <= 0x1f9ff) || // Supplemental Symbols and Pictographs\n      (code >= 0x1f018 && code <= 0x1f270) || // Various symbols\n      code === 0x200d || // Zero Width Joiner (ZWJ)\n      code === 0x20e3    // Combining Enclosing Keycap\n    );\n  };\n\n  // 이모지인 경우 복합 이모지 확인\n  if (isEmoji(codePoint)) {\n    let nextIndex = currentIndex + (codePoint > 0xffff ? 2 : 1);\n\n    // 복합 이모지 처리 (ZWJ 시퀀스, 스킨톤 수식어 등)\n    while (nextIndex < text.length) {\n      const nextCodePoint = text.codePointAt(nextIndex);\n      if (!nextCodePoint) {\n        break;\n      }\n\n      // Zero Width Joiner나 Variation Selector가 있으면 계속 진행\n      if (\n        nextCodePoint === 0x200d || // ZWJ (이모지 결합자)\n        (nextCodePoint >= 0xfe00 && nextCodePoint <= 0xfe0f) || // Variation Selectors\n        (nextCodePoint >= 0x1f3fb && nextCodePoint <= 0x1f3ff) || // Skin tone modifiers\n        nextCodePoint === 0x20e3 // Combining Enclosing Keycap\n      ) {\n        nextIndex += nextCodePoint > 0xffff ? 2 : 1;\n\n        // ZWJ 다음에 오는 이모지도 포함\n        if (nextCodePoint === 0x200d && nextIndex < text.length) {\n          const followingCodePoint = text.codePointAt(nextIndex);\n          if (followingCodePoint && isEmoji(followingCodePoint)) {\n            nextIndex += followingCodePoint > 0xffff ? 2 : 1;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    return nextIndex;\n  }\n\n  // 일반 문자는 1글자씩\n  return currentIndex + 1;\n}, []);\n```\n\n### 3. 문자 경계 사전 계산\n\n성능 최적화를 위해 텍스트가 변경될 때 문자 경계를 미리 계산합니다. 이렇게 하면 타이핑 애니메이션 중에 복잡한 계산을 반복하지 않아도 됩니다:\n\n```typescript\nuseEffect(() => {\n  textContentRef.current = convertedText;\n\n  // immediate 모드일 경우 즉시 전체 텍스트 표시\n  if (immediate) {\n    setDisplayedContent(convertedText);\n    setIsComplete(true);\n    onComplete?.();\n    return;\n  }\n\n  // 문자 경계를 미리 계산\n  const boundaries: number[] = [0];\n  let i = 0;\n\n  while (i < convertedText.length) {\n    if (convertedText[i] === '<') {\n      // HTML 태그는 전체를 하나의 단위로 처리\n      const tagEnd = findTagEnd(convertedText, i);\n      i = tagEnd;\n    } else {\n      // 일반 문자나 이모지 처리\n      i = getNextCharacterIndex(convertedText, i);\n    }\n    boundaries.push(i);\n  }\n\n  characterBoundariesRef.current = boundaries;\n  reset();\n}, [convertedText, reset, findTagEnd, getNextCharacterIndex, immediate, onComplete]);\n```\n\n### 4. 타이핑 애니메이션 구현\n\nrequestAnimationFrame을 사용하여 부드러운 타이핑 애니메이션을 구현합니다:\n\n```typescript\nuseEffect(() => {\n  if (\n    !textContentRef.current ||\n    isPaused ||\n    isComplete ||\n    characterBoundariesRef.current.length === 0 ||\n    immediate\n  ) {\n    return;\n  }\n\n  let boundaryIndex = 0;\n\n  const typeWriter = (timestamp: number) => {\n    // 시간 추적을 위한 초기화\n    if (!lastTimeRef.current) {\n      lastTimeRef.current = timestamp;\n    }\n\n    const elapsed = timestamp - lastTimeRef.current;\n    totalTimeRef.current += elapsed;\n    lastTimeRef.current = timestamp;\n\n    const text = textContentRef.current;\n    const boundaries = characterBoundariesRef.current;\n\n    // speed 밀리초마다 한 문자씩 추가\n    while (totalTimeRef.current >= speed && boundaryIndex < boundaries.length - 1) {\n      boundaryIndex++;\n\n      // HTML 태그가 아닌 경우에만 시간 소모\n      // (태그는 즉시 렌더링되어야 하므로)\n      const currentPos = boundaries[boundaryIndex - 1];\n      if (currentPos < text.length && text[currentPos] !== '<') {\n        totalTimeRef.current -= speed;\n      }\n    }\n\n    // 현재 경계까지의 내용 렌더링\n    const currentBoundary = boundaries[Math.min(boundaryIndex, boundaries.length - 1)];\n    const currentContent = text.substring(0, currentBoundary);\n    setDisplayedContent(currentContent);\n\n    // 타이핑이 완료되었는지 확인\n    if (boundaryIndex >= boundaries.length - 1) {\n      setIsComplete(true);\n      animationIdRef.current = null;\n      onComplete?.();\n    } else if (!isPaused) {\n      // 다음 프레임 요청\n      animationIdRef.current = requestAnimationFrame(typeWriter);\n    }\n  };\n\n  // 애니메이션 시작\n  animationIdRef.current = requestAnimationFrame(typeWriter);\n\n  // 클린업 함수\n  return () => {\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n  };\n}, [speed, onComplete, isPaused, isComplete, immediate]);\n```\n\n### 5. 커서 애니메이션\n\nCSS 모듈을 사용하여 깜빡이는 커서를 구현합니다:\n\n```css\n/* typing.module.css */\n@keyframes blink {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.cursor {\n  animation: blink 0.7s infinite;\n}\n```\n\n## 사용 예제\n\n### 기본 사용법\n\n```tsx\n<Typing speed={100}>\n  안녕하세요! 타이핑 효과 예제입니다.\n</Typing>\n```\n\n### HTML 태그와 스타일 포함\n\n```tsx\n<Typing speed={80} className=\"text-lg font-bold\">\n  오늘의 <span className=\"text-red-500\">중요한</span> 일정을\n  <br />\n  확인해보세요!\n</Typing>\n```\n\n### Ref를 통한 제어\n\n```tsx\nconst typingRef = useRef<TypingRef>(null);\n\nreturn (\n  <div>\n    <Typing ref={typingRef} speed={100}>\n      제어 가능한 타이핑 텍스트입니다.\n    </Typing>\n    \n    <div className=\"mt-4 space-x-2\">\n      <button onClick={() => typingRef.current?.pause()}>일시정지</button>\n      <button onClick={() => typingRef.current?.resume()}>재개</button>\n      <button onClick={() => typingRef.current?.reset()}>리셋</button>\n      <button onClick={() => typingRef.current?.complete()}>완료</button>\n    </div>\n  </div>\n);\n```\n\n### 순차적 타이핑\n\n```tsx\nconst [step, setStep] = useState(0);\n\nreturn (\n  <div className=\"space-y-4\">\n    <Typing\n      speed={100}\n      onComplete={() => setStep(1)}\n    >\n      첫 번째 메시지입니다.\n    </Typing>\n    \n    {step >= 1 && (\n      <Typing\n        speed={100}\n        onComplete={() => setStep(2)}\n      >\n        두 번째 메시지가 나타납니다.\n      </Typing>\n    )}\n    \n    {step >= 2 && (\n      <Typing speed={100}>\n        마지막 메시지입니다! 🎉\n      </Typing>\n    )}\n  </div>\n);\n```\n\n## 성능 최적화\n\n이 컴포넌트는 다음과 같은 성능 최적화 기법을 사용합니다:\n\n1. **useMemo**: ReactNode to HTML 변환 결과를 메모이제이션\n2. **useCallback**: 자주 호출되는 함수들을 메모이제이션\n3. **사전 계산**: 문자 경계를 미리 계산하여 애니메이션 중 연산 최소화\n4. **requestAnimationFrame**: 브라우저의 리페인트 주기에 맞춘 부드러운 애니메이션\n\n## 마무리\n\n이렇게 구현한 타이핑 컴포넌트는 단순한 텍스트뿐만 아니라 복잡한 HTML 구조와 이모지도 완벽하게 처리할 수 있습니다. ref를 통한 제어 기능으로 다양한 인터랙션도 구현할 수 있어 실제 프로젝트에서 유용하게 사용할 수 있을 것입니다.\n\n[React 공식 문서](https://react.dev/)의 권장사항에 따라 React 19의 새로운 기능들을 활용하여 구현했으며, TypeScript로 타입 안전성도 확보했습니다. 이 컴포넌트를 기반으로 여러분만의 창의적인 타이핑 효과를 만들어보세요!",
      "content_text": "React에서 타이핑 효과를 구현하는 컴포넌트를 만들어봅니다. ReactNode children 지원, 복잡한 이모지 처리, 일시정지/재개 기능 등 다양한 기능을 포함한 완성도 높은 컴포넌트를 구현합니다.",
      "url": "https://leeduhan.github.io/posts/react/2025-07-23-react-typing-component/",
      "date_published": "2025-07-23T00:00:00.000Z",
      "authors": [
        {
          "name": "",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "React",
        "TypeScript",
        "Component",
        "Animation",
        "UI",
        "Typing Effect React component"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-07-11-claude-code-review/",
      "title": "AI는 내 일자리의 강탈자가 아니다. 내 동료이고 스승이며 후임이다.",
      "content_html": "\n# AI는 내 일자리의 강탈자가 아니다. 내 동료이고 스승이며 후임이다.\n\nAI를 사용하면서 느낀 것은 AI가 내가 처음 학습을 시작할 때 모르는 것을 알려주는 좋은 스승이자, 코드를 작성할 때 어떻게 구현하는 것이 좋은지 토론할 수 있는 동료이자, 실제 작업을 진행할 때 방법을 학습시키고 제대로 구현되었는지 확인하는 후임 같은 존재라는 것이다.\n\n함께 가는 동반자이지 나를 대체하는 존재가 아니다. 다만 학습해야 하는 방향성이나 업무 패러다임은 많은 변화가 있을 것이 확실하다. 하지만 개발 자체를 대체하지는 않는다는 것도 사실이다.\n\n## 결국은 사람이 해야 한다\n\nAI가 모든 것을 다 해주는 것 같지만, 결국 무엇을 해야 할지 정하고 어떤 방식으로 어떤 기술을 사용할지 결정하는 것은 사람이다. AI는 그 과정에서 고민하고 학습하고 커뮤니케이션하는 비용을 획기적으로 줄여줄 뿐, 실제 의사결정과 방향성 제시는 사람의 몫이다.\n\n비개발자도 AI의 도움으로 개발을 할 수 있다고 하지만, 이는 초기 단계에만 적용된다. 시스템이 복잡해질수록, 다양한 예외 상황을 고려해야 할수록 기본적인 개발 지식 없이는 진행이 어려워진다.\n\n또한 문제 해결 방법이 적절하지 않다면, 다음 문제를 해결할 때 기존 코드 구조가 모래성처럼 무너질 가능성이 높다. 이를 방지하려면 AI가 올바른 학습을 해야 하고, **학습의 내용과 품질, 그리고 방향을 결정하고 지도하는 주체는 결국 사람**이어야 한다. \n\n## CLI 버전의 무한한 가능성\n\nCLI 버전이야말로 개발 AI 도구로서 가장 완벽하다고 생각한다. 터미널상에서 사용할 수 있는 기본 모듈이나 표준화된 도구들이 매우 많고, AI는 이러한 도구들을 매우 잘 활용한다. 그래서 일반적으로 이야기하는 워크플로우도 별다른 설정 없이 미리 정해진 프롬프트만 실행하면 웬만한 워크플로를 구축할 수 있다. 여기에 [MCP(Model Context Protocol)](https://modelcontextprotocol.io/)까지 연결하게 되면 가능성은 더욱 확장된다.\n\n예를 들어, 일정 시간마다 나에게 할당된 Jira 티켓이 있는지 확인해서 대기 중인 티켓만 골라 각각의 티켓을 해결하는 worktree를 생성하고, 개별로 작업을 수행한 후 그 결과를 PR로 자동 생성하는 워크플로우를 구축하고 싶다고 하자.\n\n먼저 Jira를 MCP로 연결하거나 curl로 [Jira REST API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/)에 접근해서 나에게 할당된 티켓 정보를 가져올 수 있다. 이 중에서 특정 상태인 티켓만 필터링하는 것도 가능하다. 이 과정도 API 문서만 제공해서 학습시키면 관련된 동작을 잘 수행할 것이고, 성공한 결과를 가지고 프롬프트로 만들어서 실행해 보면서 예외 케이스를 추가하면 된다.\n\n여기까지 되면 Jira 티켓 번호로 로컬에 브랜치를 생성하게 하면 된다. Git 터미널도 있고 [GitHub API](https://docs.github.com/en/rest)도 존재하기 때문에 이를 이용해서 브랜치를 생성하게 하고, Jira의 내용을 바탕으로 문제를 해결하는 코드를 스스로 작성하게 할 수도 있다.\n\n그다음에 작업이 완료되었다고 판단되면 PR을 원격에 생성하게 하면 된다. 개발자는 이 생성된 PR을 검토하거나 브랜치를 로컬로 가져와서 실행해 보면서 수정사항이나 미비 사항을 Jira에 남기거나 PR에 리뷰로 남기면, AI가 이를 다시 인식하게 할 수 있다 (인식시키는 방법은 Git 트리거를 사용하거나 일정 시간마다 호출하는 방식을 사용하면 된다).\n\n이 과정을 반복하다 보면 자잘한 이슈는 자동으로 해결되고, 사람은 AI가 처리하기 어려운 복잡한 문제나 제대로 구현되지 않은 부분만 처리하면 된다. 즉, 개발 생산성이 크게 향상되는 것이다.\n\n이렇게 터미널 기반으로 AI 개발 환경을 구현한다는 것은 생각보다 상상하는 모든 것을 가능하게 할 수도 있다.\n\n## 똑똑한 AI vs 성능이 낮은 AI\n\n[Claude](https://www.anthropic.com/claude), [Gemini](https://gemini.google.com/), [ChatGPT](https://openai.com/chatgpt), [Grok](https://grok.x.ai/) 등 여러 다양한 AI를 사용하다 보면 같은 질문에 전부 다른 답변을 한다. 답변의 품질은 결국 토큰을 얼마나 사용했느냐와 얼마나 많은 데이터로 학습되었느냐에 따라서 달라지는 것 같다.\n\n그렇다면 성능이 높은 AI가 항상 좋을까?\n\n실제 업무에 활용해보면서 느낀 것은 고성능 AI는 토큰을 많이 사용한다는 점이다. 즉, 비용이 문제가 된다. 그렇다고 저렴한 모델을 사용하면 답변의 품질이 문제가 된다.\n\n그렇다면 성능이 낮은 AI는 불필요한 것일까?\n\n사실 그렇지 않다. 결국 사람이 질문을 하는 것이기 때문에 질문의 수준과 난이도를 낮추면 토큰을 많이 사용하지 못하는 AI도 문제없이 작업을 수행하고 원하는 품질의 결과를 낸다. \n\n즉, 문제를 잘게 쪼개서 해당 AI가 질문을 이해하고 처리할 수 있는 토큰 사용량에 맞게 작업을 시키면 답변의 품질은 크게 차이나지 않는다.\n\n결국 핵심은 **AI의 토큰 사용량에 맞게 얼마나 작업을 작게 쪼개서 분배하고 다시 합칠 수 있느냐, 그 설계를 어떻게 할 것이냐**이다.\n\n토큰을 많이 소모하는 고성능 모델은 추상적이거나 애매한 질문에도 좋은 품질을 보여주기 때문에 복잡한 문제를 해결하거나 조각나 있는 프로젝트를 하나로 통합할 때 사용하면 좋다.\n\n반면 문제를 조각내서 작업하는 것은 저렴한 AI를 이용한다면 전체적인 토큰 소모량은 확실히 줄어들 것이다.\n\n소규모 작업에는 Gemini, Codex를 사용하고 이를 통합하거나 많은 추론이 필요한 작업은 Claude를 사용하는 것이 현재 시점에서 최적의 조합이라고 생각한다. \n\n만약 문제를 작게 나누어서 분배하고, 이를 검토하고 합치는 것까지 자동으로 할 수 있다면? 그런 AI 파이프라인을 구축할 수 있다면? 이것이 향후 발전 가능성이 높은 아키텍처가 아닐까? \n\n## AI 개발 워크플로우\n\n지금 내가 생각하는 AI 개발 워크플로우는 다음과 같다.\n\n```mermaid\n---\nconfig:\n  layout: dagre\n---\nflowchart TD\n    A[\"JIRA 등록\"] -- 웹훅 --> gemini\n    A[\"JIRA 등록\"] -- 웹훅 --> claude\n    A[\"JIRA 등록\"] -- 웹훅 --> user\n    subgraph gemini\n        g1{\"서브 테스크 작업별로 별도 worktree 생성\"}-->g2[[\"`작업진행`\"]]\n        g2-->g21[\"PR 생성\"]\n        g21-->g22[\"JIRA 상태 업데이트(작업완료)\"]\n        g22-->g23[\"worktree 종료\"]\n        g1-->g3[[\"`작업진행`\"]]\n        g3-->g31[[\"`end-to-end 실행`\"]]\n        g31-->g32[\"PR 생성\"]\n        g32-->g33[\"JIRA 상태 업데이트(작업완료)\"]\n        g33-->g34[\"worktree 종료\"]\n        g1-->g4[[\"`작업진행`\"]]\n        g4-->g41[[\"`tdd 실행`\"]]\n        g41-->g42[\"PR 생성\"]\n        g42-->g43[\"JIRA 상태 업데이트(작업완료)\"]\n        g43-->g44[\"worktree 종료\"]\n    end\n    subgraph claude\n        c1{\"JIRA 서브 테스크 진행상태 체크(전체 서브테스크가 작업완료 상태체크)\"}-->c2{\"서브테스크가 전부 작업완료 상태이면 worktree 생성\"}\n        c2-->c21[[\"`각 PR을 받아서 하나의 브랜치에 병합`\"]]\n        c21 --> c3[[\"`전체 화면 로직 개발`\"]]\n        c3 --> c4[[\"`end-to-end 테스트`\"]]\n    end\n    subgraph user\n        u1[\"슬랙등등.. 진행상황 전달\"]-->u2{\"전체로직이 완료되었는지 확인\"}\n        u2 --> u3{\"원하는대로 구현되었는지 확인\"}\n        u3 -. 구현 피드백 .-> u41[\"수정해야할 사항 확인\"]\n        u41 --> u42[\"JIRA 서브티켓 생성\"]\n        u3 -- 구현 완료 --> u4[\"배포\"]\n    end\n```\n\n단계별로 살펴보면:\n\n### 1. JIRA 티켓 등록\n\n티켓을 등록하는 방법은 어떤 것이든 상관없다. 현재 JIRA를 사용해서 작업할 뿐이고 (개인적으로 JIRA가 불편하다고 생각한다), 어떤 프로젝트 관리 프로그램을 사용하든 상관없다. 다만 웹훅을 지원해주는 것이 좋다.\n\n티켓 구조는 스토리를 Claude가 처리할 티켓으로 정의하고, 하위 티켓으로 잘게 쪼개서 등록해야 한다. 스토리 티켓의 내용에는 하위 티켓을 어떻게 연결해서 어떤 기능을 만들 것인지, 최종 결과가 무엇인지를 명확하게 작성해야 한다.\n\n하위 티켓은 Gemini가 가져가서 개별로 작업할 티켓이다. Gemini를 선택한 이유는 토큰 소모율이 현재 가장 낮다고 생각되기 때문이다. 토큰을 많이 사용하지 못하고 성능이 제한적이므로, 작업을 나눌 수 있는 만큼 잘게 쪼개서 상세하게 작성해야 한다.\n\n티켓에는 작업 후 TDD, end-to-end 테스트를 어떻게 할 것인지에 대한 내용도 포함해야 한다.\n\n### 2. 작업별로 worktree 생성\n\n웹훅은 Gemini와 Claude 둘 다에게 전달된다. Gemini는 서브태스크의 상태가 진행 중인 경우에만 작업을 수행한다. Claude는 전체 서브태스크의 상태를 확인한 후, 모든 서브태스크가 완료된 경우에만 작업을 수행한다.\n\nGemini는 JIRA 티켓의 내용을 바탕으로 정해진 규칙에 따라서 worktree를 생성한다.\n\n티켓 내용대로 작업을 진행하고 테스트까지 통과되면 PR을 생성하고, JIRA 티켓의 상태를 작업 완료로 업데이트한다.\n\n### 3. 작업 통합 worktree 생성\n\nClaude는 모든 서브태스크가 완료된 경우에만 작업을 수행한다.\n\nworktree는 스토리 티켓의 번호로 생성하고, 각 서브태스크의 PR을 받아서 하나의 브랜치에 병합한다.\n\n병합이 완료되면 스토리 티켓의 내용을 바탕으로 전체 로직을 개발한다. 이때 end-to-end 테스트를 진행하고, 테스트가 통과되면 PR을 생성하고 JIRA 티켓의 상태를 작업 완료로 업데이트한다.\n\n### 4. 최종 검토 및 배포\n\n사용자의 검토는 최종 PR이 생성되었다는 알림을 Slack이나 다른 매체로 전달받으면 시작한다.\n\n사용자는 해당 기능이 제대로 동작하는지, 원하는 대로 구현되었는지 확인한다. 만약 수정해야 할 사항이 있다면 JIRA 티켓에 하위 티켓을 생성해서 Gemini가 작업을 진행하게 한다. 구현이 완료되었다면 배포를 진행한다.\n\n이 과정에서 사용자가 어느 타이밍에 개입하고, 무엇을 확인하거나 작업할지에 따라서 다양한 변형된 워크플로우가 만들어질 수 있다. 하지만 전체적인 흐름은 위와 동일할 것이라고 생각한다.\n\n### 실제 경험담\n\n한 달 동안 Claude Code로 개발할 때 2~3개의 worktree를 동시에 열고 각각의 작업을 진행하면서 느낀 점은 위와 같은 워크플로우가 가장 효율적이라는 것이다.\n\nAI가 작업하는 동안은 다른 worktree로 이동해서 다음 작업을 진행시키거나 작업된 사항을 검토해서 피드백하는 형태로 진행했다.\n\n#### 생산성 측정 결과\n\n생산성의 기준은 **작업 완료까지 걸린 시간**으로 측정했다.\n\n기준치(1.0)는 내가 혼자서 작업할 때 걸린 시간을 기준으로 했다. 작업은 보통 1시간 정도 걸리는 작업으로 측정했다.\n\n**측정 결과**: \n\n- **Claude Code**: 기준 대비 약 0.8 ~ 1.2 수준의 생산성\n- **Codex**: 기준 대비 약 0.3 ~ 0.5 수준의 생산성\n- **Copilot**: 기준 대비 약 0.5 ~ 0.8 수준의 생산성 (Claude 3.7 기준)\n\n초반에는 AI 사용법에 익숙하지 않아 오히려 시간이 더 오래 걸린 것도 있으므로 이를 감안해야 한다. 그리고 초반엔 잘못된 명령이나 잘못된 코드가 좀 있었다.\n\n**숙련 단계**: 기준치 대비 1.2~2.0 수준의 생산성 달성\n- **독립적인 작업**: 서로 연관성이 없는 작업으로 잘게 쪼개서 동시에 진행하면 최소 2배이상 가능\n- **연관성 있는 작업**: 작업 간 의존성이 있거나 하나씩 검토하며 진행할 때는 1.2배 수준 (약 20% 향상)\n- **작업을 세분화**: 작업을 더 작은 단위로 나누면 AI가 더 쉽게 이해하고 처리할 수 있다.\n- **학습 유무**: AI가 특정 작업에 대해 학습한 정도에 따라 생산성이 달라질 수 있다. 자주 쓰는 패턴이나 컴포넌트를 문서화해서 미리 학습시키고, 작업을 시키면 생산성이 크게 향상된다.\n\n결론적으로 **어떤 워크플로우를 설계하고 사용하느냐에 따라서 생산성은 크게 달라질 수 있다**는 것을 확인했다.\n\n## 작업 시 유의사항 \n\n1. **AI가 작업하는 동안 코드를 수정하지 말 것**: AI가 작업하는 동안 코드를 수정하면 AI가 이를 다시 읽어서 분석하기 때문에 토큰 소모량만 증가한다. 따라서 AI가 작업하는 동안은 다른 worktree로 이동해서 다음 작업을 진행하거나 작업된 사항을 검토해서 피드백하는 형태로 진행해야 한다.\n\n   같은 이유로 한 폴더에서 여러 개의 AI를 동시에 작업시키는 것도 좋지 않다. 파일이 변경될 때마다 서로 다시 읽기 때문이고, 작업이 서로 섞여서 AI끼리 작업 내용을 혼재해서 학습하게 된다.\n\n2. **작업을 잘게 쪼개서 분배할 것**: AI는 작업을 잘게 쪼개서 분배하면 더 쉽게 이해하고 처리할 수 있다. 따라서 작업을 세분화해서 AI가 처리할 수 있는 수준으로 나누는 것이 좋다.\n\n3. **질문은 구체적이고 명확하게 작성할 것**: AI에게 질문할 때는 구체적이고 명확하게 작성해야 한다. 애매하거나 추상적인 질문은 AI가 제대로 이해하지 못하고, 원하는 결과를 얻기 어렵다. \n\n## 작업 시 팁\n\n1. **AI의 학습을 돕는 문서화**: AI가 특정 작업에 대해 학습한 정도에 따라 생산성이 달라질 수 있다. 자주 사용하는 패턴이나 컴포넌트를 문서화해서 미리 학습시키고 작업을 시키면 생산성이 크게 향상된다.\n\n2. **도메인별 문서화**: 라이브러리를 만들거나 폴더로 도메인을 구분할 때 각각에 README.md를 만들어서 문서화해서 AI가 학습할 수 있도록 한다. AI가 해당 컴포넌트나 기능을 사용할 때 README.md를 읽고 학습할 수 있도록 한다.\n\n3. **간결한 문서 작성**: 프롬프트나 문서는 되도록 짧고 간결하게 작성하고, 가능한 AI가 작성하도록 한다. 사람이 작성한 경우 AI에게 먼저 학습시키고 결과를 확인한 후 피드백해서 다시 학습시킨 다음 이 과정을 문서화하라고 하면 된다.\n\n4. **단순 작업 활용**: AI의 생산성이 낮더라도 작업이 간단하거나 추상적인 지시사항이 없으면 AI가 작업을 잘 수행할 수 있다. \n\n## AI 시대의 개발자\n\nAI 시대의 개발은 위와 같은 패러다임 전환이 필요하다. AI가 도와주는 개발 환경을 구축하고, AI가 효율적으로 작업할 수 있는 환경을 만들어야 한다.\n\n앞으로 개발자는 AI와 직접 협업할 수도 있고, AI의 작업을 검토하고 지도하는 역할을 할 수도 있을 것이다.\n\n어느 쪽이든 **AI와의 협업을 통해 생산성을 극대화할 수 있느냐가 미래 개발자의 핵심 역량**이 될 것이다. ",
      "content_text": "AI 개발 도구를 사용하면서 느낀 AI의 역할과 개발자의 미래에 대한 고찰",
      "url": "https://leeduhan.github.io/posts/claude/2025-07-11-claude-code-review/",
      "date_published": "2025-07-22T00:00:00.000Z",
      "authors": [
        {
          "name": "zeke",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "AI",
        "Claude Code",
        "개발 도구",
        "생산성",
        "워크플로우",
        "Gemini"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/css/css-selecter-guide/",
      "title": "CSS 선택자 완벽 가이드: 초보자를 위한 친절한 설명",
      "content_html": "\n# 🎨 CSS 선택자 완벽 가이드\n\n안녕하세요! 오늘은 웹페이지를 꾸미는 핵심 도구인 **CSS 선택자**에 대해 알아보겠습니다. 색칠공부를 할 때 어떤 부분에 어떤 색을 칠할지 정하는 것처럼, CSS 선택자는 웹페이지의 어떤 부분을 꾸밀지 정하는 역할을 합니다.\n\n[MDN의 CSS 선택자 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors)에 따르면, CSS는 60개 이상의 선택자와 5개의 결합자를 제공하여 HTML 요소를 정교하게 선택할 수 있습니다.\n\n## 📚 목차\n\n1. [CSS 선택자란?](#1-css-선택자란)\n2. [기본 선택자](#2-기본-선택자)\n3. [속성 선택자](#3-속성-선택자)\n4. [가상 클래스](#4-가상-클래스)\n5. [결합자](#5-결합자)\n6. [CSS 우선순위](#6-css-우선순위)\n7. [실습 예제](#7-실습-예제)\n\n---\n\n## 1. CSS 선택자란?\n\n`학급에서 특정 학생을 부를 때를 생각해보세요. \"안경 쓴 학생\", \"빨간 옷 입은 학생\", \"첫 번째 줄에 앉은 학생\" 이런 식으로 특징을 말해서 부르잖아요? CSS 선택자도 비슷한 방식으로 작동합니다!`\n\n[W3C의 Selectors Level 3 명세](https://www.w3.org/TR/2018/REC-selectors-3-20181106/)에 정의된 바와 같이, CSS 선택자는 HTML 문서의 특정 요소들을 선택하여 스타일을 적용하는 패턴입니다.\n\n```css\n/* 이게 바로 CSS의 기본 구조입니다 */\n선택자 {\n  꾸미기: 방법;\n}\n\n/* 실제 예시 */\np {\n  color: blue; /* 모든 문단을 파란색으로 만들기 */\n}\n```\n\n---\n\n## 2. 기본 선택자\n\n### 🏷️ 태그 선택자 (Type Selector)\n\nHTML 태그 이름을 그대로 사용합니다. `마치 \"강아지\", \"고양이\"라고 종류별로 부르는 것과 같습니다.` [MDN 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors)에서는 이를 \"Type Selector\"라고 정의합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 모든 제목을 빨간색으로 */\n      h1 {\n        color: red;\n      }\n\n      /* 모든 문단을 초록색으로 */\n      p {\n        color: green;\n      }\n\n      /* 모든 버튼을 크게 만들기 */\n      button {\n        font-size: 20px;\n        padding: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>빨간색 제목입니다</h1>\n    <p>초록색 문단입니다</p>\n    <button>큰 버튼입니다</button>\n  </body>\n</html>\n```\n\n### 🎯 클래스 선택자 (Class Selector)\n\n클래스는 여러 요소에게 같은 별명을 줄 수 있습니다. 점(.)으로 시작합니다! [MDN의 클래스 선택자 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors)에 따르면, 하나의 요소는 여러 개의 클래스를 가질 수 있습니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 점(.)으로 시작하는 것이 클래스 선택자입니다 */\n      .pretty {\n        background-color: pink;\n        padding: 10px;\n      }\n\n      .big {\n        font-size: 30px;\n      }\n\n      /* 두 개의 클래스를 가진 요소 */\n      .pretty.big {\n        border: 3px solid purple;\n      }\n    </style>\n  </head>\n  <body>\n    <p class=\"pretty\">예쁜 분홍 배경입니다</p>\n    <p class=\"big\">큰 글씨입니다</p>\n    <p class=\"pretty big\">예쁘고 크고 테두리도 있습니다</p>\n  </body>\n</html>\n```\n\n### 🆔 ID 선택자 (ID Selector)\n\nID는 딱 하나의 요소만 가질 수 있는 고유한 이름입니다. 샵(#)으로 시작합니다! [MDN 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors)에 명시된 대로, HTML 문서 내에서 ID는 고유해야 합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 샵(#)으로 시작하는 것이 ID 선택자입니다 */\n      #special {\n        background-color: gold;\n        border: 5px dashed blue;\n        padding: 20px;\n      }\n\n      #main-title {\n        text-align: center;\n        font-size: 40px;\n        color: navy;\n      }\n    </style>\n  </head>\n  <body>\n    <h1 id=\"main-title\">특별한 제목입니다</h1>\n    <p id=\"special\">금색 배경의 특별한 문단입니다</p>\n  </body>\n</html>\n```\n\n### ✨ 전체 선택자 (Universal Selector)\n\n별표(\\*)는 \"모든 요소\"를 의미합니다. [MDN의 Universal Selector 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors)에서 설명하듯이, 이 선택자는 모든 타입의 HTML 요소를 선택합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 페이지의 모든 요소에 적용 */\n      * {\n        margin: 0;\n        padding: 0;\n        font-family: \"맑은 고딕\", sans-serif;\n      }\n\n      /* 특정 영역 안의 모든 요소 */\n      .box * {\n        color: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <h2>박스 안의 제목</h2>\n      <p>박스 안의 문단</p>\n      <span>박스 안의 텍스트</span>\n    </div>\n  </body>\n</html>\n```\n\n---\n\n## 3. 속성 선택자\n\n속성 선택자는 태그가 가진 특별한 표시(속성)를 보고 선택해요. 대괄호 []를 사용해요! [MDN의 속성 선택자 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)에서 다양한 속성 선택자 패턴을 확인할 수 있습니다.\n\n### 기본 속성 선택자\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* title 속성이 있는 모든 요소 */\n      [title] {\n        border-bottom: 2px dotted blue;\n        cursor: help;\n      }\n\n      /* type이 \"text\"인 input */\n      input[type=\"text\"] {\n        border: 2px solid green;\n        padding: 5px;\n      }\n\n      /* type이 \"submit\"인 input */\n      input[type=\"submit\"] {\n        background-color: blue;\n        color: white;\n        padding: 10px 20px;\n        border: none;\n        cursor: pointer;\n      }\n\n      /* href가 .pdf로 끝나는 링크 */\n      a[href$=\".pdf\"] {\n        color: red;\n      }\n\n      /* href가 .pdf로 끝나는 링크 뒤에 PDF 아이콘 추가 */\n      a[href$=\".pdf\"]:after {\n        content: \" 📄\";\n      }\n    </style>\n  </head>\n  <body>\n    <p title=\"마우스를 올려보세요!\">나는 설명이 있어요!</p>\n\n    <form>\n      <input type=\"text\" placeholder=\"텍스트를 입력하세요\" />\n      <input type=\"submit\" value=\"전송\" />\n    </form>\n\n    <a href=\"document.pdf\">PDF 문서 다운로드</a>\n  </body>\n</html>\n```\n\n### 고급 속성 선택자\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* class에 \"btn\"이 포함된 요소 */\n      [class*=\"btn\"] {\n        padding: 10px;\n        margin: 5px;\n        cursor: pointer;\n      }\n\n      /* class가 \"btn-\"로 시작하는 요소 */\n      [class^=\"btn-\"] {\n        border-radius: 5px;\n      }\n\n      /* data- 속성 활용 */\n      [data-color=\"red\"] {\n        color: red;\n      }\n\n      [data-color=\"blue\"] {\n        color: blue;\n      }\n\n      [data-size=\"big\"] {\n        font-size: 30px;\n      }\n    </style>\n  </head>\n  <body>\n    <button class=\"btn-primary\">주요 버튼</button>\n    <button class=\"btn-secondary\">보조 버튼</button>\n    <button class=\"small-btn\">작은 버튼</button>\n\n    <p data-color=\"red\" data-size=\"big\">빨갛고 큰 글씨입니다</p>\n    <p data-color=\"blue\">파란 글씨입니다</p>\n  </body>\n</html>\n```\n\n---\n\n## 4. 가상 클래스\n\n가상 클래스는 요소의 특별한 상태를 선택합니다. 콜론(:)으로 시작합니다! [MDN의 가상 클래스 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)에 따르면, CSS는 80개 이상의 가상 클래스를 제공합니다.\n\n### 🖱️ 마우스 관련 가상 클래스\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 마우스를 올렸을 때 */\n      .hover-box {\n        background-color: lightblue;\n        padding: 20px;\n        transition: all 0.3s;\n      }\n\n      .hover-box:hover {\n        background-color: darkblue;\n        color: white;\n        transform: scale(1.1);\n      }\n\n      /* 링크 상태들 */\n      a {\n        text-decoration: none;\n        padding: 5px;\n      }\n\n      a:link {\n        color: blue; /* 방문하지 않은 링크 */\n      }\n\n      a:visited {\n        color: purple; /* 방문한 링크 */\n      }\n\n      a:hover {\n        background-color: yellow; /* 마우스 올렸을 때 */\n      }\n\n      a:active {\n        color: red; /* 클릭하는 순간 */\n      }\n\n      /* 버튼 효과 */\n      .magic-button {\n        background-color: green;\n        color: white;\n        padding: 15px 30px;\n        border: none;\n        font-size: 18px;\n        cursor: pointer;\n        transition: all 0.3s;\n      }\n\n      .magic-button:hover {\n        background-color: darkgreen;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n      }\n\n      .magic-button:active {\n        transform: translateY(2px);\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"hover-box\">마우스를 올려보세요! 색이 변해요!</div>\n\n    <p>\n      <a href=\"https://www.google.com\">구글 링크</a>\n      <a href=\"https://www.naver.com\">네이버 링크</a>\n    </p>\n\n    <button class=\"magic-button\">마법 버튼을 눌러보세요!</button>\n  </body>\n</html>\n```\n\n### 📝 폼 관련 가상 클래스\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 포커스 받았을 때 */\n      input:focus {\n        outline: 3px solid blue;\n        background-color: lightyellow;\n      }\n\n      /* 체크된 체크박스 */\n      input[type=\"checkbox\"]:checked {\n        width: 20px;\n        height: 20px;\n      }\n\n      /* 체크박스 옆 라벨 스타일 */\n      input[type=\"checkbox\"]:checked + label {\n        color: green;\n        font-weight: bold;\n      }\n\n      /* 비활성화된 요소 */\n      input:disabled {\n        background-color: #ccc;\n        cursor: not-allowed;\n      }\n\n      /* 필수 입력 필드 */\n      input:required {\n        border-left: 5px solid red;\n      }\n\n      /* 유효한/무효한 입력 */\n      input:valid {\n        border-color: green;\n      }\n\n      input:invalid {\n        border-color: red;\n      }\n    </style>\n  </head>\n  <body>\n    <form>\n      <p>\n        <input type=\"text\" placeholder=\"여기를 클릭해보세요!\" required />\n      </p>\n\n      <p>\n        <input type=\"checkbox\" id=\"agree\" />\n        <label for=\"agree\">동의합니다</label>\n      </p>\n\n      <p>\n        <input type=\"email\" placeholder=\"이메일 주소\" required />\n      </p>\n\n      <p>\n        <input type=\"text\" placeholder=\"비활성화된 입력창\" disabled />\n      </p>\n    </form>\n  </body>\n</html>\n```\n\n### 🔢 순서 관련 가상 클래스\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 첫 번째 자식 */\n      li:first-child {\n        color: red;\n        font-weight: bold;\n      }\n\n      /* 마지막 자식 */\n      li:last-child {\n        color: blue;\n        font-weight: bold;\n      }\n\n      /* n번째 자식 */\n      li:nth-child(3) {\n        background-color: yellow;\n      }\n\n      /* 짝수 번째 */\n      tr:nth-child(even) {\n        background-color: #f2f2f2;\n      }\n\n      /* 홀수 번째 */\n      tr:nth-child(odd) {\n        background-color: white;\n      }\n\n      /* 3의 배수 번째 */\n      div.box:nth-child(3n) {\n        background-color: pink;\n      }\n\n      /* 특정 타입의 첫 번째 */\n      p:first-of-type {\n        font-size: 20px;\n        color: green;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>첫 번째 항목 (빨간색)</li>\n      <li>두 번째 항목</li>\n      <li>세 번째 항목 (노란 배경)</li>\n      <li>네 번째 항목</li>\n      <li>마지막 항목 (파란색)</li>\n    </ul>\n\n    <table border=\"1\" style=\"width: 100%;\">\n      <tr>\n        <td>1번 행</td>\n        <td>홀수</td>\n      </tr>\n      <tr>\n        <td>2번 행</td>\n        <td>짝수</td>\n      </tr>\n      <tr>\n        <td>3번 행</td>\n        <td>홀수</td>\n      </tr>\n      <tr>\n        <td>4번 행</td>\n        <td>짝수</td>\n      </tr>\n    </table>\n\n    <div>\n      <h2>제목</h2>\n      <p>첫 번째 문단 (크고 초록색)</p>\n      <p>두 번째 문단</p>\n    </div>\n  </body>\n</html>\n```\n\n### 🎯 유용한 가상 클래스\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* :not() - 제외하기 */\n      .menu li:not(:last-child) {\n        border-right: 1px solid #ccc;\n      }\n\n      /* :empty - 비어있는 요소 */\n      p:empty {\n        display: none;\n      }\n\n      /* :target - 앵커 대상 */\n      div:target {\n        background-color: yellow;\n        padding: 20px;\n        border: 2px solid orange;\n      }\n\n      /* ::before와 ::after - 가상 요소 */\n      .quote::before {\n        content: \"『\";\n        color: red;\n        font-size: 30px;\n      }\n\n      .quote::after {\n        content: \"』\";\n        color: red;\n        font-size: 30px;\n      }\n\n      /* 첫 글자 꾸미기 */\n      .story::first-letter {\n        font-size: 50px;\n        float: left;\n        line-height: 1;\n        margin-right: 5px;\n        color: blue;\n      }\n\n      /* 첫 줄 꾸미기 */\n      .story::first-line {\n        font-weight: bold;\n        color: green;\n      }\n    </style>\n  </head>\n  <body>\n    <ul class=\"menu\" style=\"list-style: none; display: flex; gap: 10px;\">\n      <li>홈</li>\n      <li>소개</li>\n      <li>서비스</li>\n      <li>연락처</li>\n    </ul>\n\n    <p></p>\n    <!-- 이 빈 문단은 보이지 않아요 -->\n\n    <p><a href=\"#section1\">섹션 1로 이동</a></p>\n    <div id=\"section1\">타겟이 된 섹션입니다!</div>\n\n    <p class=\"quote\">명언이 들어가는 곳</p>\n\n    <p class=\"story\">\n      옛날 옛적에 아주 작은 마을에 살고 있던 소녀가 있었습니다. 그 소녀는 매일\n      아침 일찍 일어나 정원에 물을 주었어요.\n    </p>\n  </body>\n</html>\n```\n\n---\n\n## 5. 결합자\n\n결합자는 선택자들 사이의 관계를 나타냅니다. `가족 관계처럼 생각하면 쉬워요!` [MDN의 결합자 문서](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators)에서 4가지 주요 결합자를 설명합니다.\n\n### 후손 선택자 (Descendant Combinator)\n\n공백으로 표현되는 후손 선택자는 특정 요소의 모든 후손을 선택합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* .container 안의 모든 p 태그 */\n      .container p {\n        color: blue;\n      }\n\n      /* nav 안의 모든 a 태그 */\n      nav a {\n        text-decoration: none;\n        color: white;\n        padding: 10px;\n        background-color: navy;\n      }\n\n      /* 여러 단계도 가능 */\n      .box div p {\n        background-color: yellow;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <p>나는 파란색이에요!</p>\n      <div>\n        <p>나도 파란색이에요!</p>\n      </div>\n    </div>\n\n    <nav>\n      <a href=\"#\">메뉴1</a>\n      <a href=\"#\">메뉴2</a>\n      <div>\n        <a href=\"#\">서브메뉴</a>\n      </div>\n    </nav>\n\n    <div class=\"box\">\n      <div>\n        <p>나는 노란 배경이에요!</p>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n### 자식 선택자 (Child Combinator)\n\n`>` 기호로 표현되는 자식 선택자는 직접적인 자식 요소만 선택합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 직접적인 자식만 선택 */\n      .parent > p {\n        border: 2px solid red;\n        padding: 10px;\n      }\n\n      /* ul의 직접 자식 li만 */\n      ul > li {\n        color: blue;\n        font-weight: bold;\n      }\n\n      /* 중첩된 li는 영향 없음 */\n      ul ul > li {\n        color: green;\n        font-weight: normal;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"parent\">\n      <p>나는 직접 자식이라 빨간 테두리가 있어요!</p>\n      <div>\n        <p>나는 손자라서 테두리가 없어요.</p>\n      </div>\n    </div>\n\n    <ul>\n      <li>\n        파란색 굵은 글씨\n        <ul>\n          <li>초록색 보통 글씨</li>\n          <li>초록색 보통 글씨</li>\n        </ul>\n      </li>\n      <li>파란색 굵은 글씨</li>\n    </ul>\n  </body>\n</html>\n```\n\n### 인접 형제 선택자 (Next-sibling Combinator)\n\n`+` 기호로 표현되는 인접 형제 선택자는 바로 다음에 오는 형제 요소를 선택합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* h2 바로 다음의 p */\n      h2 + p {\n        color: red;\n        font-size: 18px;\n        font-style: italic;\n      }\n\n      /* 체크박스 바로 다음의 label */\n      input[type=\"checkbox\"] + label {\n        margin-left: 5px;\n        cursor: pointer;\n      }\n\n      input[type=\"checkbox\"]:checked + label {\n        color: green;\n        font-weight: bold;\n      }\n\n      /* 이미지 다음의 설명 */\n      img + p {\n        font-size: 12px;\n        color: gray;\n        font-style: italic;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>제목입니다</h2>\n    <p>제목 바로 다음의 문단은 빨갛고 기울어져요!</p>\n    <p>그 다음 문단은 평범해요.</p>\n\n    <input type=\"checkbox\" id=\"check1\" />\n    <label for=\"check1\">체크해보세요!</label>\n\n    <img src=\"https://via.placeholder.com/200\" alt=\"샘플 이미지\" />\n    <p>이미지 설명입니다.</p>\n  </body>\n</html>\n```\n\n### 일반 형제 선택자 (Subsequent-sibling Combinator)\n\n`~` 기호로 표현되는 일반 형제 선택자는 이후에 오는 모든 형제 요소를 선택합니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* h2 다음에 오는 모든 p */\n      h2 ~ p {\n        margin-left: 20px;\n        border-left: 3px solid blue;\n        padding-left: 10px;\n      }\n\n      /* 첫 번째 .special 다음의 모든 div */\n      .special ~ div {\n        background-color: lightgray;\n        padding: 10px;\n        margin: 5px 0;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>주제</h2>\n    <p>첫 번째 문단</p>\n    <p>두 번째 문단</p>\n    <div>일반 div</div>\n    <p>세 번째 문단</p>\n\n    <div class=\"special\">특별한 div</div>\n    <div>회색 배경 1</div>\n    <div>회색 배경 2</div>\n    <p>일반 문단</p>\n    <div>회색 배경 3</div>\n  </body>\n</html>\n```\n\n---\n\n## 6. CSS 우선순위\n\n여러 CSS 규칙이 충돌할 때, 어떤 규칙이 적용되는지 알아봅시다! [MDN의 명시도(Specificity) 문서](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity)에서 자세한 계산 방법을 확인할 수 있습니다.\n\n### 📊 우선순위(명시도) 계산 방법\n\nCSS 명시도는 **ID-CLASS-TYPE** 형식 (A-B-C)으로 계산됩니다:\n\n- **A**: ID 선택자의 개수\n- **B**: 클래스 선택자, 속성 선택자, 가상 클래스의 개수  \n- **C**: 타입 선택자와 가상 요소의 개수\n\n`비교할 때는 점수를 더하는 것이 아니라, 왼쪽 컬럼부터 차례로 비교합니다!`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 명시도 계산 예제 */\n\n      /* 타입 선택자 */\n      p {\n        color: black;\n      } /* 0-0-1 */\n\n      /* 클래스 선택자 */\n      .text {\n        color: blue;\n      } /* 0-1-0 → 0-0-1보다 우선 */\n\n      /* ID 선택자 */\n      #special {\n        color: red;\n      } /* 1-0-0 → 0-1-0보다 우선 */\n\n      /* 복합 선택자 계산 */\n      p.text {\n        color: green;\n      } /* 0-1-1 (클래스1개 + 타입1개) */\n      \n      div p.text {\n        color: purple;\n      } /* 0-1-2 (클래스1개 + 타입2개) → 0-1-1보다 우선 */\n      \n      #special .text {\n        color: orange;\n      } /* 1-1-0 (ID1개 + 클래스1개) → 0-1-2보다 우선 */\n\n      /* 속성 선택자도 CLASS 컬럼 */\n      p[class] {\n        color: yellow;\n      } /* 0-1-1 (속성1개 + 타입1개) */\n\n      /* 가상 클래스도 CLASS 컬럼 */\n      p:hover {\n        color: pink;\n      } /* 0-1-1 (가상클래스1개 + 타입1개) */\n    </style>\n  </head>\n  <body>\n    <p>기본 검정색 (0-0-1)</p>\n    <p class=\"text\">파란색이 이김 (0-1-0 > 0-0-1)</p>\n    <p id=\"special\">빨간색이 이김 (1-0-0 > 0-1-0)</p>\n    <p id=\"special\" class=\"text\">ID가 있어서 빨간색 유지</p>\n  </body>\n</html>\n```\n\n### 🎯 명시도 비교 원리\n\n```css\n/* 컬럼별 비교 방식 */\n.box          /* 0-1-0 */\np.box         /* 0-1-1 */\ndiv p.box     /* 0-1-2 */  ← 가장 높음 (C 컬럼이 가장 큼)\n\n#header       /* 1-0-0 */  ← 가장 높음 (A 컬럼이 있음)\n.nav .menu    /* 0-2-0 */\n.nav ul li    /* 0-1-2 */\n\n/* 컬럼별 비교 ✅ */\n/* 1-0-0 vs 0-2-0 → 첫 번째 컬럼에서 1 > 0이므로 #header 승리 */\n```\n\n### 🎯 우선순위 실전 예제\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      /* 같은 명시도일 때는 나중 선언이 이김 */\n      .box {\n        background-color: red;     /* 0-1-0 */\n      }\n      .box {\n        background-color: blue;    /* 0-1-0 → 나중 선언이므로 적용 */\n      }\n\n      /* 더 구체적인 선택자가 이김 */\n      .container .box {\n        background-color: green;   /* 0-2-0 → 0-1-0보다 우선 */\n      }\n\n      .box {\n        background-color: yellow;  /* 0-1-0 → 적용 안됨 */\n      }\n\n      /* !important는 최강 */\n      .box {\n        background-color: purple !important;\n      }\n\n      /* 인라인 스타일은 가장 높은 명시도 */\n      /* <div style=\"background-color: pink;\"> → 별도 우선순위 */\n\n      /* 상속은 명시도가 없음 (가장 약함) */\n      .parent {\n        color: red; /* 자식에게 상속 */\n      }\n\n      .parent p {\n        /* 상속받은 color보다 직접 지정이 우선 */\n        color: blue; /* 0-1-1 > 상속 */\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"box\">배경색: purple (!important 때문)</div>\n    </div>\n\n    <div class=\"parent\">\n      <p>빨간색 (상속)</p>\n      <p>파란색 (직접 지정)</p>\n      <p style=\"color: green;\">초록색 (인라인 스타일)</p>\n    </div>\n  </body>\n</html>\n```\n\n---\n\n## 7. 실습 예제\n\n### 🎮 인터랙티브 버튼 만들기\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .game-button {\n        background: linear-gradient(to bottom, #4caf50, #45a049);\n        border: none;\n        color: white;\n        padding: 15px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n        margin: 4px 2px;\n        cursor: pointer;\n        border-radius: 12px;\n        box-shadow: 0 4px #999;\n        transition: all 0.1s;\n      }\n\n      .game-button:hover {\n        background: linear-gradient(to bottom, #45a049, #4caf50);\n      }\n\n      .game-button:active {\n        box-shadow: 0 2px #666;\n        transform: translateY(2px);\n      }\n\n      /* 다양한 색상의 버튼들 */\n      .red {\n        background: linear-gradient(to bottom, #f44336, #da190b);\n      }\n      .red:hover {\n        background: linear-gradient(to bottom, #da190b, #f44336);\n      }\n\n      .blue {\n        background: linear-gradient(to bottom, #008cba, #006687);\n      }\n      .blue:hover {\n        background: linear-gradient(to bottom, #006687, #008cba);\n      }\n    </style>\n  </head>\n  <body>\n    <button class=\"game-button\">기본 버튼</button>\n    <button class=\"game-button red\">빨간 버튼</button>\n    <button class=\"game-button blue\">파란 버튼</button>\n  </body>\n</html>\n```\n\n### 📋 체크리스트 만들기\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .checklist {\n        list-style: none;\n        padding: 0;\n      }\n\n      .checklist li {\n        padding: 10px;\n        margin: 5px 0;\n        background-color: #f9f9f9;\n        border-radius: 5px;\n        position: relative;\n        padding-left: 40px;\n      }\n\n      .checklist input[type=\"checkbox\"] {\n        position: absolute;\n        left: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 20px;\n        height: 20px;\n        cursor: pointer;\n      }\n\n      .checklist input[type=\"checkbox\"]:checked + label {\n        text-decoration: line-through;\n        color: #999;\n      }\n\n      .checklist input[type=\"checkbox\"]:checked ~ .check-mark {\n        display: block;\n      }\n\n      .check-mark {\n        position: absolute;\n        right: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        color: green;\n        font-size: 20px;\n        display: none;\n      }\n\n      /* 완료된 항목 스타일 - :has()는 최신 브라우저에서 지원 */\n      .checklist li:has(input:checked) {\n        background-color: #e8f5e9;\n        opacity: 0.7;\n      }\n    </style>\n  </head>\n  <body>\n    <ul class=\"checklist\">\n      <li>\n        <input type=\"checkbox\" id=\"task1\" />\n        <label for=\"task1\">숙제하기</label>\n        <span class=\"check-mark\">✓</span>\n      </li>\n      <li>\n        <input type=\"checkbox\" id=\"task2\" />\n        <label for=\"task2\">방 청소하기</label>\n        <span class=\"check-mark\">✓</span>\n      </li>\n      <li>\n        <input type=\"checkbox\" id=\"task3\" />\n        <label for=\"task3\">책 읽기</label>\n        <span class=\"check-mark\">✓</span>\n      </li>\n    </ul>\n  </body>\n</html>\n```\n\n### 🎨 테이블 꾸미기\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .pretty-table {\n        border-collapse: collapse;\n        width: 100%;\n        margin: 20px 0;\n      }\n\n      .pretty-table th,\n      .pretty-table td {\n        border: 1px solid #ddd;\n        padding: 12px;\n        text-align: left;\n      }\n\n      .pretty-table th {\n        background-color: #4caf50;\n        color: white;\n        font-weight: bold;\n      }\n\n      /* 줄무늬 효과 */\n      .pretty-table tr:nth-child(even) {\n        background-color: #f2f2f2;\n      }\n\n      /* 마우스 오버 효과 */\n      .pretty-table tr:hover {\n        background-color: #ddd;\n      }\n\n      /* 첫 번째 열 강조 */\n      .pretty-table td:first-child {\n        font-weight: bold;\n        background-color: #e8f5e9;\n      }\n\n      /* 마지막 열 정렬 */\n      .pretty-table td:last-child {\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <table class=\"pretty-table\">\n      <tr>\n        <th>과목</th>\n        <th>점수</th>\n        <th>등급</th>\n      </tr>\n      <tr>\n        <td>국어</td>\n        <td>95</td>\n        <td>A</td>\n      </tr>\n      <tr>\n        <td>수학</td>\n        <td>88</td>\n        <td>B</td>\n      </tr>\n      <tr>\n        <td>영어</td>\n        <td>92</td>\n        <td>A</td>\n      </tr>\n      <tr>\n        <td>과학</td>\n        <td>86</td>\n        <td>B</td>\n      </tr>\n    </table>\n  </body>\n</html>\n```\n\n### 🎯 카드 레이아웃\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      .card-container {\n        display: flex;\n        gap: 20px;\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n\n      .card {\n        width: 200px;\n        border: 1px solid #ddd;\n        border-radius: 8px;\n        overflow: hidden;\n        transition: transform 0.3s, box-shadow 0.3s;\n      }\n\n      .card:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);\n      }\n\n      .card img {\n        width: 100%;\n        height: 150px;\n        object-fit: cover;\n      }\n\n      .card-content {\n        padding: 15px;\n      }\n\n      .card-content h3 {\n        margin: 0 0 10px 0;\n        color: #333;\n      }\n\n      .card-content p {\n        margin: 0;\n        color: #666;\n        font-size: 14px;\n      }\n\n      .card-content button {\n        margin-top: 10px;\n        width: 100%;\n        padding: 8px;\n        background-color: #4caf50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background-color 0.3s;\n      }\n\n      .card-content button:hover {\n        background-color: #45a049;\n      }\n\n      /* 특별한 카드 */\n      .card.featured {\n        border-color: gold;\n        border-width: 3px;\n      }\n\n      .card.featured::before {\n        content: \"⭐ 추천\";\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background-color: gold;\n        color: white;\n        padding: 5px 10px;\n        border-radius: 15px;\n        font-size: 12px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"card-container\">\n      <div class=\"card\">\n        <img\n          src=\"https://via.placeholder.com/200x150/FF6B6B/ffffff?text=카드1\"\n          alt=\"카드 이미지\"\n        />\n        <div class=\"card-content\">\n          <h3>일반 카드</h3>\n          <p>이것은 일반적인 카드입니다.</p>\n          <button>자세히 보기</button>\n        </div>\n      </div>\n\n      <div class=\"card featured\" style=\"position: relative;\">\n        <img\n          src=\"https://via.placeholder.com/200x150/4ECDC4/ffffff?text=카드2\"\n          alt=\"카드 이미지\"\n        />\n        <div class=\"card-content\">\n          <h3>특별한 카드</h3>\n          <p>이것은 추천 카드입니다!</p>\n          <button>자세히 보기</button>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <img\n          src=\"https://via.placeholder.com/200x150/45B7D1/ffffff?text=카드3\"\n          alt=\"카드 이미지\"\n        />\n        <div class=\"card-content\">\n          <h3>또 다른 카드</h3>\n          <p>마우스를 올려보세요!</p>\n          <button>자세히 보기</button>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n---\n\n## 📚 정리하기\n\nCSS 선택자는 웹페이지를 꾸미는 핵심 도구입니다!\n\n### 기억해야 할 중요한 내용:\n\n1. **기본 선택자**\n\n   - 태그 선택자: `p`, `div`, `h1`\n   - 클래스 선택자: `.classname`\n   - ID 선택자: `#idname`\n   - 전체 선택자: `*`\n\n2. **속성 선택자**\n\n   - `[속성]`: 속성이 있는 요소\n   - `[속성=\"값\"]`: 정확히 일치\n   - `[속성^=\"시작\"]`: 시작 부분 일치\n   - `[속성$=\"끝\"]`: 끝 부분 일치\n   - `[속성*=\"포함\"]`: 포함하는 경우\n\n3. **가상 클래스**\n\n   - `:hover` - 마우스 올렸을 때\n   - `:active` - 클릭할 때\n   - `:focus` - 포커스 받을 때\n   - `:first-child` - 첫 번째 자식\n   - `:nth-child()` - n번째 자식\n\n4. **결합자**\n\n   - 공백 - 후손 선택자\n   - `>` - 자식 선택자\n   - `+` - 인접 형제 선택자\n   - `~` - 일반 형제 선택자\n\n5. **우선순위 (명시도)**\n   - A-B-C 형식으로 계산: ID개수-클래스개수-타입개수\n   - 왼쪽 컬럼부터 비교 (점수 덧셈 ❌)\n   - !important > 인라인 스타일 > ID(A) > 클래스(B) > 타입(C)\n   - 같은 명시도면 나중 선언이 적용\n\n더 자세한 내용은 [MDN의 CSS 선택자 종합 가이드](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_selectors)와 [W3C CSS Selectors 명세](https://www.w3.org/TR/selectors-3/)를 참고하세요.\n",
      "content_text": "CSS 선택자의 모든 것을 쉽고 재미있게 배워보세요. 기본 선택자부터 고급 선택자까지 실습 예제와 함께 완벽하게 정리했습니다.",
      "url": "https://leeduhan.github.io/posts/css/css-selecter-guide/",
      "date_published": "2025-07-06T00:00:00.000Z",
      "authors": [
        {
          "name": "hanlee",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "CSS",
        "Web Development",
        "Frontend",
        "선택자",
        "웹 개발",
        "선택자 우선순위"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/tan-stack-query-use-query-vs-use-suspense-query/",
      "title": "TanStack Query: useQuery vs useSuspenseQuery 완벽 가이드",
      "content_html": "\n# TanStack Query: useQuery vs useSuspenseQuery\n\n## 들어가며\n\nReact 애플리케이션에서 서버 상태 관리는 항상 복잡한 문제였습니다. 로딩 상태, 에러 처리, 캐싱, 재시도 로직 등을 모두 고려해야 하죠. [TanStack Query](https://tanstack.com/query/latest)(구 React Query)는 이런 문제들을 우아하게 해결해주는 라이브러리입니다.\n\n[TanStack Query v5](https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5)에서는 기존의 `useQuery`와 함께 새로운 `useSuspenseQuery` 훅이 도입되었습니다. 이 두 훅은 비슷해 보이지만 서로 다른 패러다임을 따르고 있어, 언제 어떤 것을 사용해야 할지 고민이 될 수 있습니다.\n\n이 글에서는 두 훅의 차이점을 실제 코드 예시와 함께 자세히 살펴보고, 각각의 장단점과 적절한 사용 시기를 알아보겠습니다.\n\n## useQuery vs useSuspenseQuery: 핵심 차이점\n\n### 1. 로딩 상태 관리 철학\n\n**useQuery**는 **명령형(Imperative)** 접근 방식을 취합니다. 개발자가 직접 로딩 상태를 확인하고 UI를 제어해야 합니다.\n\n**useSuspenseQuery**는 **선언형(Declarative)** 접근 방식을 취합니다. [React의 Suspense](https://react.dev/reference/react/Suspense) 시스템에 로딩 상태를 위임하고, 개발자는 성공 상태에만 집중할 수 있습니다.\n\n### 2. 주요 차이점 요약\n\n| 특징 | useQuery | useSuspenseQuery |\n|------|----------|------------------|\n| **로딩 상태** | `isPending`, `isLoading` 플래그로 수동 처리 | React Suspense로 자동 처리 |\n| **에러 처리** | 컴포넌트 내에서 직접 처리 | Error Boundary로 위임 |\n| **데이터 타입** | `TData \\| undefined` | `TData` (항상 정의됨) |\n| **조건부 실행** | `enabled` 옵션 지원 | `enabled` 옵션 불가 |\n| **이전 데이터 유지** | `placeholderData`, `keepPreviousData` | [React Transitions](https://react.dev/reference/react/useTransition) 권장 |\n| **TypeScript 안전성** | 타입 가드 필요 | 자동으로 타입 안전 보장 |\n\n## 실제 사용 예시로 비교해보기\n\n### 시나리오: 사용자 프로필 페이지\n\n먼저 공통으로 사용할 API 함수를 정의해보겠습니다.\n\n```typescript\n// API 함수\ninterface User {\n  id: string\n  name: string\n  email: string\n  avatar?: string\n}\n\nconst fetchUser = async (userId: string): Promise<User> => {\n  const response = await fetch(`/api/users/${userId}`)\n  if (!response.ok) {\n    throw new Error(`사용자를 찾을 수 없습니다: ${response.status}`)\n  }\n  return response.json()\n}\n\nconst fetchUserPosts = async (userId: string) => {\n  const response = await fetch(`/api/users/${userId}/posts`)\n  if (!response.ok) {\n    throw new Error(`게시글을 불러올 수 없습니다: ${response.status}`)\n  }\n  return response.json()\n}\n```\n\n### 1. useQuery 사용 예시\n\n```typescript\nimport { useQuery } from '@tanstack/react-query'\n\nfunction UserProfileWithUseQuery({ userId }: { userId: string }) {\n  const { \n    data: user, \n    isLoading, \n    isError, \n    error,\n    isSuccess \n  } = useQuery({\n    queryKey: ['user', userId],\n    queryFn: () => fetchUser(userId),\n    enabled: !!userId, // 조건부 실행 가능\n    staleTime: 5 * 60 * 1000, // 5분간 신선함 유지\n    retry: 3, // 3번 재시도\n  })\n\n  // 로딩 상태 처리\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n        <span className=\"ml-2\">사용자 정보를 불러오는 중...</span>\n      </div>\n    )\n  }\n\n  // 에러 상태 처리\n  if (isError) {\n    return (\n      <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n        <h3 className=\"font-bold\">오류가 발생했습니다</h3>\n        <p>{error?.message}</p>\n        <button \n          onClick={() => window.location.reload()}\n          className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600\"\n        >\n          다시 시도\n        </button>\n      </div>\n    )\n  }\n\n  // 성공 상태 - 여전히 user가 undefined일 수 있어 타입 체크 필요\n  if (isSuccess && user) {\n    return (\n      <div className=\"bg-white shadow-lg rounded-lg p-6\">\n        <div className=\"flex items-center space-x-4\">\n          {user.avatar && (\n            <img \n              src={user.avatar} \n              alt={user.name}\n              className=\"w-16 h-16 rounded-full\"\n            />\n          )}\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-800\">{user.name}</h2>\n            <p className=\"text-gray-600\">{user.email}</p>\n          </div>\n        </div>\n        \n        {/* 종속 쿼리 - 사용자 정보가 있을 때만 실행 */}\n        <UserPostsWithUseQuery userId={user.id} />\n      </div>\n    )\n  }\n\n  return null\n}\n\n// 종속 쿼리 컴포넌트\nfunction UserPostsWithUseQuery({ userId }: { userId: string }) {\n  const { data: posts, isLoading, error } = useQuery({\n    queryKey: ['user-posts', userId],\n    queryFn: () => fetchUserPosts(userId),\n    enabled: !!userId, // 부모 쿼리가 성공한 후에만 실행\n  })\n\n  if (isLoading) {\n    return <div className=\"mt-4 text-gray-500\">게시글을 불러오는 중...</div>\n  }\n\n  if (error) {\n    return <div className=\"mt-4 text-red-500\">게시글 로딩 실패</div>\n  }\n\n  return (\n    <div className=\"mt-6\">\n      <h3 className=\"text-lg font-semibold mb-3\">최근 게시글</h3>\n      <div className=\"space-y-2\">\n        {posts?.map((post: any) => (\n          <div key={post.id} className=\"p-3 bg-gray-50 rounded\">\n            <h4 className=\"font-medium\">{post.title}</h4>\n            <p className=\"text-sm text-gray-600\">{post.excerpt}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n### 2. useSuspenseQuery 사용 예시\n\n```typescript\nimport { useSuspenseQuery } from '@tanstack/react-query'\nimport { Suspense } from 'react'\nimport { ErrorBoundary } from 'react-error-boundary' // npm install react-error-boundary\n\nfunction UserProfileWithSuspenseQuery({ userId }: { userId: string }) {\n  // useSuspenseQuery는 enabled 옵션이 없음\n  const { data: user } = useSuspenseQuery({\n    queryKey: ['user', userId],\n    queryFn: () => {\n      if (!userId) {\n        // enabled 대신 queryFn에서 조건 처리\n        return Promise.resolve(null)\n      }\n      return fetchUser(userId)\n    },\n    staleTime: 5 * 60 * 1000,\n    retry: 3,\n  })\n\n  // 로딩이나 에러 상태 체크 불필요\n  // data는 항상 정의되어 있음 (TypeScript에서 User 타입으로 추론)\n  if (!user) {\n    return <div>유효하지 않은 사용자 ID입니다.</div>\n  }\n\n  return (\n    <div className=\"bg-white shadow-lg rounded-lg p-6\">\n      <div className=\"flex items-center space-x-4\">\n        {user.avatar && (\n          <img \n            src={user.avatar} \n            alt={user.name}\n            className=\"w-16 h-16 rounded-full\"\n          />\n        )}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-800\">{user.name}</h2>\n          <p className=\"text-gray-600\">{user.email}</p>\n        </div>\n      </div>\n      \n      {/* 종속 쿼리 */}\n      <Suspense fallback={<div className=\"mt-4 text-gray-500\">게시글을 불러오는 중...</div>}>\n        <UserPostsWithSuspenseQuery userId={user.id} />\n      </Suspense>\n    </div>\n  )\n}\n\nfunction UserPostsWithSuspenseQuery({ userId }: { userId: string }) {\n  const { data: posts } = useSuspenseQuery({\n    queryKey: ['user-posts', userId],\n    queryFn: () => fetchUserPosts(userId),\n  })\n\n  return (\n    <div className=\"mt-6\">\n      <h3 className=\"text-lg font-semibold mb-3\">최근 게시글</h3>\n      <div className=\"space-y-2\">\n        {posts.map((post: any) => (\n          <div key={post.id} className=\"p-3 bg-gray-50 rounded\">\n            <h4 className=\"font-medium\">{post.title}</h4>\n            <p className=\"text-sm text-gray-600\">{post.excerpt}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n### 3. 앱 전체 구조 비교\n\n```typescript\n// useQuery를 사용한 앱 구조\nfunction AppWithUseQuery() {\n  const [userId, setUserId] = useState<string>('123')\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">사용자 프로필 (useQuery)</h1>\n      \n      <div className=\"mb-4\">\n        <input \n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          placeholder=\"사용자 ID 입력\"\n          className=\"border border-gray-300 rounded px-3 py-2 w-full\"\n        />\n      </div>\n\n      {/* 각 컴포넌트에서 개별적으로 로딩/에러 처리 */}\n      <UserProfileWithUseQuery userId={userId} />\n    </div>\n  )\n}\n\n// useSuspenseQuery를 사용한 앱 구조\nfunction AppWithSuspenseQuery() {\n  const [userId, setUserId] = useState<string>('123')\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">사용자 프로필 (useSuspenseQuery)</h1>\n      \n      <div className=\"mb-4\">\n        <input \n          value={userId}\n          onChange={(e) => setUserId(e.target.value)}\n          placeholder=\"사용자 ID 입력\"\n          className=\"border border-gray-300 rounded px-3 py-2 w-full\"\n        />\n      </div>\n\n      {/* 전역적인 로딩/에러 처리 */}\n      <ErrorBoundary\n        fallback={({ error, resetErrorBoundary }) => (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n            <h3 className=\"font-bold\">오류가 발생했습니다</h3>\n            <p>{error.message}</p>\n            <button \n              onClick={resetErrorBoundary}\n              className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600\"\n            >\n              다시 시도\n            </button>\n          </div>\n        )}\n        onReset={() => window.location.reload()}\n      >\n        <Suspense fallback={\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n            <span className=\"ml-2\">로딩 중...</span>\n          </div>\n        }>\n          {userId && <UserProfileWithSuspenseQuery userId={userId} />}\n        </Suspense>\n      </ErrorBoundary>\n    </div>\n  )\n}\n```\n\n## 복잡한 시나리오: 검색 기능 구현\n\n### useQuery로 검색 구현\n\n```typescript\nfunction SearchWithUseQuery() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [debouncedTerm, setDebouncedTerm] = useState('')\n\n  // 디바운싱\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedTerm(searchTerm)\n    }, 300)\n    return () => clearTimeout(timer)\n  }, [searchTerm])\n\n  const { \n    data, \n    isLoading, \n    error, \n    isFetching,\n    isPreviousData \n  } = useQuery({\n    queryKey: ['search', debouncedTerm],\n    queryFn: () => searchUsers(debouncedTerm),\n    enabled: debouncedTerm.length > 2, // 3글자 이상일 때만 검색\n    keepPreviousData: true, // 이전 결과 유지하면서 새 데이터 로딩\n    staleTime: 1000 * 30, // 30초\n  })\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"relative\">\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          placeholder=\"사용자 검색...\"\n          className=\"w-full border rounded px-3 py-2\"\n        />\n        {isFetching && (\n          <div className=\"absolute right-2 top-2\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500\"></div>\n          </div>\n        )}\n      </div>\n\n      {searchTerm.length > 0 && searchTerm.length <= 2 && (\n        <p className=\"text-gray-500 mt-2\">3글자 이상 입력해주세요</p>\n      )}\n\n      {error && (\n        <p className=\"text-red-500 mt-2\">검색 중 오류가 발생했습니다</p>\n      )}\n\n      {isLoading && searchTerm.length > 2 && (\n        <div className=\"mt-4 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n          <p className=\"mt-2\">검색 중...</p>\n        </div>\n      )}\n\n      {data && (\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <p className=\"text-sm text-gray-600\">\n              {data.length}개의 결과\n            </p>\n            {isPreviousData && (\n              <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\">\n                업데이트 중...\n              </span>\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            {data.map((user: User) => (\n              <div key={user.id} className=\"p-3 border rounded hover:bg-gray-50\">\n                <h3 className=\"font-semibold\">{user.name}</h3>\n                <p className=\"text-gray-600\">{user.email}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n```\n\n### useSuspenseQuery로 검색 구현\n\n```typescript\nfunction SearchWithSuspenseQuery() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [debouncedTerm, setDebouncedTerm] = useState('')\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedTerm(searchTerm)\n    }, 300)\n    return () => clearTimeout(timer)\n  }, [searchTerm])\n\n  return (\n    <div className=\"p-4\">\n      <input\n        type=\"text\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        placeholder=\"사용자 검색...\"\n        className=\"w-full border rounded px-3 py-2\"\n      />\n\n      {searchTerm.length > 0 && searchTerm.length <= 2 && (\n        <p className=\"text-gray-500 mt-2\">3글자 이상 입력해주세요</p>\n      )}\n\n      {debouncedTerm.length > 2 && (\n        <ErrorBoundary\n          fallback={({ error, resetErrorBoundary }) => (\n            <div className=\"mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n              <p>검색 중 오류가 발생했습니다: {error.message}</p>\n              <button \n                onClick={resetErrorBoundary}\n                className=\"mt-2 bg-red-500 text-white px-3 py-1 rounded\"\n              >\n                다시 시도\n              </button>\n            </div>\n          )}\n        >\n          <Suspense fallback={\n            <div className=\"mt-4 text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n              <p className=\"mt-2\">검색 중...</p>\n            </div>\n          }>\n            <SearchResults searchTerm={debouncedTerm} />\n          </Suspense>\n        </ErrorBoundary>\n      )}\n    </div>\n  )\n}\n\nfunction SearchResults({ searchTerm }: { searchTerm: string }) {\n  const { data } = useSuspenseQuery({\n    queryKey: ['search', searchTerm],\n    queryFn: () => searchUsers(searchTerm),\n    staleTime: 1000 * 30,\n  })\n\n  // React.startTransition을 사용하여 이전 결과 유지\n  return (\n    <div className=\"mt-4\">\n      <p className=\"text-sm text-gray-600 mb-2\">\n        {data.length}개의 결과\n      </p>\n      <div className=\"space-y-2\">\n        {data.map((user: User) => (\n          <div key={user.id} className=\"p-3 border rounded hover:bg-gray-50\">\n            <h3 className=\"font-semibold\">{user.name}</h3>\n            <p className=\"text-gray-600\">{user.email}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n```\n\n## 마이그레이션 고려사항\n\n### useQuery에서 useSuspenseQuery로 전환할 때\n\n1. **조건부 쿼리 처리**\n   ```typescript\n   // Before (useQuery)\n   const { data } = useQuery({\n     queryKey: ['user', userId],\n     queryFn: () => fetchUser(userId),\n     enabled: !!userId\n   })\n\n   // After (useSuspenseQuery)\n   // 조건부 렌더링으로 처리\n   if (!userId) return <div>사용자를 선택해주세요</div>\n   \n   const { data } = useSuspenseQuery({\n     queryKey: ['user', userId],\n     queryFn: () => fetchUser(userId)\n   })\n   ```\n\n2. **이전 데이터 유지**\n   ```typescript\n   // Before (useQuery)\n   const { data, isPreviousData } = useQuery({\n     queryKey: ['posts', page],\n     queryFn: () => fetchPosts(page),\n     keepPreviousData: true\n   })\n\n   // After (useSuspenseQuery + React Transitions)\n   const [page, setPage] = useState(1)\n   const [isPending, startTransition] = useTransition()\n   \n   const { data } = useSuspenseQuery({\n     queryKey: ['posts', page],\n     queryFn: () => fetchPosts(page)\n   })\n\n   const handlePageChange = (newPage: number) => {\n     startTransition(() => {\n       setPage(newPage)\n     })\n   }\n   ```\n\n3. **에러 처리 구조 변경**\n   ```typescript\n   // Before - 컴포넌트별 에러 처리\n   function Component() {\n     const { data, error } = useQuery({...})\n     if (error) return <ErrorMessage error={error} />\n     return <SuccessView data={data} />\n   }\n\n   // After - Error Boundary로 집중\n   function App() {\n     return (\n       <ErrorBoundary fallback={ErrorFallback}>\n         <Suspense fallback={<Loading />}>\n           <Component />\n         </Suspense>\n       </ErrorBoundary>\n     )\n   }\n   ```\n\n## 언제 어떤 것을 사용할까?\n\n### useQuery를 선택해야 하는 경우\n\n1. **세밀한 로딩 상태 제어가 필요한 경우**\n   - 여러 부분에서 다른 로딩 UI를 보여줘야 할 때\n   - 백그라운드 리페치 상태를 사용자에게 표시해야 할 때\n\n2. **조건부 쿼리가 많은 경우**\n   - 폼 데이터나 사용자 입력에 따라 쿼리를 켜고 꺼야 할 때\n   - 복잡한 의존성을 가진 쿼리들\n\n3. **점진적 마이그레이션**\n   - 기존 프로젝트에서 단계적으로 도입할 때\n   - 팀이 Suspense 패턴에 익숙하지 않을 때\n\n4. **이전 데이터 유지가 중요한 경우**\n   - 페이지네이션, 필터링 등에서 깜빡임 없는 UX가 필요할 때\n\n### useSuspenseQuery를 선택해야 하는 경우\n\n1. **선언적 코드를 선호하는 경우**\n   - 컴포넌트 로직을 단순화하고 싶을 때\n   - 로딩/에러 상태 처리를 외부로 위임하고 싶을 때\n\n2. **TypeScript 타입 안전성이 중요한 경우**\n   - `data`가 항상 정의되어 있음을 보장받고 싶을 때\n   - 타입 가드 코드를 줄이고 싶을 때\n\n3. **현대적인 React 패턴을 활용하고 싶은 경우**\n   - Concurrent Features와 함께 사용할 때\n   - Server Components와 Streaming을 활용할 때\n\n4. **일관된 에러 처리 전략이 있는 경우**\n   - 앱 전체에서 통일된 에러 UI를 제공하고 싶을 때\n\n## 성능 고려사항\n\n### 쿼리 워터폴 문제\n\n`useSuspenseQuery는 컴포넌트 트리에서 직렬로 실행되는 경향이 있습니다` (근거 없음):\n\n```typescript\n// 문제가 있는 패턴 - 직렬 실행\nfunction UserDashboard({ userId }: { userId: string }) {\n  const { data: user } = useSuspenseQuery({\n    queryKey: ['user', userId],\n    queryFn: () => fetchUser(userId)\n  })\n  \n  return (\n    <div>\n      <UserProfile user={user} />\n      <Suspense fallback={<div>프로젝트 로딩 중...</div>}>\n        <UserProjects userId={userId} /> {/* user 쿼리 완료 후 시작 */}\n      </Suspense>\n    </div>\n  )\n}\n\n// 개선된 패턴 - 병렬 실행\nfunction UserDashboard({ userId }: { userId: string }) {\n  return (\n    <Suspense fallback={<div>로딩 중...</div>}>\n      <UserProfile userId={userId} />\n      <UserProjects userId={userId} />\n    </Suspense>\n  )\n}\n\nfunction UserProfile({ userId }: { userId: string }) {\n  const { data: user } = useSuspenseQuery({\n    queryKey: ['user', userId],\n    queryFn: () => fetchUser(userId)\n  })\n  return <div>{user.name}</div>\n}\n\nfunction UserProjects({ userId }: { userId: string }) {\n  const { data: projects } = useSuspenseQuery({\n    queryKey: ['projects', userId],\n    queryFn: () => fetchUserProjects(userId)\n  })\n  return <div>{projects.length} 프로젝트</div>\n}\n```\n\n### 캐시 활용\n\n두 훅 모두 같은 QueryClient 캐시를 공유하므로 함께 사용할 수 있습니다:\n\n```typescript\n// useQuery로 프리페치\nfunction HomePage() {\n  useQuery({\n    queryKey: ['user', 'current'],\n    queryFn: fetchCurrentUser,\n    staleTime: Infinity, // 캐시에 오래 보관\n  })\n  \n  return <Link to=\"/profile\">프로필 보기</Link>\n}\n\n// useSuspenseQuery로 사용 - 이미 캐시된 데이터 활용\nfunction ProfilePage() {\n  const { data: user } = useSuspenseQuery({\n    queryKey: ['user', 'current'],\n    queryFn: fetchCurrentUser\n  })\n  \n  return <UserProfile user={user} />\n}\n```\n\n## 실전 팁\n\n### 1. Error Boundary 최적화\n\n```typescript\nimport { QueryErrorResetBoundary } from '@tanstack/react-query'\n\nfunction App() {\n  return (\n    <QueryErrorResetBoundary>\n      {({ reset }) => (\n        <ErrorBoundary\n          onReset={reset}\n          fallbackRender={({ error, resetErrorBoundary }) => (\n            <div className=\"error-container\">\n              <h2>문제가 발생했습니다</h2>\n              <details>\n                <summary>오류 상세 정보</summary>\n                <pre>{error.message}</pre>\n              </details>\n              <button onClick={resetErrorBoundary}>\n                다시 시도\n              </button>\n            </div>\n          )}\n        >\n          <Router>\n            <Routes>\n              <Route path=\"/\" element={\n                <Suspense fallback={<PageLoader />}>\n                  <HomePage />\n                </Suspense>\n              } />\n            </Routes>\n          </Router>\n        </ErrorBoundary>\n      )}\n    </QueryErrorResetBoundary>\n  )\n}\n```\n\n### 2. 로딩 상태 최적화\n\n```typescript\n// 스켈레톤 UI 활용\nfunction ProductListSkeleton() {\n  return (\n    <div className=\"grid grid-cols-3 gap-4\">\n      {Array.from({ length: 6 }).map((_, i) => (\n        <div key={i} className=\"animate-pulse\">\n          <div className=\"bg-gray-300 h-48 rounded mb-2\"></div>\n          <div className=\"bg-gray-300 h-4 rounded mb-1\"></div>\n          <div className=\"bg-gray-300 h-4 w-2/3 rounded\"></div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction ProductList() {\n  return (\n    <Suspense fallback={<ProductListSkeleton />}>\n      <ProductListContent />\n    </Suspense>\n  )\n}\n```\n\n### 3. 점진적 마이그레이션 전략\n\n```typescript\n// 1단계: useQuery + suspense 옵션 (v4 스타일)\nconst { data } = useQuery({\n  queryKey: ['user'],\n  queryFn: fetchUser,\n  suspense: true // [v5에서는 deprecated](https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5#removed-features)\n})\n\n// 2단계: 조건부로 useSuspenseQuery 도입\nconst USE_SUSPENSE = process.env.NODE_ENV === 'development'\n\nfunction UserComponent() {\n  if (USE_SUSPENSE) {\n    return <UserWithSuspense />\n  }\n  return <UserWithUseQuery />\n}\n\n// 3단계: 완전 전환\nfunction UserComponent() {\n  const { data } = useSuspenseQuery({\n    queryKey: ['user'],\n    queryFn: fetchUser\n  })\n  return <UserProfile user={data} />\n}\n```\n\n## 결론\n\n`useQuery`와 `useSuspenseQuery`는 각각 다른 철학과 사용 사례를 가지고 있습니다.\n\n**useQuery**는 **제어와 유연성**을 제공합니다. 복잡한 로직, 조건부 쿼리, 세밀한 상태 관리가 필요한 경우에 적합합니다.\n\n**useSuspenseQuery**는 **단순함과 일관성**을 제공합니다. 현대적인 React 패턴을 활용하여 선언적이고 타입 안전한 코드를 작성하고 싶을 때 적합합니다.\n\n두 접근 방식 모두 장단점이 있으므로, 프로젝트의 요구사항, 팀의 경험, 그리고 장기적인 유지보수 전략을 고려하여 선택하는 것이 중요합니다. 무엇보다 두 훅은 같은 캐시를 공유하므로, 필요에 따라 혼용하여 사용할 수 있다는 점을 기억하세요.\n\nReact의 생태계가 [Concurrent Features](https://react.dev/blog/2022/03/29/react-v18#what-is-concurrent-react)와 Suspense 쪽으로 발전하고 있는 만큼, `useSuspenseQuery`를 익혀두는 것은 미래를 위한 좋은 투자가 될 것입니다.\n\n## 참고 자료\n\n- [TanStack Query 공식 문서](https://tanstack.com/query/latest)\n- [React Suspense 문서](https://react.dev/reference/react/Suspense)\n- [React Error Boundaries](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)\n- [TanStack Query v5 마이그레이션 가이드](https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5)",
      "content_text": "TanStack Query의 useQuery와 useSuspenseQuery 훅의 차이점을 실제 코드 예시와 함께 상세히 비교하고, 각각의 장단점과 적절한 사용 시기를 알아봅니다.",
      "url": "https://leeduhan.github.io/posts/react/tan-stack-query-use-query-vs-use-suspense-query/",
      "date_published": "2025-06-23T00:00:00.000Z",
      "authors": [
        {
          "name": "Zeke",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "TanStack Query",
        "React",
        "Suspense",
        "useSuspenseQuery",
        "useQuery"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/stock/2025-06-15/",
      "title": "새 정부 출범, 부동산과 주식시장은 어디로 갈까?",
      "content_html": "\n# 새 정부 출범, 부동산과 주식시장은 어디로 갈까?\n\n대통령이 바뀌면서 부동산과 주식시장이 어떻게 변할지 생각해봤습니다. 일단 부동산도 오르고 주식도 오를 것이라 생각했습니다.\n\n## 정권 교체 초기, 기대감이 시장을 움직인다\n\n[역대 정권교체 초기 증시흐름](https://www.ajunews.com/view/20250611162857661)을 보면, 이재명 정부 출범 이후 5거래일 동안 코스피가 7.71%, 코스닥은 6.21% 상승했습니다. 이전 정권 집권 초기 대비 수익률도 월등히 높았습니다.\n\n원래 정권이 바뀌면 초반 한두 달은 기대감에 오르는 것이 일반적입니다. 그런데 이번 대통령은 부동산과 주식에 대한 경험과 지식이 있어 보여서 나름의 설계가 있을 것으로 보입니다.\n\n## 새 정부의 부동산 전략: 자율 시장경제\n\n일단 부동산 가격을 강제로 잡으려는 대책을 내놓을 생각은 없어 보입니다. 자율시장경제에 맡기겠다는 입장입니다.\n\n`제 생각엔 그동안 부동산으로 돈이 몰린 이유가 백억, 천억대 자산가들이 세금이나 운영을 따져봤을 때 한국에서 운영하기 가장 좋은 것이 부동산이라서 많은 투자를 했다고 판단했을 것` (근거 없음) 이라 생각합니다.\n\n### 첫 번째 전략: 공급 확대\n\n많은 주택을 지을 것입니다. 수요와 공급이 자본주의의 기본이니까요. 공급을 늘려서 수요와 비등하게 맞추면 부동산 가격 폭등까지는 막을 수 있을 것입니다.\n\n[전문가들도 공급 확대 정책](https://www.bank-mall.co.kr/plus/blog/12033)을 할 것이라는 의견입니다. 전문가들은 이재명 정부의 부동산 공약이 \"공급 확대\"에 중점을 두고 있으며, 전 정부의 세금 위주 정책과는 다른 스탠스를 보인다고 분석합니다.\n\n## 핵심은 상법 개정을 통한 주식시장 혁신\n\n### 두 번째 전략: 주식시장 매력도 제고\n\n상법 개정을 통해서 백억대, 천억대 자산가들이 부동산보다 주식, 채권에서 더 많은 수익이나 고정된 현금을 창출할 수 있게 한다면 어떨까요? 돈이 부동산으로만 흐르지 않을 테니 부동산 집값도 잡고, 저평가된 주식시장도 올릴 수 있을 것입니다.\n\n현재 외국인이 단타 치는 시장을 진정한 투자 시장으로 바꿀 수도 있고요.\n\n### 상법 개정의 과제들\n\n그러려면 상법 개정이 성공적이어야 합니다. 현재 문제가 되는 것들이 너무 많습니다:\n\n- 기업에 돈이 있어도 배당하지 않는 문제\n  - [한국 기업 배당성향, 튀르키예보다 낮은 16위](https://v.daum.net/v/20250318000146874)\n  - [한국경제 보도](https://www.hankyung.com/article/2024052008351)에 따르면, 유가증권시장 상장사의 현금배당액은 10년 만에 15조원에서 41조원으로 늘었지만, 배당액 상위 20개사가 차지하는 비중은 65%로 소수 대기업에 집중되어 있습니다. 또한 한국 기업의 유동주식 비중(60.6%)은 미국(95%)·영국(93.9%)에 비해 크게 낮아 대주주 중심의 지배구조가 배당 확대를 가로막고 있습니다.\n- 기업분할 및 쪼개기 상장 같은 주주 가치 훼손 행위\n- 경영진의 배임, 횡령 등 회사 자산 유용에 대한 방지와 엄격한 처벌\n- 무차입 공매도 문제\n\n이 모든 것이 개선되어야 부동산도, 주식도 바로잡을 수 있게 될 것입니다.\n\n**모든 것이 상법 개정에 달려 있습니다.**\n\n## 배당 정책이 핵심이 될 이유\n\n부동산은 2~3년이면 완공 해서 분양하면 되지만, 상법 개정은 그동안 수많은 규제와 정책을 전부 손봐야 하니 쉽지 않을 것입니다. 그리고 국회에서 반대에 부딧쳐 계류된다면 더 심각해질 것입니다.\n\n더 많은 세금, 더 많은 제약으로 많은 돈을 가진 자산가들이 다시 주식을 외면한다면 자본은 다시 미국 시장으로 갈 수밖에 없게 됩니다.\n\n### 미국 배당 정책의 성공 사례\n\n[미국 배당 정책](https://eiec.kdi.re.kr/publish/columnView.do?cidx=13417&sel_year=2021&sel_month=07)을 보면, 미국 주식시장은 주주친화적인 기업이 많고, 분기 배당 정책으로 투자자들에게 월세처럼 꾸준한 현금 창출이 가능합니다. KB증권에 따르면 최근 10년간 미국 S&P500 상장사들의 배당 성향은 39%로 한국 유가증권시장(22%)에 비해 크게 높았습니다.\n\n미국 증시도 배당을 기본으로 하는 정책 때문에 외국인이 많은 투자를 하고 있고, 투자금을 빼지 않고 있다고 생각합니다.\n\n### 국내 배당 제도 개선 현황\n\n실제로 정부도 이를 인식하고 있습니다. [금융위원회의 배당 제도 개선](https://www.fsc.go.kr/po010101/79358)을 보면, 배당투자 활성화가 기업의 배당 확대로 이어져 다시 배당수익을 목적으로 하는 장기투자가 확대되는, 우리 자본시장의 선순환 구조가 마련될 것으로 기대됩니다.\n\n## 절호의 기회를 놓치지 말아야\n\n`미국이 외국인 배당세 등 여러 가지 이유로 혼란할 때 우리가 외국인 투자자들의 매력을 끌어서 돈을 유입시킬 절호의 기회가 아닐까` (근거 없음) 싶습니다.\n\n## 결론: 배당이 답이다\n\n이번 상법 개정의 핵심이 되어야 할 것은 배당일 것이라 생각합니다.\n\n[경제계도 같은 생각](https://www.sedaily.com/NewsView/2GQ7TA15CD/GC03)입니다. 대한상공회의소는 \"국회가 추진하는 상법 개정은 이사의 법적 책임에 대한 불확실성만 키워 소송 남발, 투자 위축, 혁신 저해 등 기업 경쟁력을 훼손할 것\"이라며 \"주주에게 직접적인 혜택이 갈 수 있는 주주배당 확대를 위한 조세제도를 마련해 밸류업을 모색해야 한다\"고 밝혔습니다.\n\n이번 상법 개정에서 배당이 얼마나 매력적이 되느냐가 중요한 과제라고 생각합니다.\n",
      "content_text": "정권 교체 이후 부동산과 주식시장의 변화 방향을 분석합니다. 공급 확대와 상법 개정을 통한 배당 정책이 핵심이 될 전망입니다.",
      "url": "https://leeduhan.github.io/posts/stock/2025-06-15/",
      "date_published": "2025-06-15T00:00:00.000Z",
      "authors": [
        {
          "name": "",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "주식",
        "부동산",
        "정책",
        "투자",
        "배당"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-15-development-workflow-with-cloud-code-4/",
      "title": "Claude Code로 개발 워크플로우 - Slash Command 설치 및 사용법",
      "content_html": "\n# Slash Command\n\nSlash Command는 Claude Code에서 **/**를 입력하면 사용 가능한 명령어 목록이 나타난다.\n\n내가 생각한 워크플로 방법은 다음과 같았다.\n\n1. `/jira-worktree <지라URL> <대상브랜치 없으면 현재 브랜치>`\n2. 생성된 worktree 폴더로 이동\n3. pnpm i 로 패키지 설치\n4. `code .` 명령으로 VS Code 에디터 실행\n\n그런데 몇 가지 문제점이 있었다. \n\n1. worktree 폴더가 상위로 생성되었을 때 Claude Code의 보안 제한으로 접근 불가: 현재 폴더에서 `.worktrees` 폴더를 생성하고 그 안에 worktree를 생성하는 방식으로 해결 가능 \n2. 명령 실행 시 토큰을 소모한다. (비용 증가)\n3. 셸 스크립트 실행인데 실행 및 최종 완료되는 시간이 많이 소요된다. (오래 걸린다)\n\n그래서 Slash Command를 사용하지 않고 bash 쉘로 작업이 가능한것은 [Git Subcommand](/posts/claude/2025-06-10-development-workflow-with-cloud-code-3)로 대부분을 변경했다. \n\n하지만 AI를 사용해서 작업하는 게 더 편한 것은 Slash Command이기 때문에 Slash Command를 사용해서 작업하는 방법을 소개한다.\n\n## ai-commit\n\nGit 커밋 메시지를 자동으로 생성하는 slash command이다. 현재 변경된 사항을 분석해서 메시지를 생성한다.\n\n이를 설치하는 셸 스크립트를 작성해 달라고 했다. 등록하기 쉽고 삭제하기 쉬운 방법이 셸 스크립트라서 선택했다.\n\n설치와 삭제 모두 지원하는 스크립트이며, 전역과 현재 프로젝트 내 설치 둘 다 지원한다. \n\n셸 스크립트 실행 시 다음 위치에 생성되고 명령어 사용법은 다음과 같다.\n\n### 사용 설명서\n\n#### 설치 위치\n\n**글로벌 설치 (추천)**\n- 모든 프로젝트에서 사용 가능\n- 명령어: `/ai-commit`, `/aic`\n- 설치 위치: `~/.claude/commands/ai-commit.md`\n\n**프로젝트 설치**\n- 현재 프로젝트에서만 사용\n- 명령어: `/ai-commit`, `/aic`\n- 설치 위치: `.claude/commands/ai-commit.md`\n\n\n\n#### 동작 방식\n\n변경사항 감지 → 스마트 그룹화 → 커밋 메시지 생성 → 순차 커밋\n\n\n#### 스크립트 실행\n```bash\n$> bash ./ai_commit_manager_enhanced.sh\n```\n\n#### 글로벌 명령어\n\n```bash\n/ai-commit          # 기본 자동 분리 커밋\n/aic               # 짧은 별칭 (추천)\n```\n\n#### 프로젝트 명령어\n```bash\n/ai-commit      # 프로젝트별 설정\n/aic           # 짧은 별칭\n```\n\n#### 옵션들\n\n```bash\n/ai-commit                    # 기본 자동 분리 커밋\n/ai-commit --push            # 커밋 후 자동 push\n/ai-commit --dry-run         # 미리보기만 (커밋 안함)\n/ai-commit --single          # 모든 변경사항을 하나로 통합\n```\n\n```bash\n/ai-commit --lang en         # 영문 커밋 메시지\n/ai-commit --emoji           # 이모지 포함 (✨ feat, 🐛 fix 등)\n```\n\n```bash\n/ai-commit --push            # 가장 일반적인 사용법\n/ai-commit --single --push   # 단일 커밋 후 push\n/ai-commit --dry-run         # 테스트용 미리보기\n/ai-commit --emoji --lang en # 영문 + 이모지\n```\n\n\n#### Dry-run 모드\n```\n⚡ AI Commit (Dry-run) - 커밋 시뮬레이션\n\n📋 생성될 커밋 미리보기:\n\nCommit 1: feat(dashboard): 대시보드 차트 컴포넌트 추가\nFiles: src/components/Chart.tsx, src/hooks/useChartData.ts\n\nCommit 2: test(dashboard): 차트 컴포넌트 단위 테스트\nFiles: src/components/__tests__/Chart.test.tsx\n\n💡 실제 커밋을 하려면 --dry-run 옵션을 제거하고 다시 실행하세요.\n```\n\n#### 단일 커밋 모드\n```\n📦 모든 변경사항을 하나의 커밋으로 통합합니다...\n\n✨ 생성된 커밋 메시지:\nfeat(auth): 사용자 인증 시스템 구현\n\n- 로그인/로그아웃 기능 추가\n- JWT 토큰 기반 인증 구현  \n- 사용자 상태 관리 훅 개발\n- API 엔드포인트 및 타입 정의\n- 로그인 페이지 UI/UX 구현\n\n이 메시지로 커밋하시겠습니까? (Y/n/e[dit]):\n```\n\n#### 스마트 그룹화 규칙\n\n##### 파일 경로별 그룹화\n```\ncomponents/Login.tsx + components/Button.tsx → UI 컴포넌트 그룹\napi/auth.ts + types/user.ts → API 관련 그룹\nutils/validation.ts → 유틸리티 그룹\n```\n\n##### 기능별 그룹화\n```\nLogin.tsx + Login.test.tsx → 로그인 기능 그룹  \nUserProfile.tsx + useUserProfile.ts → 프로필 기능 그룹\n```\n\n##### 변경 타입별 그룹화\n```\n새 파일들 → feat 그룹\n버그 수정 → fix 그룹\n테스트 파일 → test 그룹\n```\n\n#### 커밋 타입 자동 결정\n\n| 타입 | 조건 | 예시 |\n|------|------|------|\n| `feat` | 새 기능, 컴포넌트, API | 새 로그인 페이지 |\n| `fix` | 버그 수정, 에러 처리 | try-catch 추가 |\n| `refactor` | 코드 구조 개선 | 함수 분리 |\n| `style` | CSS, 스타일링 | 버튼 스타일 수정 |\n| `test` | 테스트 코드 | 단위 테스트 추가 |\n| `docs` | 문서, 주석 | README 업데이트 |\n| `chore` | 설정, 빌드 | package.json 수정 |\n\n#### ⚡ 효율적인 워크플로우\n\n```bash\n# 개발 중\n$> git add .\n$> /ai-commit --dry-run        # 미리보기\n\n# 확인 후 커밋\n$> /ai-commit --push           # 커밋 + 푸시\n\n# 급할 때\n$> /ai-commit --single --push  # 단일 커밋 + 푸시\n```\n\n\n해당 스크립트는 [여기](/file/ai_commit_manager_enhanced.sh)에서 다운로드 가능하다. \n\n해당 스크립트는 macOS에 최적화되어 있으므로 다른 OS에서는 Claude Code에게 최적화를 요청하면 된다.\n",
      "content_text": "Claude Code의 Slash Command 기능 소개와 ai-commit 명령어 설치 가이드. 워크플로우 자동화를 위한 실용적인 팁과 문제점 해결 방법을 다룹니다.",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-15-development-workflow-with-cloud-code-4/",
      "date_published": "2025-06-15T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Claude Code",
        "클로드 코드",
        "바이브 코딩",
        "Vibe Coding",
        "Slash Command",
        "Git",
        "AI",
        "개발 도구",
        "자동화",
        "워크플로우",
        "ai-commit"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-3/",
      "title": "Claude Code로 개발 워크플로우 - Git Subcommand 설치 및 사용법",
      "content_html": "\n# Git Subcommand 설치\n\nGit Subcommand 스크립트를 실행해서 설치한다. 설치된 스크립트는 다음과 같이 사용한다.\n\n```bash\n# Jira 워크트리 생성\ngit wt-jira QAT-3349          # → fix/QAT-3349\ngit wt-jira PROJ-123          # → feature/PROJ-123\ngit wt-jira QAT-3349 develop  # develop에서 생성\ngit wt-jira https://company.atlassian.net/browse/QAT-3349  # → fix/QAT-3349\n\ngit wt-list                       # 목록 확인\ngit wt-list -v                    # 상세 정보\ngit wt-cleanup                    # 안전 정리\n\n# 도움말\ngit wt-jira --help\ngit wt-cleanup --help\ngit wt-list --help\n```\n\n자세한 매뉴얼은 git_worktree_manual.md를 참고하면 된다.\n\n스크립트의 동작 방식은 다음과 같다.\n\n## 1. git wt-jira QAT-xxxx\n\nQAT-xxxx로 시작하면 fix/QAT-xxxx로 worktree를 생성한다. 그외 티켓인경우 feature/티켓번호 로 브랜치가 생성된다.\n\n생성되는 폴더는 현재 폴더에 `.worktrees` 폴더를 만들고 그 안에 위치한다. 즉, `프로젝트root/.worktrees/fix-QAT-xxxx` 폴더가 생성된다.\n\n```bash\n$> git wt-jira https://company.atlassian.net/browse/QAT-3349  # → fix/QAT-3349\n```\n\n이 명령은 URL을 파싱해서 실행하므로 최종 명령은 동일하다.\n\n다음 명령 실행과 동일하다.\n\n```bash\n$> git worktree add .worktrees/fix-QAT-xxxx -b fix/QAT-xxxx [target브랜치]\n\n$> cd ./.worktrees/fix-QAT-xxxx # 생성된 worktree 폴더로 이동한다\n\n$> npm i # worktree는 새로운 프로젝트 폴더이므로 의존성을 다시 설치해야 한다. 내부적으로 패키지 매니저를 자동으로 인식해서 실행한다\n\n$> code . # VS Code를 실행한다\n```\n\nworktree 생성 시 `.worktrees` 폴더를 하위에 만드는 방식으로 결정한 것은 처음에 시도한 방법이 Slash Command였는데 이 방법은 Claude Code가 상위 디렉토리에 접근하지 못하는 문제가 있었다. 나중에 git worktree 관련 명령이 셸 스크립트로 바뀌면서 이 문제는 해결되었지만 `.worktrees` 폴더 밑에 모아놓은 게 관리하기 편하다는 것을 느껴서 이대로 구조를 유지했다.\n\n## 2. git wt-list\n\n아래 명령어의 단축어이다.\n\n```bash\n$> git worktree list\n```\n\n## 3. git wt-clean\n\n아래 명령어들의 단축어이다. 이 명령은 브랜치까지 삭제하지 않으므로 브랜치는 그대로 남아 있다.\n\n```bash\n$> git worktree remove [폴더절대경로]/.worktrees/fix-QAT-xxxx\n\n$> git worktree prune\n```\n\n## 셸 스크립트\n\n이 스크립트가 최종 완성본이다. 셸 등록 및 업데이트, 셸 스크립트 삭제가 하나의 명령어로 가능하다.\n\n해당 셸은 Mac에서 테스트되었다. 그 외 OS는 아마도 Claude의 도움이 필요하다.\n\n[installer_script 다운로드](/file/installer_script.sh)\n\n```sh\n# 다운로드 후 실행\n$> bash ./installer_script.sh\n```\n",
      "content_text": "Git Worktree를 활용한 효율적인 개발 환경 구성",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-3/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "git worktree",
        "Claude Code",
        "클로드 코드",
        "바이브 코딩",
        "Vibe Coding",
        "Jira",
        "개발 환경",
        "자동화"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-1/",
      "title": "Claude Code로 개발 워크플로우",
      "content_html": "\n# Claude Code로 개발 워크플로우\n\nClaude Code를 쓰면서 느낀 점이 매우 똑똑한 주니어와 페어 프로그래밍을 하는 느낌이었다. 똑똑한데 개발의 방향이랑 뭘 개발해야 하는지 명확하게 이해하지 못하는 주니어랄까?\n\n기존에 많은 유저가 쓰는 라이브러리는 정말 잘 쓰지만 조금이라도 비주류의 라이브러리는 상상 코딩하거나 제대로 동작을 못 시키거나 해서 따로 관련 샘플이나 자료를 링크 리스트를 만들어서 학습을 시켜서 진행을 해야 했다.\n\n그리고 어떤 작업은 내가 작업 플랜을 세우고 시키는 것보다 내가 직접 개발하는 게 훨씬 빠르고 나은 것도 있었다.\n\n문제를 해결할 때 생각보다 시간이 걸릴 때도 있었다.\n\n그래서 생각한 게 멀티 작업이다. Claude Code를 멀티 터미널로 열고, 작업 플랜을 각각 업로드하고 작업하게 하고 단계별로 성공할 때마다 커밋을 남기게 학습시키고 난 내가 할 수 있는 작업을 하는 것이다.\n\n그리고 난 일정 시간마다 작업 결과물을 확인하고, 다시 지시를 수정하고 난 내 업무를 또 하는 멀티태스킹으로 한다면 생산성이 매우 올라갈 것이라고 판단했다.(이미 앤트로픽 영상에 있더라...)\n\n그래서 AI 개발 워크플로우를 찾아보고 나름대로 만들어 보기로 했다.\n\n## Claude Code를 이용한 전체 워크플로우\n\n1. Jira를 연동해서 이슈 생성 후 상태값이 '진행중'으로 변경되면 Jira 내용을 읽어서 작업 계획을 세우고, 작업을 완료하면 자동으로 draft PR을 생성한다.\n2. 생성된 PR을 리뷰하면서 빠진 부분이나 문제가 없는지 확인하고, draft를 해제한 PR을 업데이트한다.\n3. QA를 요청한다.\n\n이를 구현하려면 워크플로우를 연결할 수 있는 추가적인 요소가 필요했다. 서버나 인프라 등 다른 구성 요소들이 필요해서 이 워크플로우는 추후 개발하기로 했다. n8n과의 조합으로 가능해 보이지만, 이것만 집중할 수 없어서 다음 계획으로 전환했다.\n\n## 로컬에서 Claude Code로 개발 워크플로우\n\n1. Git Subcommand를 이용해서 Jira 링크를 주면 git worktree를 생성하고 프로젝트를 초기 설정한 후 VS Code를 실행한다. 이때 CLAUDE.md가 자동으로 로드되어 기본적인 내용이 설정된다.\n2. 작업에 따라서 다음과 같이 사전 작업을 진행한다.\n   1. 신규\n      - 빈 컴포넌트와 빈 페이지 또는 껍데기 컴포넌트를 만든다. (TDD의 경우는 테스트 케이스를 작성한다.)\n      - 컴포넌트의 상단에 앵커 주석 시스템을 이용해서 AI가 처리할 작업을 작성한다.\n   2. 이슈\n      - 이슈의 내용을 정리해서 관련된 파일 리스트와 해결해야 하는 문제를 정의한 후 복사해서 제공한다.\n3. git worktree를 이용해서 또다른 작업트리를 생성(1번 ~ 3번 반복)한다.\n4. CLAUDE.md에 mcp puppeteer(end-to-end)를 이용해서 브라우저 테스크까지 진행 콘솔창을 보고 자동수정하게 룰이 추가되어 있어야 한다. 에러가 안나면 작업이 대기 상태로 되게 한다.\n5. worktree별로 열린 에디터를 돌아다니면서 해당 이슈나 신규 기능이 제대로 작성되었는지 검토한다. 정상 동작할 때마다 Slash Command를 이용해서 현재 바뀐 코드 내용을 바탕으로 지금까지 작업한 내용을 커밋 메세지로 저장하게 한다.\n6. 검토가 완료되면 다음과정중 하나로 진행하게 된다.\n   1. 별도의 티켓으로 생성한경우 Git Subcommand를 이용해서 QA 브랜치에 머지 및 푸시하고 PR을 생성한다.\n   2. 하나의 티켓에서 별도의 작업으로 분리(하나의 티켓 작업인데 작업을 쪼개서 워크트리로 진행한경우이다. 예를 들면 함수나 기능별로 워크트리를 만들어서 작업 시키고 하나의 브랜치로 통합하는 경우)한경우 부모가 되는 브랜치에 머지 한다.\n7. 위 과정이 끝나면 git worktree를 삭제하고 워크트리에서 해제한다.\n\nClaude Code로 워크플로우를 만들 때 주요 구성 요소는 다음과 같다.\n\n1. [CLAUDE.md 작성](/posts/claude/2025-06-10-claude-md-guide)\n2. [Git Subcommand 설치](/posts/claude/2025-06-10-development-workflow-with-cloud-code-3)\n3. [Slash Command 설치](/posts/claude/2025-06-15-development-workflow-with-cloud-code-4)\n4. [사용후기](/posts/claude/2025-07-11-claude-code-review)\n\n## 참고 링크\n\n- [Claude Code: Best practices for agentic coding](https://www.anthropic.com/engineering/claude-code-best-practices)\n",
      "content_text": "Claude Code를 활용한 효율적인 개발 워크플로우 구축 방법",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-development-workflow-with-cloud-code-1/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "Claude Code",
        "클로드 코드",
        "Jira",
        "git worktree",
        "CLAUDE.md",
        "개발 워크플로우",
        "바이브 코딩",
        "Vibe Coding"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/claude/2025-06-10-claude-md-guide/",
      "title": "Claude Code로 개발 워크플로우 - CLAUDE.md 작성법",
      "content_html": "\n# 1. CLAUDE.md 작성\n\n프로젝트 최상단의 CLAUDE.md는 md 폴더 내 상세 가이드를 안내하고, 전체적인 워크플로우 및 전체 규칙을 정리하는 파일이다.\n\n```\n# Bash commands\n- npm run build: Build the project\n- npm run typecheck: Run the typechecker\n\n# Architecture Decisions\n- Server Components by default, Client Components only when necessary\n- tRPC for type-safe API calls\n- Prisma for database access with explicit select statements\n- Tailwind for styling (no custom CSS files)\n\n# Code style\n- Use ES modules (import/export) syntax, not CommonJS (require)\n- Destructure imports when possible (eg. import { foo } from 'bar')\n\n# Patterns to Follow\n- Data fetching happens in Server Components\n- Client Components receive data as props\n- Use Zod schemas for all external data\n- Error boundaries around every data display component\n\n# Workflow\n- Be sure to typecheck when you’re done making a series of code changes\n- Prefer running single tests, and not the whole test suite, for performance\n\n# What NOT to Do\n- Don't use useEffect for data fetching\n- Don't create global state without explicit approval\n- Don't bypass TypeScript with 'any' types\n```\n\n기본 형식이 위와 같이 되어 있는데 나는 다른 블로그에서 제공한 [AGENTS.md](https://github.com/julep-ai/julep/blob/dev/AGENTS.md)의 내용을 참고하여 프로젝트 root의 [CLAUDE.md](/file/CLAUDE-Guide.md)를 작성해 클로드 코드에 요청했다.\n\n그리고 이를 프로젝트에 적용한 후,\n\n1. 프로젝트별 정보 커스터마이징: 대괄호로 표시된 부분을 실제 프로젝트 정보로 수정\n2. 도메인 용어 추가: 프로젝트 특화 용어들을 도메인 사전에 추가\n3. 기술 스택 업데이트: 실제 사용하는 기술 스택으로 수정\n4. 팀 컨벤션 반영: 팀의 코딩 스타일과 워크플로우에 맞게 조정\n\n을 해달라고 해서 기본 CLAUDE.md 내용을 생성한 뒤 다음과 같이 파일을 분리했다.\n\n1. CLAUDE.md 작성(root)\n2. 하위 문서 작성(root/md)\n   1. 코딩가이드.md\n   2. 기술 스택 및 아키텍처.md\n   3. 프로젝트 구조.md\n   4. 빌드 및 실행 명령어.md\n   5. 앵커 주석 시스템.md\n   6. 개발 워크플로우.md\n   7. AI 개발 가드레일.md\n      - 필수 : **황금률**: 구현 세부 사항이나 요구 사항에 대해 확신이 서지 않을 때는 항상 가정을 하지 말고 개발자와 상의하세요.\n      - AI의 접근 범위를 반드시 명시해서 어디까지 가능하고 어디를 하면 안되는지 명시\n\n이런 식으로 분리해서 클로드 코드가 처음 로딩할 때 기본적으로 학습할 것을 정리해 놓는다. 그리고 반드시 해당 파일들은 임의로 수정하지 못하게 접근 가이드라인을 설정해야 한다.\n\n이렇게 파일을 나누어 저장하는 이유는 토큰 때문이다. CLAUDE.md 파일 내용이 커질수록 claude code가 로드될 때마다 학습에 들어가는 토큰 비용이 증가한다. 그래서 되도록 CLAUDE.md 파일에는 필수적인 내용만 들어가고\n\n그 외 내용은 별도 파일로 제공한 뒤 작업 플랜 파일이나, 컴포넌트 파일에서 어디를 미리 참고를 해서 작업을 해야 하는지를 명시해서 작업을 시켜야 한다.\n\n앵커 코멘트 사용 예\n\n```ts\n/** \nAIDEV-NOTE: 다음 경로의 파일 리스트의 내용을 먼저 읽고 작업을 시작 \n - /md/ai-development-guardrails.md\n - /md/design-system-guide.md\n - /md/coding-guide.md\n - 참고할 컴포넌트 파일 경로\n - 참고할 외부링크\n*/\n\n/** \nAIDEV-TODO : 이 컴포넌트의 기능을 정의한다. 그리고 작업 순서 및 확인 방법을 정의한다. 실질적인 작업플랜이 적히는곳\n*/\nconst CompomentName = () => {};\n```\n\n작업 플랜 예\n\n```md\n# 작업전 학습 리스트\n\n- /md/ai-development-guardrails.md\n- /md/design-system-guide.md\n- /md/coding-guide.md\n- 참고할 컴포넌트 파일 경로\n- 참고할 외부링크\n\n# 작업 목표\n\n# 검증 방법\n```\n\n이런 식으로 미리 컴포넌트 껍데기를 만들거나 작업 플랜에 작성해서 클로드에 제공을 하고 작업을 시키는 게 토큰 소모 면에서 유리하다는 게 실험한 결론이었다.\n\n# CLAUDE.md 템플릿\n\n````md\n# CLAUDE.md - AI Assistant Documentation\n\n이 문서는 프로젝트에서 작업하는 AI 어시스턴트(Claude 등)를 위한 주요 참조 문서입니다. 프로젝트 구조, 코딩 규칙, 개발 가이드라인에 대한 필수 정보를 담고 있습니다.\n\n## Project Overview\n\n해당 프로젝트는 여러 애플리케이션을 포함하는 모노레포입니다:\n\n- **Web App** (`apps/web/`) - 메인 웹 애플리케이션\n- **Admin Panel** (`apps/admin/`) - 관리자 인터페이스\n- **Storybook** (`apps/storybook/`) - 컴포넌트 문서화\n\n## Quick Start\n\n**⚠️ 중요**: 코드 수정 작업을 시작하기 전에 반드시 [AI Development Guardrails](./md/ai-development-guardrails.md) 문서를 읽고 최신 자동화 규칙을 확인하세요.\n\n특정 주제에 대한 자세한 정보는 `/md` 디렉토리의 문서를 참조하세요:\n\n1. [AI Development Guardrails](./md/ai-development-guardrails.md) - **우선 필독** AI 지원 개발을 위한 가이드라인\n2. [Coding Guide](./md/coding-guide.md) - 코드 스타일과 규칙\n3. [Design System Guide](./md/design-system-guide.md) - 디자인 시스템 사용법\n4. [Project Structure](./md/project-structure.md) - 디렉토리 구조와 파일 조직\n5. [Build and Run Commands](./md/build-and-run-commands.md) - 개발 및 배포 명령어\n6. [Development Workflow](./md/development-workflow.md) - Git 워크플로우와 개발 프로세스\n\n## Core Principles\n\n### 1. Code Quality\n\n- 기존 패턴과 규칙을 따르세요\n- 현재 코드베이스와 일관성을 유지하세요\n- 깨끗하고, 읽기 쉽고, 유지보수 가능한 코드를 작성하세요\n\n### 2. Testing\n\n- 새로운 테스트를 작성하기 전에 기존 테스트 패턴을 확인하세요\n- 변경사항을 커밋하기 전에 테스트를 실행하세요\n- 각 앱에 적절한 테스트 명령어를 사용하세요\n\n## Important Commands\n\n```bash\n# Development\npnpm dev:web        # 웹 앱 실행\npnpm dev:admin      # 관리자 패널 실행\npnpm storybook      # Storybook 실행\n\n# Testing\npnpm test           # 모든 테스트 실행\npnpm lint           # 린팅 실행\n\n# Building\npnpm build          # 모든 앱 빌드\n```\n\n## Getting Help\n\n이 프로젝트에서 작업할 때:\n\n1. `/md`의 상세 문서를 참조하세요.\n2. 요구사항이 불명확할 때는 명확히 물어보세요.\n3. 중요한 변경사항은 문서화하세요.\n4. 커밋 메시지 규칙을 따르세요.\n5. [AI Development Guardrails](./md/ai-development-guardrails.md)를 항상 따르세요\n````\n\n내용 대부분도 claude code가 생성한 것이다. 그 이후 프로젝트에 맞게 수정을 했다.\n\n# AI 지원 개발을 위한 가이드라인 (/md/ai-development-guardrails.md 파일내용)\n\nAI에게 어디까지 가능하고 어디를 하면 안 되는지를 가이드하는 문서이다. 항상 학습을 해야 하는 문서라고 생각한다. 내용을 필요한것만 남기고 사용하는것을 추천한다.\n\n핵심은 The Golden Rule 부분이다. 임의로 진행하거나 바꾸어서는 안되는 룰 설정을 하는 부분이다.\n\n````md\n# AI Development Guardrails\n\n이 문서는 프로젝트에서 AI 지원 개발을 위한 가이드라인, 경계, 모범 사례를 설정합니다.\n\n## 목차\n\n1. [The Golden Rule](#the-golden-rule)\n2. [AI Assistant 자동화 규칙](#ai-assistant-자동화-규칙)\n3. [AI Access Scope](#ai-access-scope)\n4. [Permitted Activities](#permitted-activities)\n5. [Restricted Activities](#restricted-activities)\n6. [Code Quality Standards](#code-quality-standards)\n7. [Safety Guidelines](#safety-guidelines)\n8. [Collaboration Principles](#collaboration-principles)\n9. [Decision Making Framework](#decision-making-framework)\n10. [Documentation Requirements](#documentation-requirements)\n11. [Escalation Procedures](#escalation-procedures)\n\n## The Golden Rule\n\n> **🏆 황금 규칙**: 구현 세부사항이나 요구사항이 불확실할 때는 추측하지 말고 항상 개발자에게 문의하세요. 잘못 구현하는 것보다 먼저 명확히 하는 것이 낫습니다.\n\n### 1. Non-negotiable golden rules\n\n| #:  | AI _may_ do                                                          | AI _must NOT_ do                                                                          |\n| --- | -------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |\n| G-0 | 프로젝트와 관련된 불확실한 사항에 대해 변경 전 개발자에게 확인 요청  | ❌ 프로젝트별 특정 사항이나 기능/결정에 대한 맥락이 없을 때 도구 사용하거나 변경사항 작성 |\n| G-1 | 관련 소스 디렉토리(`src/`, `content/`, `public/`) 내에서만 코드 생성 | ❌ 테스트 파일, 설정 파일(`*.config.*`, `package.json`) 건드리기                          |\n| G-2 | 중요한 편집 코드 근처에 **`AIDEV-NOTE:` 앵커 코멘트** 추가/업데이트  | ❌ 기존 `AIDEV-` 코멘트 삭제하거나 손상시키기                                             |\n| G-3 | 린트/스타일 설정(`eslint.config.mjs`, `next.config.ts`) 준수         | ❌ 다른 스타일로 코드 재포맷                                                              |\n| G-4 | 300줄 이상 또는 3개 파일 이상 변경 시 **확인 요청**                  | ❌ 대규모 모듈 리팩토링을 사람 지도 없이 진행                                             |\n| G-5 | 현재 작업 컨텍스트 내에서만 작업. 새 작업 시작 시 개발자에게 알림    | ❌ 이전 프롬프트의 작업을 \"새 작업\" 후에도 계속 진행                                      |\n| G-6 | CLAUDE.md 파일 수정이 필요할 때 사용자에게 수정 내용 제안            | ❌ **CLAUDE.md 파일을 사용자의 명시적 지시 없이 직접 수정**                               |\n| G-7 | 환경 변수나 설정 파일 관련 가이드 제공 및 확인 요청                  | ❌ **.env, 환경 설정 파일(`*.config.*`, `docker-compose.yml` 등)을 임의로 수정**          |\n\n### 이것이 중요한 이유\n\n- 추측에 기반한 **잘못된 구현을 방지**\n- 재작업과 디버깅을 피하여 **시간 절약**\n- **코드 품질**과 프로젝트 일관성 유지\n- AI와 인간 개발자 간의 **신뢰 구축**\n- 요구사항이 **올바르게 이해되도록 보장**\n\n### 언제 문의해야 하는가\n\n- **불명확한 요구사항**이나 명세\n- **모호한 사용자 스토리**나 티켓\n- **여러 구현 방식**이 가능한 경우\n- **Breaking changes**나 주요 리팩토링\n- **보안에 민감한** 코드 수정\n- **성능이 중요한** 구현\n- **외부 연동**이나 API 변경\n\n## AI Assistant 자동화 규칙\n\n이 섹션은 AI Assistant가 자동으로 수행해야 하는 규칙과 프로세스를 정의합니다.\n\n### 세션 시작 시 안내\n\n새로운 세션에서 코드 수정 관련 작업이 감지되면:\n\n- \"코드 수정 작업을 하시나요? AI Development Guardrails를 먼저 확인하시겠습니까?\"\n- React 컴포넌트, 에러 수정, 버그 해결 등의 키워드 감지 시 자동 안내\n\n### 컨텍스트 기반 자동 로드\n\n다음 키워드 감지 시 AI Development Guardrails 자동 참조:\n\n- `컴포넌트`, `component`, `수정`, `fix`, `에러`, `error`\n- `React`, `Next.js`, `서버`, `클라이언트`\n- `Puppeteer`, `테스트`, `검증`, `브라우저`\n\n### 핵심 규칙 요약 (Quick Reference)\n\n**⚡ 자동 검증 트리거 조건:**\n\n- React 컴포넌트 파일(`.tsx`, `.jsx`) 수정 시 무조건 자동 실행\n- `src/components/`, `src/app/` 내 파일 수정 시 무조건 자동 실행\n- 에러 메시지에 컴포넌트 이름이 포함된 경우 무조건 자동 실행\n\n**🔧 포트 번호 자동 탐지 순서:**\n\n1. 기본 포트 3000 실행 상태 확인 (최우선) - `lsof -i :3000`\n2. 서버 실행 중이면 → 3000 포트 사용, 서버 유지\n3. 서버 미실행이면 → 포트 탐지 후 서버 시작:\n   - `apps/web/.env.local` 파일의 `PORT` 환경변수 확인\n   - `apps/web/.env.qa1` 파일의 `PORT` 환경변수 확인\n   - `apps/web/package.json`의 dev 스크립트에서 포트 추출\n   - 포트 탐지 후 서버 시작 (사용자에게 실행 명령어 확인)\n\n**🚨 강제 자동화 체크리스트 (React 컴포넌트 수정 시 필수!):**\n\n```\n✅ 1. 트리거 조건 충족 확인 (무조건 확인)\n✅ 2. 포트 번호 자동 탐지 실행 (3000 우선 → 탐지)\n✅ 3. 컴포넌트 사용 경로 탐지 실행 (Grep으로 import 검색)\n✅ 4. MCP Puppeteer 브라우저 테스트 실행 (필수! 절대 생략 금지)\n✅ 5. 특정 에러 해결 확인 (수정 대상만, 기타 무시)\n```\n\n**React 컴포넌트 수정 시 자동 실행:**\n\n- **서버 컴포넌트**: 포트 기반 프로세스 종료 → 실행 명령어 확인 → 서버 재시작 → 전체 경로 검증 → MCP Puppeteer 브라우저 테스트\n- **클라이언트 컴포넌트**: 포트 자동 탐지 → 기존 서버 유지 → 전체 경로 검증 → MCP Puppeteer 브라우저 테스트 (필수!)\n- **공통**: 컴포넌트 사용 경로 자동 탐지, 특정 에러만 확인, 기타 경고 무시\n\n**권한 면제 자동 실행:**\n\n- 개발 환경 테스트는 권한 확인 없이 즉시 실행 (MCP Puppeteer 포함)\n- 예외: 서버 재시작 시 실행 명령어만 사용자 확인 필요\n- **중요**: 위 체크리스트는 사용자 권한 확인 없이 자동 실행해야 함\n\n### 🚨 필수 실행 알림 (AI Assistant 전용)\n\n**React 컴포넌트 수정 시 자동 검증 누락 방지:**\n\n```\n⚠️  WARNING: React 컴포넌트(.tsx/.jsx) 파일 수정 감지!\n⚠️  WARNING: 자동 검증 프로세스 실행이 필수입니다!\n⚠️  WARNING: 아래 체크리스트를 반드시 실행하세요:\n\n□ 1. 트리거 조건 충족 확인\n□ 2. 포트 번호 자동 탐지 실행\n□ 3. 컴포넌트 사용 경로 탐지 실행\n□ 4. MCP Puppeteer 브라우저 테스트 실행 (필수!)\n□ 5. 특정 에러 해결 확인\n\n✋ 이 체크리스트를 완료하지 않으면 작업이 미완료입니다!\n✋ 사용자 권한 확인 없이 즉시 실행하세요!\n```\n\n**원인별 자동 실행 실패 방지책:**\n\n- **인지적 우선순위 문제** → 강제 체크리스트로 해결\n- **문서 vs 실행 Gap** → 시각적 알림으로 강제 인식\n- **트리거 조건 인식 부족** → 명확한 조건 나열\n- **권한 면제 미적용** → \"즉시 실행\" 강조\n- **절차적 습관 부족** → 반복 학습을 위한 체크리스트\n\n기억하세요: **의심스러울 때는 추측하지 말고 물어보세요.**\n\n## 5. Anchor comments\n\n코드베이스 전반에 특별히 포맷된 코멘트 추가:\n\n### Guidelines:\n\n- AI와 개발자를 위해 `AIDEV-NOTE:`, `AIDEV-TODO:`, `AIDEV-QUESTION:`, `AIDEV-RISK:` 사용\n- 간결하게 유지 (≤ 120자)\n- **중요:** 파일 스캔 전에 관련 하위 디렉토리에서 **기존 앵커 `AIDEV-*` 찾기**\n- 연관 코드 수정 시 **관련 앵커 업데이트**\n- 명시적 지시 없이 `AIDEV-NOTE` 제거 금지\n\n### 작업 시 필수 절차:\n\n1. **작업 전 앵커 코멘트 스캔**: 파일 또는 디렉토리 작업 시작 전에 모든 `AIDEV-*` 코멘트를 찾아 읽기\n2. **실행 계획 수립**: 발견된 앵커 코멘트의 지시사항, 주의사항, 질문을 바탕으로 작업 계획 세우기\n3. **앵커 우선 준수**: 컴포넌트, 함수, 또는 특정 코드 라인의 앵커 코멘트 내용을 최우선으로 고려\n4. **계획 검증**: 앵커 코멘트에 명시된 제약사항이나 요구사항과 충돌하지 않는지 확인\n5. **작업 완료 후 로깅**: 작업 완료 시 `AIDEV-COMPLETE:` 코멘트로 완료 내역 추가\n\n### 완료 로깅 규칙:\n\n- **완료 코멘트 추가**: 작업 완료 시 `AIDEV-COMPLETE: [날짜] 작업내용` 형식으로 기록\n- **기존 로그 보존**: 이전 `AIDEV-COMPLETE` 코멘트는 삭제하지 않고 유지하여 작업 히스토리 보존\n- **수정 시 추가 로깅**: 기존 코드 수정 시 새로운 `AIDEV-COMPLETE` 코멘트 추가 (기존 것 덮어쓰지 않음)\n- **컨텍스트 제공**: 추후 작업 시 완료 로그를 참조하여 이전 작업 맥락과 의도 파악\n\n```typescript\n// AIDEV-NOTE: 포스트 네비게이션 로직 - prev/next 필드 기반으로 동작\n// AIDEV-TODO: 다음글 링크도 추가 필요\nconst PostNavigation = ({ post }: { post: PostData }) => {\n  return (\n    <nav>\n      {post.prev ? (\n        <Link href={`/posts/${post.prev}`}>이전글</Link>\n      ) : (\n        <Link href=\"/\">홈으로</Link>\n      )}\n    </nav>\n  );\n};\n// AIDEV-COMPLETE: 2024-01-15 기본 포스트 네비게이션 컴포넌트 생성\n// AIDEV-COMPLETE: 2024-01-20 홈으로 돌아가기 링크 추가 (이전글 없을 시)\n```\n\n### 앵커 코멘트 타입별 용도:\n\n- **`AIDEV-NOTE:`** - 코드 설명, 작동 방식, 중요한 맥락 정보\n- **`AIDEV-TODO:`** - 향후 구현해야 할 작업이나 개선사항\n- **`AIDEV-QUESTION:`** - 개발자에게 확인이 필요한 의문점이나 결정사항\n- **`AIDEV-RISK:`** - 예상되는 문제점, 주의사항, 금지된 행동\n- **`AIDEV-COMPLETE:`** - 완료된 작업 내역과 날짜\n\n### 앵커 코멘트 예시:\n\n```typescript\n// AIDEV-NOTE: 이 함수는 사용자 인증 상태에 따라 다른 UI를 렌더링\n// AIDEV-QUESTION: 로그아웃 상태에서도 프로필 정보를 캐시해야 하나?\n// AIDEV-RISK: 이 컴포넌트를 서버 컴포넌트로 변경하면 안됨 (클라이언트 상태 의존)\nconst UserProfile = () => {\n  // 구현 코드...\n};\n// AIDEV-COMPLETE: 2024-01-10 기본 사용자 프로필 컴포넌트 구현\n// AIDEV-COMPLETE: 2024-01-12 로그인 상태 체크 로직 추가\n```\n\n### AIDEV-RISK 사용 예시:\n\n```typescript\n// AIDEV-RISK: 이 API는 rate limit이 있음 - 1초에 1회만 호출 가능\n// AIDEV-RISK: useState를 useRef로 바꾸면 안됨 (리렌더링 필요)\n// AIDEV-RISK: 이 함수는 메모리 누수 가능성 있음 - cleanup 함수 반드시 호출\nconst fetchUserData = async () => {\n  // API 호출 코드...\n};\n```\n\n---\n\n## 6. Commit discipline\n\n- **Granular commits**: 논리적 변경사항당 하나의 커밋\n- **AI 생성 커밋 태깅**: 예: `feat: 포스트 네비게이션 추가 [AI]`\n- **명확한 커밋 메시지**: *why*를 설명; 아키텍처 관련이면 이슈/ADR 링크\n- **병렬/장기 AI 브랜치에 `git worktree` 사용**\n- **AI 생성 코드 리뷰**: 이해하지 못하는 코드는 절대 머지 금지\n\n---\n\n## AI Access Scope (AI 접근 범위)\n\n### ✅ AI가 할 수 있는 일\n\n#### 코드 구현\n\n- 명확한 명세를 바탕으로 **새로운 기능 작성**\n- 명확히 정의된 증상과 원인이 있는 **버그 수정**\n- 기존 패턴을 따라 **코드 리팩토링**\n- 기존 기능에 대한 **테스트 추가**\n- 구현된 기능에 대한 **문서 업데이트**\n- 기존 디자인에 맞는 **UI 컴포넌트 구현**\n- 프로젝트 패턴을 따라 **유틸리티 함수 생성**\n\n#### 코드 분석\n\n- 품질과 일관성을 위한 **코드 리뷰**\n- **버그와 잠재적 문제 식별**\n- **최적화 및 개선사항 제안**\n- **성능 병목 현상 분석**\n- **접근성 준수 확인**\n- **TypeScript 사용법과 타입 검증**\n\n#### 개발 지원\n\n- 템플릿을 따라 **보일러플레이트 코드 생성**\n- 기존 패턴을 기반으로 **설정 파일 생성**\n- 규칙을 따라 **커밋 메시지 작성**\n- 프로젝트 규칙에 따라 **코드 포맷팅 및 린팅**\n- **패키지 의존성 업데이트** (non-breaking)\n\n#### 개발 환경 관리 및 디버깅\n\n**✅ 허용된 활동:**\n\n- **로컬 개발 서버 실행**: 개발 모드에서만 서버 시작 (`pnpm dev`, `npm run dev`)\n- **로컬 빌드 테스트**: 개발 환경에서 빌드 검증 (`pnpm build`, `npm run build`)\n- **서버 콘솔 로그 모니터링**: 빌드 에러, 런타임 에러, 경고 메시지 확인\n- **MCP Puppeteer 활용**: 브라우저 자동화를 통한 실제 화면 테스트\n- **브라우저 콘솔 에러 감지**: JavaScript 에러, 네트워크 에러, 성능 이슈 확인\n- **실시간 에러 수정**: 발견된 에러를 즉시 분석하고 코드 수정으로 해결\n- **자동화된 에러 검증**: 코드 수정 후 Puppeteer를 통한 자동 테스트 및 검증\n\n**❌ 제한사항:**\n\n- **프로덕션 명령어 실행 금지**: `prod`, `build:prod`, `start:prod`, `build-standalone:prod` 등 프로덕션 관련 스크립트 실행 금지\n- **서버 시작 전 확인 필수**: 서버 실행 시 어느 환경(dev/staging/qa)으로 시작할지 사용자에게 확인 후 진행\n- **로컬 환경에서만 실행**: 원격 서버나 배포 환경에서 코드 실행 금지\n- **프로덕션 데이터 접근 금지**: 실제 사용자 데이터나 프로덕션 데이터베이스 접근 금지\n\n#### 서버 시작 절차\n\n1. **환경 확인**: 서버 시작 전 사용자에게 \"어느 환경으로 서버를 시작하시겠습니까?\" 질문\n2. **허용된 환경**: `dev`, `staging`, `qa` 등 개발/테스트 환경만 허용\n3. **금지된 환경**: `prod`, `production` 등 프로덕션 환경 금지\n4. **명령어 예시**:\n   - ✅ `pnpm dev` (개발 서버)\n   - ✅ `pnpm build` (로컬 빌드)\n   - ✅ `pnpm start:staging` (스테이징 서버)\n   - ❌ `pnpm start:prod` (프로덕션 서버 - 금지)\n\n#### 자동화된 코드 수정 검증 프로세스\n\nReact 컴포넌트나 클라이언트 사이드 코드를 수정한 후에는 위에서 정의한 **AI Assistant 자동화 규칙**의 검증 프로세스를 **반드시 자동으로 수행**해야 합니다.\n\n상세한 검증 프로세스는 상단의 \"AI Assistant 자동화 규칙\" 섹션을 참조하세요.\n\n### ❌ AI가 할 수 없는 일\n\n#### 중요한 결정사항\n\n- 승인 없이 **핵심 아키텍처 변경**\n- **데이터베이스 스키마**나 데이터 구조 수정\n- 다른 시스템에 영향을 주는 **API 계약 변경**\n- **보안 설정**이나 인증 업데이트\n- **빌드나 배포** 설정 변경\n- **환경 변수**나 시크릿 수정\n- Public API에 **breaking changes** 적용\n\n#### 민감한 작업\n\n- **프로덕션 데이터**나 시스템 접근\n- **사용자 권한**이나 역할 수정\n- **결제 처리** 로직 변경\n- **법적 준수** 코드 업데이트\n- **감사 로깅**이나 모니터링 수정\n- **데이터 프라이버시** 구현 변경\n\n#### 비즈니스 로직\n\n- **비즈니스 요구사항**이나 사용자 스토리 정의\n- **제품 결정**이나 기능 우선순위 설정\n- **가격**이나 비즈니스 모델 변경 결정\n- **준수 요구사항**이나 법적 제약 설정\n- 가이드 없이 **사용자 경험** 플로우 정의\n\n## Permitted Activities (허용된 활동)\n\n### 코드 개발\n\n#### ✅ 안전한 코드 변경\n\n```typescript\n// ✅ Adding new utility functions\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat(\"ko-KR\", {\n    style: \"currency\",\n    currency: \"KRW\",\n  }).format(amount);\n};\n\n// ✅ Creating new UI components following patterns\nconst UserCard = ({ user }: { user: User }) => {\n  return (\n    <Card className=\"p-4\">\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n    </Card>\n  );\n};\n\n// ✅ Adding tests for existing functionality\ndescribe(\"formatCurrency\", () => {\n  it(\"formats Korean currency correctly\", () => {\n    expect(formatCurrency(1000)).toBe(\"₩1,000\");\n  });\n});\n```\n\n#### ✅ 안전한 리팩토링\n\n```typescript\n// ✅ Extracting common logic into hooks\nconst useUserData = (userId: string) => {\n  return useQuery({\n    queryKey: [\"user\", userId],\n    queryFn: () => fetchUserData(userId),\n  });\n};\n\n// ✅ Simplifying component logic\nconst UserProfile = ({ userId }: { userId: string }) => {\n  const { data: user, isLoading } = useUserData(userId);\n\n  if (isLoading) return <LoadingSpinner />;\n  if (!user) return <UserNotFound />;\n\n  return <UserDetails user={user} />;\n};\n```\n\n### 문서화\n\n#### ✅ 문서 업데이트\n\n- 복잡한 로직에 대한 **코드 주석**\n- 새로운 기능에 대한 **README 업데이트**\n- 새로운 엔드포인트에 대한 **API 문서**\n- Storybook의 **컴포넌트 문서**\n- **타입 정의**와 인터페이스\n- **사용 예시**와 코드 샘플\n\n### 테스팅\n\n#### ✅ 테스트 구현\n\n- 새로운 함수에 대한 **단위 테스트**\n- UI 컴포넌트에 대한 **컴포넌트 테스트**\n- API 상호작용에 대한 **통합 테스트**\n- 사용자 워크플로우에 대한 **E2E 테스트**\n- 최적화를 위한 **성능 테스트**\n- UI 준수를 위한 **접근성 테스트**\n\n## Restricted Activities (제한된 활동)\n\n### ❌ 승인없는 아키텍처 변경\n\n```typescript\n// ❌ DON'T: Change core data structures without approval\ninterface User {\n  id: string;\n  // DON'T add breaking changes to core types\n  metadata?: any; // This could break existing code\n}\n\n// ❌ DON'T: Modify authentication systems\nconst authenticateUser = (token: string) => {\n  // DON'T change auth logic without security review\n};\n\n// ❌ DON'T: Change API response formats\ninterface ApiResponse<T> {\n  // DON'T modify this without backend coordination\n  data: T;\n  status: number;\n}\n```\n\n### ❌ 보안에 민감한 코드\n\n```typescript\n// ❌ DON'T: Modify security configurations\nconst JWT_SECRET = process.env.JWT_SECRET; // DON'T change\nconst CORS_ORIGINS = [\"https://app.example.com\"]; // DON'T modify\n\n// ❌ DON'T: Change permission checks\nconst checkUserPermission = (user: User, action: string) => {\n  // DON'T modify without security review\n};\n\n// ❌ DON'T: Update payment processing\nconst processPayment = (amount: number, method: PaymentMethod) => {\n  // DON'T change without business approval\n};\n```\n\n### ❌ 프로덕션 설정\n\n```typescript\n// ❌ DON'T: Modify production environment variables\n// .env.production\nDATABASE_URL=... // DON'T change\nSTRIPE_SECRET_KEY=... // DON'T modify\nSENTRY_DSN=... // DON'T update\n\n// ❌ DON'T: Change build configurations without approval\n// next.config.mjs, docker files, CI/CD configs\n```\n\n## Code Quality Standards (코드 품질 기준)\n\n### 필수 기준\n\n#### TypeScript 사용\n\n- **엄격한 타이핑** - 정당한 이유 없이 `any` 타입 사용 금지\n- **인터페이스 정의** - 모든 데이터 구조 타입 지정\n- **제네릭 타입** - 재사용 가능한 타입 정의\n- **타입 import** - 타입과 값 import 분리\n\n#### 코드 구성\n\n- **기존 패턴 준수** - 현재 코드 스타일과 일치\n- **일관된 네이밍** - 기존 규칙 사용\n- **적절한 파일 구조** - 파일을 적절한 디렉토리에 배치\n- **명확한 분리** - 관심사를 적절히 분리\n\n#### 성능 고려사항\n\n- **import 최적화** - Tree-shaking 친화적인 import 사용\n- **메모이제이션** - React.memo, useMemo 적절히 사용\n- **번들 크기** - 정당한 이유 없이 큰 의존성 피하기\n- **지연 로딩** - 유익한 곳에서 코드 분할 구현\n\n## Safety Guidelines (안전 가이드라인)\n\n### 변경 전 확인사항\n\n#### 1. 컨텍스트 이해\n\n- 패턴을 이해하기 위해 **기존 코드 읽기**\n- 의존성을 위해 **관련 파일 확인**\n- 예상 동작을 이해하기 위해 **테스트 파일 검토**\n- 데이터 구조를 위해 **타입 정의 검토**\n\n#### 2. 접근 방식 검증\n\n- 요구사항이 불명확하면 **명확히 하기**\n- 개발자와 **breaking changes 확인**\n- 민감한 코드의 **보안 영향 검증**\n- 큰 변경의 **성능 영향 확인**\n\n#### 3. 철저한 테스트\n\n- 회귀 방지를 위해 **기존 테스트 실행**\n- 새로운 기능에 대한 **새 테스트 추가**\n- **엣지 케이스**와 에러 시나리오 테스트\n- UI 변경에 대한 **접근성 검증**\n\n### 에러 방지\n\n#### 피해야 할 일반적인 함정\n\n```typescript\n// ❌ DON'T: Make assumptions about data structure\nconst user = data.user.profile.settings; // Could be undefined\n\n// ✅ DO: Use safe navigation and validation\nconst settings = data?.user?.profile?.settings;\nif (!settings) {\n  console.warn(\"User settings not found\");\n  return defaultSettings;\n}\n\n// ❌ DON'T: Ignore TypeScript errors\nconst result = fetchData() as any; // Defeats type safety\n\n// ✅ DO: Proper type handling\nconst result = await fetchData();\nif (isValidResponse(result)) {\n  // Handle typed result safely\n}\n```\n\n## Collaboration Principles (협업 원칙)\n\n### 소통 가이드라인\n\n#### 개발자와의 소통\n\n- 일반적인 질문보다 **구체적인 질문** 하기\n- 제안에 대한 **컨텍스트 제공**\n- 구현 뒤의 **논리적 근거 설명**\n- **피드백을 수용**하고 변경사항 반영\n- 구현 전에 **요구사항 명확히** 하기\n\n#### 코드 리뷰\n\n- 주석으로 **복잡한 로직 설명**\n- 구현 중 만든 **가정사항 문서화**\n- **잠재적 문제**나 엣지 케이스 강조\n- 적절할 때 **대안 제안**\n- **피드백에 열린 마음**과 변경 수용\n\n### 지식 전달\n\n#### 문서화\n\n- 변경 시 **관련 문서 업데이트**\n- 복잡한 로직에 **인라인 주석 추가**\n- 새로운 유틸리티에 대한 **예시 생성**\n- **Breaking changes를 명확히** 문서화\n\n#### 코드 주석\n\n```typescript\n// #user-validation: Input validation for user data\nconst validateUserInput = (input: UserInput): ValidationResult => {\n  // Check required fields first to fail fast\n  if (!input.email || !input.name) {\n    return { isValid: false, errors: [\"Email and name are required\"] };\n  }\n\n  // Validate email format using RFC 5322 regex\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(input.email)) {\n    return { isValid: false, errors: [\"Invalid email format\"] };\n  }\n\n  return { isValid: true, errors: [] };\n};\n```\n\n## Decision Making Framework (의사결정 프레임워크)\n\n### 독립적으로 진행 가능한 경우\n\n#### ✅ 구현해도 안전함\n\n- 모호함이 없는 **명확한 요구사항**\n- **기존 패턴을 정확히** 따르는 경우\n- **Non-breaking changes**만 있는 경우\n- **잘 정의된 테스트 케이스**가 있는 경우\n- **보안적 영향이 없는** 경우\n\n### 가이드를 요청해야 하는 경우\n\n#### ❓ 상담이 필요함\n\n- **불명확하거나 불완전한** 요구사항\n- **여러 유효한 접근법**이 가능한 경우\n- **Breaking changes**가 필요한 경우\n- **성능 영향**이 불분명한 경우\n- **보안 고려사항**이 관련된 경우\n- **외부 API 변경**이 필요한 경우\n\n### 에스컬레이션이 필요한 경우\n\n#### ⚠️ 반드시 에스컬레이션\n\n- **비즈니스 로직 결정**이 필요한 경우\n- **아키텍처 변경**이 필요한 경우\n- **프로덕션 이슈**가 발생한 경우\n- **보안 취약점**을 발견한 경우\n- **법적 또는 규정 준수** 영향이 있는 경우\n- **리소스 할당** 결정이 필요한 경우\n\n## Documentation Requirements (문서화 요구사항)\n\n### 코드 문서화\n\n#### 필수 주석\n\n```typescript\n/**\n * #payment-processing: Core payment handling logic\n *\n * Processes user payments through various payment methods.\n * Integrates with Stripe API and handles error scenarios.\n *\n * @param amount - Payment amount in cents\n * @param method - Payment method (card, bank, etc.)\n * @param userId - User making the payment\n * @returns Promise<PaymentResult> - Payment outcome\n *\n * @example\n * const result = await processPayment(1000, 'card', 'user123')\n * if (result.success) {\n *   console.log('Payment successful:', result.transactionId)\n * }\n */\n```\n\n#### 변경사항 문서화\n\n- 규칙을 따르는 **커밋 메시지**\n- 변경사항을 설명하는 **PR 설명**\n- 복잡한 로직에 대한 **코드 주석**\n- **API 문서** 업데이트\n- Breaking changes에 대한 **마이그레이션 가이드**\n\n## 실제 작업 사례 (Real-world Examples)\n\n### React Key Prop 경고 수정 사례 (클라이언트 컴포넌트)\n\n다음은 실제로 수행된 자동화된 검증 프로세스의 사례입니다:\n\n#### 문제 상황\n\n- `item-product.client.tsx:192`에서 \"Each child in a list should have a unique key prop\" 경고 발생\n- React 개발 모드에서 콘솔에 경고 메시지 출력\n- 클라이언트 컴포넌트이므로 서버 재시작 불필요\n\n#### 자동 검증 프로세스 실행 (클라이언트 컴포넌트)\n\n1. **포트 번호 자동 탐지**:\n   - `apps/web/.env.local` 확인 → `PORT=3000` 발견 ✅\n   - MCP Puppeteer에서 `http://localhost:3000` 사용\n2. **서버 상태 확인**: `ps aux | grep next` 명령으로 개발 서버 실행 상태 확인 (재시작 안함)\n3. **컴포넌트 사용 경로 탐지**: `ItemProduct` 컴포넌트가 사용되는 모든 페이지 탐지\n4. **MCP Puppeteer 전체 경로 검증**: 홈페이지 및 관련 페이지들 순차 접속 (필수!)\n5. **특정 에러 모니터링**: key prop 경고만 감지, 기타 에러/경고 무시\n6. **코드 수정**: Fragment 대신 조건부 렌더링 사용, key prop 올바른 위치 이동\n7. **MCP Puppeteer 재검증**: 수정 후 모든 관련 페이지에서 key prop 경고 해결 확인 (필수!)\n8. **시각적 검증**: MCP Puppeteer 스크린샷으로 UI 정상 렌더링 확인\n\n#### 수정 내용\n\n```tsx\n// 수정 전 (❌ 잘못된 key prop 위치)\n{\n  product.displayTags?.map((tag) => (\n    <>\n      {tag && (\n        <ProductTagBadge\n          key={tag.tagName} // Fragment가 아닌 하위 컴포넌트에 key\n          tag={pick(tag, [\"tagBackColor\", \"tagFontColor\", \"tagName\"])}\n        />\n      )}\n    </>\n  ));\n}\n\n// 수정 후 (✅ 올바른 key prop 위치)\n{\n  product.displayTags?.map((tag, index) => (\n    <div key={tag?.tagName || index}>\n      {\" \"}\n      // map의 직접 자식에 key\n      {tag && (\n        <ProductTagBadge\n          tag={pick(tag, [\"tagBackColor\", \"tagFontColor\", \"tagName\"])}\n        />\n      )}\n    </div>\n  ));\n}\n```\n\n#### 자동 검증 결과\n\n- ✅ 브라우저 콘솔 에러 없음\n- ✅ React key prop 경고 해결됨\n- ✅ UI 정상 렌더링 확인\n- ✅ 네트워크 요청 정상 동작\n\n**이 사례는 향후 유사한 클라이언트 컴포넌트 수정 시 표준 프로세스로 활용됩니다.**\n\n### 서버 컴포넌트 수정 사례 (예시)\n\n서버 컴포넌트 수정 시 적용되는 자동화된 검증 프로세스:\n\n#### 예상 문제 상황\n\n- 서버 컴포넌트에서 async/await 관련 에러 발생\n- SSR 렌더링 과정에서 데이터 로딩 에러\n- 서버 사이드에서만 발생하는 런타임 에러\n\n#### 자동 검증 프로세스 실행 (서버 컴포넌트)\n\n1. **포트 확인**: 환경 변수에서 현재 사용 중인 포트 확인 (예: 3000)\n2. **포트 사용 프로세스 종료**: `kill $(lsof -ti:3000)`로 해당 포트 프로세스 종료\n3. **실행 명령어 확인**: 사용자에게 현재 개발 서버 실행 명령어 문의 (예: `pnpm qa`)\n4. **서버 재시작**: 확인된 명령어로 동일한 환경으로 재시작\n5. **서버 콘솔 접근**: 재시작된 서버의 콘솔 로그 모니터링 활성화\n6. **컴포넌트 사용 경로 탐지**: 수정된 서버 컴포넌트가 사용되는 모든 페이지 식별\n7. **전체 경로 순차 검증**: 각 경로별로 SSR 렌더링 및 페이지 로드 확인\n8. **서버 에러 모니터링**: 수정 대상 에러만 확인, 기타 로그 무시\n9. **최종 검증**: 서버 콘솔과 브라우저 모두에서 에러 해결 확인\n\n#### 주요 차이점\n\n- **서버 재시작 필수**: 서버 컴포넌트 변경사항 반영을 위해 자동 재시작\n- **서버 콘솔 모니터링**: 클라이언트 콘솔뿐만 아니라 서버 콘솔도 실시간 감지\n- **SSR 검증**: 서버 사이드 렌더링 과정에서의 에러 확인\n- **빌드 타임 검증**: TypeScript 컴파일 및 빌드 과정 에러 확인\n\n## Escalation Procedures (에스컬레이션 절차)\n\n### 언제 에스컬레이션 하는가\n\n#### 즉시 에스컬레이션 (🚨 긴급)\n\n- **보안 취약점** 발견\n- **프로덕션 시스템** 장애\n- **데이터 손실**이나 손상 위험\n- **법적 준수** 위반\n- **중요한 비즈니스 로직** 오류\n\n#### 표준 에스컬레이션 (⚠️ 중요)\n\n- **아키텍처 결정**이 필요한 경우\n- **Breaking changes**가 필요한 경우\n- **성능 문제** 발견\n- 외부 시스템과의 **통합 문제**\n- **리소스나 일정** 제약\n\n#### 자문 에스컬레이션 (💡 가이드)\n\n- **모범 사례** 질문\n- **코드 리뷰** 요청\n- **디자인 패턴** 명확화\n- **도구나 라이브러리** 추천\n- **프로세스 개선** 제안\n\n### 에스컬레이션 방법\n\n#### 제공해야 할 정보\n\n1. **컨텍스트** - 달성하려는 목표\n2. **이슈** - 구체적인 문제나 불확실성\n3. **영향** - 결정의 잠재적 결과\n4. **옵션** - 고려한 대안들\n5. **권장사항** - 제안하는 접근법 (있는 경우)\n\n## 요약\n\nAI Development Guardrails는 안전하고 생산적이며 협력적인 AI 지원 개발을 보장합니다. 핵심 원칙은 다음과 같습니다:\n\n1. **🏆 불확실할 때는 항상 문의** - 황금 규칙\n2. **🔒 경계 존중** - 허용된 범위 내에서 작업\n3. **🧪 철저한 테스트** - 품질과 안전성 확보\n4. **📚 변경사항 문서화** - 투명성 유지\n5. **🤝 적극적 협업** - 인간 개발자와 협력\n6. **⚠️ 적절한 에스컬레이션** - 언제 가이드를 구해야 하는지 파악\n7. **🔄 자동화된 검증** - React/클라이언트 코드 수정 시 필수 검증 프로세스 자동 실행\n\n### AI Assistant 자동화 규칙 적용 (2025.06.11 업데이트)\n\n본 문서에 통합된 **AI Assistant 자동화 규칙**은 다음과 같은 핵심 기능을 제공합니다:\n\n**🚀 자동 검증 트리거:**\n\n- React 컴포넌트 파일(`.tsx`, `.jsx`) 수정 시 무조건 자동 실행\n- `src/components/`, `src/app/` 내 파일 수정 시 무조건 자동 실행\n- 에러 메시지에 컴포넌트 이름이 포함된 경우 무조건 자동 실행\n\n**🔧 자동화된 프로세스:**\n\n- **포트 번호 자동 탐지**: 3000 포트 우선 확인 → 환경 변수 탐지 → 서버 시작\n- **컴포넌트 사용 경로 탐지**: import 구문 검색으로 관련 페이지 자동 식별\n- **MCP Puppeteer 필수 실행**: 모든 React 컴포넌트 수정 후 브라우저 검증 필수\n- **권한 면제 자동 실행**: 개발 환경 테스트는 사용자 권한 확인 없이 즉시 실행\n- **특정 에러만 확인**: 수정 대상 에러만 해결 확인, 기타 에러/경고 무시\n\n이러한 가이드라인을 따름으로써 AI 어시스턴트는 프로젝트 품질, 보안, 팀 협업을 유지하면서 효과적으로 기여할 수 있습니다.\n````\n",
      "content_text": "Claude Code와 함께 사용할 CLAUDE.md 파일 작성 가이드",
      "url": "https://leeduhan.github.io/posts/claude/2025-06-10-claude-md-guide/",
      "date_published": "2025-06-10T00:00:00.000Z",
      "authors": [
        {
          "name": "이두한",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "CLAUDE.md",
        "AGENTS.md",
        "프로젝트 가이드",
        "코드 스타일",
        "TypeScript",
        "Claude Code",
        "클로드 코드",
        "바이브 코딩",
        "Vibe Coding"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/stock/2025-06-02/",
      "title": "AI 투자의 명암: NVIDIA vs Palantir 완전 해부 분석",
      "content_html": "\n# 🤖 AI 투자의 명암: NVIDIA vs Palantir 완전 해부 분석\n\n> **\"같은 AI 관련주인데 왜 이렇게 다를까?\"** - 믿을 수 있는 투자 분석의 비밀\n\n안녕하세요, 투자자 여러분! 오늘은 특별한 분석 이야기를 들려드리려고 합니다.\n\n최근 AI 열풍으로 많은 관련주들이 급등하고 있는데요, 정말 모든 AI 주식이 투자할 만한 가치가 있을까요? 같은 AI 섹터에 속한 NVIDIA(NVDA)와 Palantir(PLTR)을 심층 분석해보니 놀라운 결과가 나왔습니다.\n\n## 🔍 분석의 핵심: \"말과 행동이 다르다\"\n\n기존의 투자 분석은 대부분 차트와 재무제표에 의존했습니다. 하지만 이번에는 **새로운 분석 방법**을 써봤는데, 핵심은 바로 **\"말과 행동의 차이\"**를 확인하는 것입니다.\n\n### 📊 무엇을 확인했나요?\n\n**1단계: 전문가들이 \"말하는 것\"**\n\n- 증권사 애널리스트의 매수/매도 추천\n- 목표주가 상향/하향 조정\n- 긍정적/부정적 전망 발표\n\n**2단계: 큰손들이 \"실제로 하는 것\"**\n\n- 대형 투자회사들의 실제 매수/매도 금액\n- 연기금, 보험사 등의 포지션 변화\n- 회사 임원들의 주식 거래 내역\n\n**3단계: 차이 정도 계산**\n말과 행동이 다를수록 \"위험 신호\"로 판단합니다.\n\n## 🚀 NVIDIA 분석 결과: \"조심스럽게 긍정\"\n\n### 📈 기본 현황\n\n- **현재가**: $135.13\n- **분석 결론**: 조심스럽게 상승 (15-20% 목표)\n- **분석 신뢰도**: 85%\n\n### 💡 핵심 발견사항\n\n**✅ 회사 실적 우수**\n\n- 분기 매출 $440억 (예상보다 $7억 더 많음)\n- AI 칩 매출 73% 급성장\n- 신제품 출시 성공적\n\n**⚠️ 하지만 주의할 점도 발견**\n\n- **말과 행동 차이 67%**: 애널리스트들은 \"강력 매수\"를 외치지만, 실제로는 대형 투자회사들이 수조원을 팔고 있었습니다.\n- **중국 리스크**: 중국 수출 규제로 분기당 80억 달러 손실 확정\n- **주가 부담**: 현재 주가가 미래 수익을 과도하게 반영\n\n**🎯 투자 전략**\n\n```\n✓ 매수 타이밍: 중국 관련 악재 뉴스 후 2-3일 기다린 후\n✓ 목표 가격: $165-170 달성 시 일부 매도\n✓ 손절 기준: $115 아래로 떨어지면 손절\n✓ 이유: 기본기는 좋지만 위험 요소 관리 필요\n```\n\n## 📉 Palantir 분석 결과: \"절대 사지 마세요\"\n\n### 📊 기본 현황\n\n- **현재가**: $123.50 (추정)\n- **분석 결론**: 절대 투자 금지 (-40~50% 하락 예상)\n- **분석 신뢰도**: 75%\n\n### 🚨 충격적인 발견사항\n\n**❌ 극심한 말과 행동 차이**\n\n- **차이 정도 88%**: 분석 역사상 최고 수준\n- **전문가들**: 중립, 평균 목표가 $88 (33% 하락 전망)\n- **시장 실제**: 2025년 나스닥 최고 성과주 (+63% 상승)\n\n**💥 위험 신호들**\n\n1. **터무니없는 주가**: 매출 대비 주가가 100배 이상 (정상은 10-20배)\n2. **창업자 매도**: 회사를 만든 피터 틸이 1조원어치 주식을 팔겠다고 신고\n3. **역사적 교훈**: 과거 이렇게 비싼 주식들은 모두 70% 이상 떨어졌음\n\n### 🔍 추가 검증 결과\n\n**다른 분석 방법**으로도 확인해봤는데 동일한 결론이 나왔습니다:\n\n- **시장 과열도**: 극도로 과열된 상태\n- **통계적 이상**: 정상 범위를 크게 벗어남\n- **모든 기술 지표**: 하락 신호\n\n## 💭 투자자를 위한 핵심 교훈\n\n### 1. 좋은 회사 ≠ 좋은 투자\n\nPalantir은 뛰어난 기술을 가진 훌륭한 회사입니다. 분기 39% 성장 등 실적도 우수했습니다. 하지만 **가격이 너무 비싸면** 좋은 투자가 될 수 없습니다.\n\n### 2. \"말과 행동\" 분석의 위력\n\n같은 AI 업종임에도 불구하고:\n\n- **NVIDIA**: 67% 차이 (주의 필요)\n- **Palantir**: 88% 차이 (극도 위험)\n\n돈을 실제로 움직이는 큰손들의 행동이 더 정확한 신호를 보내고 있었습니다.\n\n### 3. 주가는 결국 적정선으로 돌아간다\n\n- **NVIDIA**: 비싸긴 하지만 견딜 만한 수준\n- **Palantir**: 역사적으로 지속 불가능한 수준\n\n## 🎯 실전 투자 가이드\n\n### ✅ NVIDIA 투자 시 체크할 것들\n\n- [ ] 중국 관련 뉴스 계속 확인\n- [ ] CEO 발언 내용 추적\n- [ ] 대형 투자회사들의 매매 동향 확인\n- [ ] $115 아래로 떨어지면 손절 준비\n\n### ❌ Palantir 투자하면 안 되는 이유\n\n- [ ] 주가가 회사 가치의 100배 이상\n- [ ] 창업자가 대량 매도 진행 중\n- [ ] 전문가와 시장이 정반대 신호\n- [ ] 다시 살 때는 주가가 $30 이하로 떨어진 후\n\n## 📚 결론: 분석이 돈을 지켜준다\n\n이번 분석을 통해 확인한 것은 **\"같은 업종도 완전히 다르다\"**는 사실입니다.\n\n**NVIDIA**는 위험이 있지만 기본기가 튼튼한 조심스러운 투자 대상이고, **Palantir**는 좋은 회사이지만 현재 주가로는 절대 사면 안 되는 주식입니다.\n\n### 🔮 여러분의 투자에 활용해보세요\n\n1. **회사 실적 확인** (매출, 수익 증가율)\n2. **말과 행동 차이 점검** (전문가 의견 vs 큰손들의 실제 매매)\n3. **주가 적정성 검토** (너무 비싸지 않은지)\n4. **위험 관리** (손절 기준, 투자 비중)\n\n---\n\n**💬 여러분의 생각은 어떠신가요?**\n\n이런 분석 방법을 실제 투자에 써보신 적이 있다면 댓글로 경험을 공유해주세요! 다음에는 어떤 주식을 분석해봤으면 좋겠는지도 알려주시면 참고하겠습니다.\n\n**⚠️ 투자 주의사항**: 이 분석은 참고용이며, 모든 투자 결정과 결과는 투자자 본인의 책임입니다. 투자 전 반드시 추가 조사와 전문가 상담을 받으시기 바랍니다.\n\n---\n\n_📧 더 많은 투자 정보가 궁금하다면 구독과 좋아요 부탁드립니다!_\n\n**Tags**: #AI투자 #NVIDIA #Palantir #주식분석 #투자전략 #주식공부 #투자기초 #위험관리\n",
      "content_text": "증권사 애널리스트와 기관투자자들의 말과 행동이 67-88% 다르다는 충격적인 발견! NVIDIA는 조심스럽게 접근하고, Palantir는 지금 사면 안 되는 이유를 데이터로 분석했습니다. 피터 틸이 1조원어치 주식을 파는 진짜 이유는?",
      "url": "https://leeduhan.github.io/posts/stock/2025-06-02/",
      "date_published": "2025-06-02T00:00:00.000Z",
      "authors": [
        {
          "name": "클로드",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "AI투자",
        "NVIDIA",
        "Palantir",
        "PLTY",
        "주식분석",
        "투자",
        "주식공부",
        "반도체",
        "테크주",
        "애널리스트",
        "기관투자자",
        "밸류에이션",
        "나스닥",
        "중국리스크",
        "피터틸",
        "BlackRock",
        "AI칩",
        "Blackwell"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/ai/ai-friend-or-enemy/",
      "title": "AI는 친구인가? 적인가? - 개발자가 바라본 AI 시대 생존법",
      "content_html": "\n# AI는 친구인가? 적인가?\n\n요즘 AI로 개발하는 것이 어느 정도 당연시되고 있다.\n\n그래서 요즘엔 AI를 적극적으로 쓰면서 장단점을 파악해서 어떤 부분을 이용할 수 있고, 어떤 부분이 약하니까 누가 보완해야 하는지 고민하고 있는데\n\n의외로 나보다 젊은 회사 사람들은 AI 쓰는 것을 꺼린다. 정확히는 무서워한다고 해야 하나?\n\n\"AI에 너무 의존하게 되면서 내가 바보가 되어가는 것 같다\"고 이야기한다. AI가 모든 판단을 하고 결정을 하니까 점점 머리를 안 쓰게 되어서 바보가 되어간다고 느낀다고 한다.\n\n나도 그 말에는 동감한다. 너무 의존하게 되면 바보가 된다.\n\n하지만 이건 AI의 문제가 아니다.\n\n몇 가지 예를 들어보자.\n\n우리가 개발할 때 생각해보자. IDE 자동완성, 스택오버플로우, 깃허브 코파일럿... 이런 도구들 없이 개발하는 사람이 있을까? 예전 개발자들이 메모장으로 코딩했다고 해서 우리도 그래야 할까?\n\n도구는 도구일 뿐이다. 중요한 건 도구에 의존하는 게 아니라 도구를 통해 더 본질적인 문제에 집중하는 것이다. 자동완성이 있어도 좋은 코드 구조를 설계하는 능력은 여전히 사람의 몫이고, AI가 코드를 짜줘도 전체 아키텍처를 그리는 건 사람이 해야 한다.\n\n다른 예를 보자. 내가 집을 사려고 하는데 아무것도 모른다고 하자. 그러면 어떻게 할까? 먼저 부동산에 갈 거고 거기서 일면식도 없는 중개사를 만날 것이다. 나는 아무것도 모르니 그저 신뢰할 수 없는 사람의 말만 듣고 판단할 수밖에 없다.\n\n그런데 내 주변에 부동산을 잘하는 친구가 있다고 가정해보자. 그러면 내가 그 친구에게 많은 것을 물어가면서 중개사가 말하는 게 진짜인지 확인하지 않겠는가? AI란 그런 존재인 것이다.\n\n모든 것은 의존하게 되면 장기적으로는 손해다. 내가 학습한 게 없고 배운 게 없으니 체화도 없을 것이고, 결국 지식은 사라진다. AI를 통해 지식을 습득하고 체화해서 세부적인 방법을 내 것으로 만들어야 한다.\n\n결국 AI는 매우 다방면에 매우 똑똑한 동료 같은 존재다. 내가 통찰과 세부적인 방법이 내 몸에 익을 동안 도와주는 똑똑한 도구라고 생각한다.\n\n## 현실: 전쟁터에 호미 들고 나갈 건가?\n\n사회는 전쟁터다. 전쟁터에 나가는데 남들은 총을 들고 나가는데 나 혼자 호미 들고 전쟁에 나가면 이길 수 있겠는가?\n\n지금 프로그래밍을 배우는 사람들은 AI 쓰는 것을 당연시할 것이고, 그 과정에서 결국 가성비로 보면 AI를 잘 쓰는 사람이 압도적으로 유리하다. 기업 입장에서는 생존을 위해서라도 생산성이 뛰어난 'AI 잘 쓰는 개발자'를 뽑을 것이다.\n\n아니면 업계가 통합되면서 기획자나 디자이너가 개발도 함께 하게 될 수도 있다.\n\n한때 엑셀을 잘하는 사람이 대우 받던것 처럼 모든 시대에는 필요로하고, 가성비 좋지만 쉽게 접근하지 않는 무언가가 존재한다.\n\n## 인간 역사는 가성비의 승리\n\n어떤 시대가 올지 모르지만 인간의 역사는 대부분 가성비(투입 대비 산출)의 승리였다고 생각한다. 적자생존을 하려면 누구보다 적은 에너지로 많은 에너지를 얻어야 했고, 그 에너지로 경쟁자보다 빠르게 앞으로 나가야만 살아남을 수 있었다.\n\n그래서 나는 오늘도 적이 될지 모르는 친구를 분석해서 최대한 내 친구가 되도록 만들려고 노력 중이다.\n\n주변에 잘하는 친구가 있다면 그것을 시기, 질투, 외면할 것이 아니라 친하게 지내고 그 기간 동안 최대한 많은 것을 배워야 한다. 그래서 내 것으로 만들어야 한다.\n\nAI 시대에는 많은 것이 변할 것이다. 개발하는 것조차도 단순 노가다는 AI가 하고, 아키텍처 설계 같은 큰 방향성 설계나 어떤 것이 옳은 방향인지는 결국 사람이 해야 한다.\n\n현재의 패러다임도 많이 변하게 될 것이다.\n\n## 결론: 환경에 적응하는 자가 살아남는다\n\n인간은 미지에 공포를 느낀다. 지금 AI에 두려움을 느끼고 있는 것은 이제 AI를 시작하는 사람들이 아닌 기존 것에 익숙한 기존 사람들이다.\n\n익숙한 것에서 벗어나야 하는데 그게 쉽지 않을 것이다. 그리고 점점 AI가 다가올수록 두려울 것이다.\n\n그게 인간의 본능이다. 그 본능을 이기고 한 발자국 나갈 수 있다면 우리는 생존의 한걸음이 될 수 있다.\n\n> **\"살아남는 종은 가장 강하거나 가장 지적인 종이 아니다. 변화하는 환경에 가장 잘 적응할 수 있는 종이다.\"**  \n> — 레온 C. 메기슨 (Leon C. Megginson), 1963년 (다윈의 진화론을 해석하며)\n\nAI는 변화의 물결이다. 내가 이 물결을 거스르고 올라갈 것인지, 물결을 타면서 더 멀리 가서 생존할 것인지 그 선택의 기로에 서 있다.\n\n그것이 바로 지금이다.\n\n---\n\n**Tags**: #AI #개발자 #생산성 #적자생존 #환경적응 #코딩도구 #IDE #깃허브코파일럿 #가성비 #개발도구 #프로그래밍 #기술변화 #개발커리어 #AI시대\n",
      "content_text": "AI를 두려워하는 동료들과 달리, 나는 AI를 똑똑한 동료로 여긴다. 전쟁터에서 호미 들고 싸울 순 없지 않나? AI 시대를 살아가는 개발자의 현실적 조언.",
      "url": "https://leeduhan.github.io/posts/ai/ai-friend-or-enemy/",
      "date_published": "2025-06-02T00:00:00.000Z",
      "authors": [
        {
          "name": "lee du han",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "AI",
        "개발자",
        "생산성",
        "적자생존",
        "기술변화",
        "개발커리어",
        "AI시대"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/react-19-guide/",
      "title": "React 19 완벽 가이드",
      "content_html": "\n# React 19 완벽 가이드\n\nReact 19가 정식 출시되면서 프론트엔드 개발에 많은 변화를 가져왔습니다. 이번 글에서는 React 19의 주요 기능들과 실제 사용법을 알아보겠습니다.\n\n## 새로운 훅들\n\n### use() 훅\n\n가장 주목받는 새로운 훅은 `use()`입니다. 이 훅을 통해 Promise와 Context를 더 쉽게 다룰 수 있습니다.\n\n```javascript\nimport { use, Suspense } from \"react\";\n\nfunction UserComponent({ userPromise }) {\n  // Promise를 직접 사용할 수 있습니다\n  const user = use(userPromise);\n\n  return <div>안녕하세요, {user.name}님!</div>;\n}\n\nfunction App() {\n  const userPromise = fetch(\"/api/user\").then((res) => res.json());\n\n  return (\n    <Suspense fallback={<div>로딩중...</div>}>\n      <UserComponent userPromise={userPromise} />\n    </Suspense>\n  );\n}\n```\n\n### useOptimistic() 훅\n\n낙관적 업데이트를 쉽게 구현할 수 있는 새로운 훅입니다:\n\n```javascript\nimport { useOptimistic, useState } from \"react\";\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  const [optimisticTodos, addOptimisticTodo] = useOptimistic(\n    todos,\n    (currentTodos, newTodo) => [...currentTodos, newTodo]\n  );\n\n  async function addTodo(formData) {\n    const newTodo = { id: Date.now(), text: formData.get(\"text\") };\n\n    // 즉시 UI 업데이트\n    addOptimisticTodo(newTodo);\n\n    // 서버에 실제 요청\n    try {\n      const savedTodo = await saveTodo(newTodo);\n      setTodos((prev) => [...prev, savedTodo]);\n    } catch (error) {\n      // 에러 시 자동으로 이전 상태로 롤백\n      console.error(\"할 일 저장 실패:\", error);\n    }\n  }\n\n  return (\n    <div>\n      {optimisticTodos.map((todo) => (\n        <div key={todo.id}>{todo.text}</div>\n      ))}\n      <form action={addTodo}>\n        <input name=\"text\" placeholder=\"새 할 일\" />\n        <button type=\"submit\">추가</button>\n      </form>\n    </div>\n  );\n}\n```\n\n## 서버 컴포넌트 개선\n\n### 향상된 성능\n\nReact 19에서는 서버 컴포넌트의 성능이 크게 개선되었습니다:\n\n- **스트리밍 최적화**: 더 빠른 초기 페이지 로드\n- **선택적 하이드레이션**: 필요한 부분만 하이드레이션\n- **메모리 사용량 감소**: 서버 메모리 효율성 향상\n\n```javascript\n// 서버 컴포넌트에서 비동기 데이터 처리\nasync function BlogPost({ id }) {\n  // 서버에서 직접 데이터베이스 쿼리\n  const post = await db.posts.findById(id);\n  const comments = await db.comments.findByPostId(id);\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n      <Comments comments={comments} />\n    </article>\n  );\n}\n```\n\n## 새로운 컴파일러\n\n### React Compiler\n\nReact 19에는 새로운 컴파일러가 포함되어 자동 최적화를 제공합니다:\n\n```javascript\n// 이제 수동으로 메모이제이션할 필요가 없습니다\nfunction ExpensiveComponent({ data, filter }) {\n  // 컴파일러가 자동으로 최적화\n  const filteredData = data.filter((item) => item.category === filter);\n\n  const processedData = filteredData.map((item) => ({\n    ...item,\n    processed: true,\n  }));\n\n  return (\n    <div>\n      {processedData.map((item) => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n## 폼 처리 개선\n\n### 새로운 formAction\n\n폼 처리가 더욱 간단해졌습니다:\n\n```javascript\nfunction ContactForm() {\n  async function handleSubmit(formData) {\n    \"use server\"; // 서버 액션\n\n    const email = formData.get(\"email\");\n    const message = formData.get(\"message\");\n\n    await sendEmail({ email, message });\n    redirect(\"/thank-you\");\n  }\n\n  return (\n    <form action={handleSubmit}>\n      <input name=\"email\" type=\"email\" required />\n      <textarea name=\"message\" required />\n      <button type=\"submit\">전송</button>\n    </form>\n  );\n}\n```\n\n## 마이그레이션 팁\n\n### 주요 변경사항\n\n1. **StrictMode 강화**: 개발 모드에서 더 엄격한 검사\n2. **레거시 API 제거**: 일부 오래된 API가 제거됨\n3. **TypeScript 지원 개선**: 더 나은 타입 추론\n\n### 업그레이드 체크리스트\n\n- [ ] React 18에서 안정적으로 작동하는지 확인\n- [ ] 사용 중단된 API 사용 여부 점검\n- [ ] 테스트 케이스 업데이트\n- [ ] 의존성 라이브러리 호환성 확인\n\n```bash\n# 업그레이드 명령어\nnpm install react@19 react-dom@19\n\n# 또는 yarn\nyarn add react@19 react-dom@19\n```\n\n## 성능 개선사항\n\n### 번들 크기 감소\n\n- **Tree Shaking 개선**: 더 정확한 사용하지 않는 코드 제거\n- **코드 스플리팅**: 자동화된 청크 분할\n- **압축 최적화**: 더 작은 프로덕션 번들\n\n### 런타임 성능\n\n- **메모리 사용량 감소**: 더 효율적인 메모리 관리\n- **렌더링 최적화**: 불필요한 리렌더링 방지\n- **이벤트 처리**: 더 빠른 이벤트 처리\n\n## 결론\n\nReact 19는 개발자 경험과 성능 모두에서 큰 발전을 이뤘습니다. 새로운 훅들과 컴파일러 최적화로 더 깔끔하고 효율적인 코드를 작성할 수 있게 되었습니다.\n\n점진적으로 새로운 기능들을 도입하면서 React 19의 장점을 최대한 활용해보세요!\n",
      "content_text": "React 19의 새로운 기능들과 변경사항을 자세히 알아봅니다.",
      "url": "https://leeduhan.github.io/posts/react/react-19-guide/",
      "date_published": "2025-06-01T00:00:00.000Z",
      "authors": [
        {
          "name": "Blog Author",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "react",
        "javascript",
        "frontend",
        "web development"
      ]
    },
    {
      "id": "https://leeduhan.github.io/posts/react/nextjs-15-features/",
      "title": "Next.js 15의 새로운 기능들",
      "content_html": "\n# Next.js 15의 새로운 기능들\n\nNext.js 15가 출시되면서 많은 흥미로운 기능들이 추가되었습니다. 이번 포스트에서는 주요 변경사항과 새로운 기능들을 자세히 살펴보겠습니다.\n\n## 주요 변경사항\n\n### React 19 지원\n\nNext.js 15는 React 19를 완전히 지원합니다. 이는 다음과 같은 이점을 제공합니다:\n\n- **향상된 성능**: 새로운 React 컴파일러 최적화\n- **개선된 서버 컴포넌트**: 더 빠른 렌더링과 낮은 번들 크기\n- **새로운 훅들**: `use()` 훅 등의 새로운 기능\n\n```javascript\n// React 19의 새로운 use() 훅 사용 예제\nimport { use } from \"react\";\n\nfunction UserProfile({ userPromise }) {\n  const user = use(userPromise);\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n### Turbopack 안정화\n\nTurbopack이 개발 모드에서 기본값으로 설정되었습니다:\n\n- **더 빠른 개발 서버**: 기존 Webpack 대비 최대 10배 빠른 속도\n- **향상된 HMR**: 거의 즉시 반영되는 핫 리로드\n- **메모리 효율성**: 더 적은 메모리 사용량\n\n## 새로운 기능들\n\n### 1. 향상된 정적 내보내기\n\n`output: 'export'` 옵션이 개선되어 더 많은 기능을 지원합니다:\n\n```javascript\n// next.config.js\nconst nextConfig = {\n  output: \"export\",\n  trailingSlash: true,\n  images: {\n    unoptimized: true,\n  },\n};\n```\n\n### 2. 개선된 이미지 최적화\n\n새로운 이미지 최적화 옵션들이 추가되었습니다:\n\n- **WebP 자동 변환**: 지원되는 브라우저에서 자동으로 WebP 형식 사용\n- **로딩 우선순위**: 중요한 이미지의 우선 로딩 지원\n- **반응형 이미지**: 더 나은 반응형 이미지 지원\n\n### 3. 새로운 메타데이터 API\n\nSEO와 소셜 미디어 최적화를 위한 새로운 메타데이터 API:\n\n```typescript\nimport type { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"My Blog Post\",\n  description: \"An amazing blog post about Next.js\",\n  openGraph: {\n    title: \"My Blog Post\",\n    description: \"An amazing blog post about Next.js\",\n    images: [\"/og-image.jpg\"],\n  },\n};\n```\n\n## 성능 개선사항\n\n### 빌드 시간 단축\n\n- **증분 빌드**: 변경된 부분만 다시 빌드\n- **병렬 처리**: 더 많은 작업을 병렬로 처리\n- **캐시 최적화**: 더 효율적인 빌드 캐시\n\n### 런타임 성능\n\n- **번들 크기 감소**: Tree-shaking 개선으로 더 작은 번들\n- **코드 스플리팅**: 더 지능적인 코드 분할\n- **프리페칭**: 향상된 페이지 프리페칭\n\n## 마이그레이션 가이드\n\nNext.js 14에서 15로 업그레이드하는 방법:\n\n```bash\nnpm install next@latest react@latest react-dom@latest\n```\n\n주요 변경사항:\n\n- Node.js 18.17 이상 필요\n- React 19 호환성 확인\n- 사용 중단된 API 제거\n\n## 결론\n\nNext.js 15는 성능, 개발자 경험, 그리고 프로덕션 최적화 측면에서 많은 개선을 가져왔습니다. React 19와의 완벽한 통합과 Turbopack의 안정화로 더욱 빠르고 효율적인 개발이 가능해졌습니다.\n\n새로운 기능들을 활용해 더 나은 웹 애플리케이션을 구축해보세요!\n",
      "content_text": "Next.js 15에서 도입된 주요 기능들과 개선사항을 살펴봅니다.",
      "url": "https://leeduhan.github.io/posts/react/nextjs-15-features/",
      "date_published": "2025-06-01T00:00:00.000Z",
      "authors": [
        {
          "name": "Blog Author",
          "url": "https://leeduhan.github.io"
        }
      ],
      "tags": [
        "nextjs",
        "react",
        "web development",
        "javascript"
      ]
    }
  ]
}